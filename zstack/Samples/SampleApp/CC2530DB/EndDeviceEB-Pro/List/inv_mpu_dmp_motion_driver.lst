###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         21/Dec/2018  21:10:03 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\Source\MPU6050_DMP\inv_mpu_dmp_motion_driver.c  #
#    Command line       =  -f F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú #
#                          \ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cf #
#                          g (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f  #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg  #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\Source\MPU6050_DMP\inv_mpu_dmp_motion_driver.c  #
#                          -D ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D       #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC F:\key_pro\AAAAAgraduation #
#                          _project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pr #
#                          o\List\ -lA F:\key_pro\AAAAAgraduation_project\Ωªª #
#                          •œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\EndDeviceEB-Pro\List\      #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\EndDeviceEB-Pro\Obj\ -e --debug        #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I F:\key_pro\AAAAAgraduation #
#                          _project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\ -I            #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\SOURCE\ -I                          #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I            #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I       #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ #
#                           -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– #
#                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530EB\ -I F:\key_pro\AAAAAgraduation_project #
#                          \Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\OSAL\MCU\CCSOC\ -I F:\key_pro\AAAAAgraduation_ #
#                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\OSAL\INCLUDE\ -I                        #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\    #
#                          -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú #
#                          \ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK #
#                          \ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã #
#                          –Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S #
#                          EC\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥ #
#                          ≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK #
#                          \SAPI\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œ #
#                          µÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ST #
#                          ACK\SYS\ -I F:\key_pro\AAAAAgraduation_project\Ωªª #
#                          •œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\ZDO\ -I F:\key_pro\AAAAAgraduation_project\Ω #
#                          ªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\ -I F:\key_pro\AAAAAgraduation_project\ #
#                          Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\ZMAC\ -I F:\key_pro\AAAAAgraduation_project\Ωªª #
#                          •œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          SERVICES\SADDR\ -I F:\key_pro\AAAAAgraduation_proj #
#                          ect\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\ -I                          #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ #
#                           -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– #
#                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\ -I F:\key_pro\AAAAAgraduation_project\Ωªª• #
#                          œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\M #
#                          AC\LOW_LEVEL\srf04\ -I F:\key_pro\AAAAAgraduation_ #
#                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I     #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\..\..\..\ -Ohz          #
#    List file          =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\EndDeviceEB-Pro\List\inv_mpu_dmp_motio #
#                          n_driver.lst                                       #
#    Object file        =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\EndDeviceEB-Pro\Obj\inv_mpu_dmp_motion #
#                          _driver.r51                                        #
#                                                                             #
#                                                                             #
###############################################################################

F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleApp\Source\MPU6050_DMP\inv_mpu_dmp_motion_driver.c
      1          /*
      2           $License:
      3              Copyright (C) 2011-2012 InvenSense Corporation, All Rights Reserved.
      4              See included License.txt for License information.
      5           $
      6           */
      7          /**
      8           *  @addtogroup  DRIVERS Sensor Driver Layer
      9           *  @brief       Hardware drivers to communicate with sensors via I2C.
     10           *
     11           *  @{
     12           *      @file       inv_mpu_dmp_motion_driver.c
     13           *      @brief      DMP image and interface functions.
     14           *      @details    All functions are preceded by the dmp_ prefix to
     15           *                  differentiate among MPL and general driver function calls.
     16           */
     17          #include <stdio.h>
     18          #include <stdint.h>
     19          #include <stdlib.h>
     20          #include <string.h>
     21          #include <math.h>
     22          
     23          #include "inv_mpu.h"
     24          #include "inv_mpu_dmp_motion_driver.h"
     25          #include "dmpKey.h"
     26          #include "dmpmap.h"
     27          #include "delay.h"
     28          
     29          //”≥…‰’‚¡Ω∏ˆ∫Ø ˝
     30          //#define delay_ms    delay_ms
     31          //#define get_ms      get_ms
     32          
     33          #define  MOTION_DRIVER_TARGET_MSP430
     34          /* The following functions must be defined for this platform:
     35           * i2c_write(unsigned char slave_addr, unsigned char reg_addr,
     36           *      unsigned char length, unsigned char const *data)
     37           * i2c_read(unsigned char slave_addr, unsigned char reg_addr,
     38           *      unsigned char length, unsigned char *data)
     39           * delay_ms(unsigned long num_ms)
     40           * get_ms(unsigned long *count)
     41           */
     42          #if defined MOTION_DRIVER_TARGET_MSP430
     43          //#include "msp430.h"
     44          //#include "msp430_clock.h"
     45          #define delay_ms    delay_ms
     46          #define get_ms      get_ms
     47          #define log_i(...)     do {} while (0)
     48          #define log_e(...)     do {} while (0)
     49          
     50          #elif defined EMPL_TARGET_MSP430
     51          #include "msp430.h"
     52          #include "msp430_clock.h"
     53          #include "log.h"
     54          #define delay_ms    msp430_delay_ms
     55          #define get_ms      msp430_get_clock_ms
     56          #define log_i       MPL_LOGI
     57          #define log_e       MPL_LOGE
     58          
     59          #elif defined EMPL_TARGET_UC3L0
     60          /* Instead of using the standard TWI driver from the ASF library, we're using
     61           * a TWI driver that follows the slave address + register address convention.
     62           */
     63          #include "delay.h"
     64          #include "sysclk.h"
     65          #include "log.h"
     66          #include "uc3l0_clock.h"
     67          /* delay_ms is a function already defined in ASF. */
     68          #define get_ms  uc3l0_get_clock_ms
     69          #define log_i       MPL_LOGI
     70          #define log_e       MPL_LOGE
     71          
     72          #else
     73          //#error  Gyro driver is missing the system layer implementations.
     74          #endif
     75          
     76          /* These defines are copied from dmpDefaultMPU6050.c in the general MPL
     77           * releases. These defines may change for each DMP image, so be sure to modify
     78           * these values when switching to a new image.
     79           */
     80          #define CFG_LP_QUAT             (2712)
     81          #define END_ORIENT_TEMP         (1866)
     82          #define CFG_27                  (2742)
     83          #define CFG_20                  (2224)
     84          #define CFG_23                  (2745)
     85          #define CFG_FIFO_ON_EVENT       (2690)
     86          #define END_PREDICTION_UPDATE   (1761)
     87          #define CGNOTICE_INTR           (2620)
     88          #define X_GRT_Y_TMP             (1358)
     89          #define CFG_DR_INT              (1029)
     90          #define CFG_AUTH                (1035)
     91          #define UPDATE_PROP_ROT         (1835)
     92          #define END_COMPARE_Y_X_TMP2    (1455)
     93          #define SKIP_X_GRT_Y_TMP        (1359)
     94          #define SKIP_END_COMPARE        (1435)
     95          #define FCFG_3                  (1088)
     96          #define FCFG_2                  (1066)
     97          #define FCFG_1                  (1062)
     98          #define END_COMPARE_Y_X_TMP3    (1434)
     99          #define FCFG_7                  (1073)
    100          #define FCFG_6                  (1106)
    101          #define FLAT_STATE_END          (1713)
    102          #define SWING_END_4             (1616)
    103          #define SWING_END_2             (1565)
    104          #define SWING_END_3             (1587)
    105          #define SWING_END_1             (1550)
    106          #define CFG_8                   (2718)
    107          #define CFG_15                  (2727)
    108          #define CFG_16                  (2746)
    109          #define CFG_EXT_GYRO_BIAS       (1189)
    110          #define END_COMPARE_Y_X_TMP     (1407)
    111          #define DO_NOT_UPDATE_PROP_ROT  (1839)
    112          #define CFG_7                   (1205)
    113          #define FLAT_STATE_END_TEMP     (1683)
    114          #define END_COMPARE_Y_X         (1484)
    115          #define SKIP_SWING_END_1        (1551)
    116          #define SKIP_SWING_END_3        (1588)
    117          #define SKIP_SWING_END_2        (1566)
    118          #define TILTG75_START           (1672)
    119          #define CFG_6                   (2753)
    120          #define TILTL75_END             (1669)
    121          #define END_ORIENT              (1884)
    122          #define CFG_FLICK_IN            (2573)
    123          #define TILTL75_START           (1643)
    124          #define CFG_MOTION_BIAS         (1208)
    125          #define X_GRT_Y                 (1408)
    126          #define TEMPLABEL               (2324)
    127          #define CFG_ANDROID_ORIENT_INT  (1853)
    128          #define CFG_GYRO_RAW_DATA       (2722)
    129          #define X_GRT_Y_TMP2            (1379)
    130          
    131          #define D_0_22                  (22+512)
    132          #define D_0_24                  (24+512)
    133          
    134          #define D_0_36                  (36)
    135          #define D_0_52                  (52)
    136          #define D_0_96                  (96)
    137          #define D_0_104                 (104)
    138          #define D_0_108                 (108)
    139          #define D_0_163                 (163)
    140          #define D_0_188                 (188)
    141          #define D_0_192                 (192)
    142          #define D_0_224                 (224)
    143          #define D_0_228                 (228)
    144          #define D_0_232                 (232)
    145          #define D_0_236                 (236)
    146          
    147          #define D_1_2                   (256 + 2)
    148          #define D_1_4                   (256 + 4)
    149          #define D_1_8                   (256 + 8)
    150          #define D_1_10                  (256 + 10)
    151          #define D_1_24                  (256 + 24)
    152          #define D_1_28                  (256 + 28)
    153          #define D_1_36                  (256 + 36)
    154          #define D_1_40                  (256 + 40)
    155          #define D_1_44                  (256 + 44)
    156          #define D_1_72                  (256 + 72)
    157          #define D_1_74                  (256 + 74)
    158          #define D_1_79                  (256 + 79)
    159          #define D_1_88                  (256 + 88)
    160          #define D_1_90                  (256 + 90)
    161          #define D_1_92                  (256 + 92)
    162          #define D_1_96                  (256 + 96)
    163          #define D_1_98                  (256 + 98)
    164          #define D_1_106                 (256 + 106)
    165          #define D_1_108                 (256 + 108)
    166          #define D_1_112                 (256 + 112)
    167          #define D_1_128                 (256 + 144)
    168          #define D_1_152                 (256 + 12)
    169          #define D_1_160                 (256 + 160)
    170          #define D_1_176                 (256 + 176)
    171          #define D_1_178                 (256 + 178)
    172          #define D_1_218                 (256 + 218)
    173          #define D_1_232                 (256 + 232)
    174          #define D_1_236                 (256 + 236)
    175          #define D_1_240                 (256 + 240)
    176          #define D_1_244                 (256 + 244)
    177          #define D_1_250                 (256 + 250)
    178          #define D_1_252                 (256 + 252)
    179          #define D_2_12                  (512 + 12)
    180          #define D_2_96                  (512 + 96)
    181          #define D_2_108                 (512 + 108)
    182          #define D_2_208                 (512 + 208)
    183          #define D_2_224                 (512 + 224)
    184          #define D_2_236                 (512 + 236)
    185          #define D_2_244                 (512 + 244)
    186          #define D_2_248                 (512 + 248)
    187          #define D_2_252                 (512 + 252)
    188          
    189          #define CPASS_BIAS_X            (35 * 16 + 4)
    190          #define CPASS_BIAS_Y            (35 * 16 + 8)
    191          #define CPASS_BIAS_Z            (35 * 16 + 12)
    192          #define CPASS_MTX_00            (36 * 16)
    193          #define CPASS_MTX_01            (36 * 16 + 4)
    194          #define CPASS_MTX_02            (36 * 16 + 8)
    195          #define CPASS_MTX_10            (36 * 16 + 12)
    196          #define CPASS_MTX_11            (37 * 16)
    197          #define CPASS_MTX_12            (37 * 16 + 4)
    198          #define CPASS_MTX_20            (37 * 16 + 8)
    199          #define CPASS_MTX_21            (37 * 16 + 12)
    200          #define CPASS_MTX_22            (43 * 16 + 12)
    201          #define D_EXT_GYRO_BIAS_X       (61 * 16)
    202          #define D_EXT_GYRO_BIAS_Y       (61 * 16) + 4
    203          #define D_EXT_GYRO_BIAS_Z       (61 * 16) + 8
    204          #define D_ACT0                  (40 * 16)
    205          #define D_ACSX                  (40 * 16 + 4)
    206          #define D_ACSY                  (40 * 16 + 8)
    207          #define D_ACSZ                  (40 * 16 + 12)
    208          
    209          #define FLICK_MSG               (45 * 16 + 4)
    210          #define FLICK_COUNTER           (45 * 16 + 8)
    211          #define FLICK_LOWER             (45 * 16 + 12)
    212          #define FLICK_UPPER             (46 * 16 + 12)
    213          
    214          #define D_AUTH_OUT              (992)
    215          #define D_AUTH_IN               (996)
    216          #define D_AUTH_A                (1000)
    217          #define D_AUTH_B                (1004)
    218          
    219          #define D_PEDSTD_BP_B           (768 + 0x1C)
    220          #define D_PEDSTD_HP_A           (768 + 0x78)
    221          #define D_PEDSTD_HP_B           (768 + 0x7C)
    222          #define D_PEDSTD_BP_A4          (768 + 0x40)
    223          #define D_PEDSTD_BP_A3          (768 + 0x44)
    224          #define D_PEDSTD_BP_A2          (768 + 0x48)
    225          #define D_PEDSTD_BP_A1          (768 + 0x4C)
    226          #define D_PEDSTD_INT_THRSH      (768 + 0x68)
    227          #define D_PEDSTD_CLIP           (768 + 0x6C)
    228          #define D_PEDSTD_SB             (768 + 0x28)
    229          #define D_PEDSTD_SB_TIME        (768 + 0x2C)
    230          #define D_PEDSTD_PEAKTHRSH      (768 + 0x98)
    231          #define D_PEDSTD_TIML           (768 + 0x2A)
    232          #define D_PEDSTD_TIMH           (768 + 0x2E)
    233          #define D_PEDSTD_PEAK           (768 + 0X94)
    234          #define D_PEDSTD_STEPCTR        (768 + 0x60)
    235          #define D_PEDSTD_TIMECTR        (964)
    236          #define D_PEDSTD_DECI           (768 + 0xA0)
    237          
    238          #define D_HOST_NO_MOT           (976)
    239          #define D_ACCEL_BIAS            (660)
    240          
    241          #define D_ORIENT_GAP            (76)
    242          
    243          #define D_TILT0_H               (48)
    244          #define D_TILT0_L               (50)
    245          #define D_TILT1_H               (52)
    246          #define D_TILT1_L               (54)
    247          #define D_TILT2_H               (56)
    248          #define D_TILT2_L               (58)
    249          #define D_TILT3_H               (60)
    250          #define D_TILT3_L               (62)
    251          
    252          #define DMP_CODE_SIZE           (3062)
    253          

   \                                 In  segment XDATA_ROM_C, align 1
    254          static const unsigned char dmp_memory[DMP_CODE_SIZE] = {
   \                     dmp_memory:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   70           DB 112
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   24           DB 36
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   02           DB 2
   \   00000C   00           DB 0
   \   00000D   03           DB 3
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   65           DB 101
   \   000012   00           DB 0
   \   000013   54           DB 84
   \   000014   FF           DB 255
   \   000015   EF           DB 239
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   FA           DB 250
   \   000019   80           DB 128
   \   00001A   00           DB 0
   \   00001B   0B           DB 11
   \   00001C   12           DB 18
   \   00001D   82           DB 130
   \   00001E   00           DB 0
   \   00001F   01           DB 1
   \   000020   03           DB 3
   \   000021   0C           DB 12
   \   000022   30           DB 48
   \   000023   C3           DB 195
   \   000024   0E           DB 14
   \   000025   8C           DB 140
   \   000026   8C           DB 140
   \   000027   E9           DB 233
   \   000028   14           DB 20
   \   000029   D5           DB 213
   \   00002A   40           DB 64
   \   00002B   02           DB 2
   \   00002C   13           DB 19
   \   00002D   71           DB 113
   \   00002E   0F           DB 15
   \   00002F   8E           DB 142
   \   000030   38           DB 56
   \   000031   83           DB 131
   \   000032   F8           DB 248
   \   000033   83           DB 131
   \   000034   30           DB 48
   \   000035   00           DB 0
   \   000036   F8           DB 248
   \   000037   83           DB 131
   \   000038   25           DB 37
   \   000039   8E           DB 142
   \   00003A   F8           DB 248
   \   00003B   83           DB 131
   \   00003C   30           DB 48
   \   00003D   00           DB 0
   \   00003E   F8           DB 248
   \   00003F   83           DB 131
   \   000040   FF           DB 255
   \   000041   FF           DB 255
   \   000042   FF           DB 255
   \   000043   FF           DB 255
   \   000044   0F           DB 15
   \   000045   FE           DB 254
   \   000046   A9           DB 169
   \   000047   D6           DB 214
   \   000048   24           DB 36
   \   000049   00           DB 0
   \   00004A   04           DB 4
   \   00004B   00           DB 0
   \   00004C   1A           DB 26
   \   00004D   82           DB 130
   \   00004E   79           DB 121
   \   00004F   A1           DB 161
   \   000050   00           DB 0
   \   000051   00           DB 0
   \   000052   00           DB 0
   \   000053   3C           DB 60
   \   000054   FF           DB 255
   \   000055   FF           DB 255
   \   000056   00           DB 0
   \   000057   00           DB 0
   \   000058   00           DB 0
   \   000059   10           DB 16
   \   00005A   00           DB 0
   \   00005B   00           DB 0
   \   00005C   38           DB 56
   \   00005D   83           DB 131
   \   00005E   6F           DB 111
   \   00005F   A2           DB 162
   \   000060   00           DB 0
   \   000061   3E           DB 62
   \   000062   03           DB 3
   \   000063   30           DB 48
   \   000064   40           DB 64
   \   000065   00           DB 0
   \   000066   00           DB 0
   \   000067   00           DB 0
   \   000068   02           DB 2
   \   000069   CA           DB 202
   \   00006A   E3           DB 227
   \   00006B   09           DB 9
   \   00006C   3E           DB 62
   \   00006D   80           DB 128
   \   00006E   00           DB 0
   \   00006F   00           DB 0
   \   000070   20           DB 32
   \   000071   00           DB 0
   \   000072   00           DB 0
   \   000073   00           DB 0
   \   000074   00           DB 0
   \   000075   00           DB 0
   \   000076   00           DB 0
   \   000077   00           DB 0
   \   000078   40           DB 64
   \   000079   00           DB 0
   \   00007A   00           DB 0
   \   00007B   00           DB 0
   \   00007C   60           DB 96
   \   00007D   00           DB 0
   \   00007E   00           DB 0
   \   00007F   00           DB 0
   \   000080   00           DB 0
   \   000081   0C           DB 12
   \   000082   00           DB 0
   \   000083   00           DB 0
   \   000084   00           DB 0
   \   000085   0C           DB 12
   \   000086   18           DB 24
   \   000087   6E           DB 110
   \   000088   00           DB 0
   \   000089   00           DB 0
   \   00008A   06           DB 6
   \   00008B   92           DB 146
   \   00008C   0A           DB 10
   \   00008D   16           DB 22
   \   00008E   C0           DB 192
   \   00008F   DF           DB 223
   \   000090   FF           DB 255
   \   000091   FF           DB 255
   \   000092   02           DB 2
   \   000093   56           DB 86
   \   000094   FD           DB 253
   \   000095   8C           DB 140
   \   000096   D3           DB 211
   \   000097   77           DB 119
   \   000098   FF           DB 255
   \   000099   E1           DB 225
   \   00009A   C4           DB 196
   \   00009B   96           DB 150
   \   00009C   E0           DB 224
   \   00009D   C5           DB 197
   \   00009E   BE           DB 190
   \   00009F   AA           DB 170
   \   0000A0   00           DB 0
   \   0000A1   00           DB 0
   \   0000A2   00           DB 0
   \   0000A3   00           DB 0
   \   0000A4   FF           DB 255
   \   0000A5   FF           DB 255
   \   0000A6   0B           DB 11
   \   0000A7   2B           DB 43
   \   0000A8   00           DB 0
   \   0000A9   00           DB 0
   \   0000AA   16           DB 22
   \   0000AB   57           DB 87
   \   0000AC   00           DB 0
   \   0000AD   00           DB 0
   \   0000AE   03           DB 3
   \   0000AF   59           DB 89
   \   0000B0   40           DB 64
   \   0000B1   00           DB 0
   \   0000B2   00           DB 0
   \   0000B3   00           DB 0
   \   0000B4   00           DB 0
   \   0000B5   00           DB 0
   \   0000B6   1D           DB 29
   \   0000B7   FA           DB 250
   \   0000B8   00           DB 0
   \   0000B9   02           DB 2
   \   0000BA   6C           DB 108
   \   0000BB   1D           DB 29
   \   0000BC   00           DB 0
   \   0000BD   00           DB 0
   \   0000BE   00           DB 0
   \   0000BF   00           DB 0
   \   0000C0   3F           DB 63
   \   0000C1   FF           DB 255
   \   0000C2   DF           DB 223
   \   0000C3   EB           DB 235
   \   0000C4   00           DB 0
   \   0000C5   3E           DB 62
   \   0000C6   B3           DB 179
   \   0000C7   B6           DB 182
   \   0000C8   00           DB 0
   \   0000C9   0D           DB 13
   \   0000CA   22           DB 34
   \   0000CB   78           DB 120
   \   0000CC   00           DB 0
   \   0000CD   00           DB 0
   \   0000CE   2F           DB 47
   \   0000CF   3C           DB 60
   \   0000D0   00           DB 0
   \   0000D1   00           DB 0
   \   0000D2   00           DB 0
   \   0000D3   00           DB 0
   \   0000D4   00           DB 0
   \   0000D5   19           DB 25
   \   0000D6   42           DB 66
   \   0000D7   B5           DB 181
   \   0000D8   00           DB 0
   \   0000D9   00           DB 0
   \   0000DA   39           DB 57
   \   0000DB   A2           DB 162
   \   0000DC   00           DB 0
   \   0000DD   00           DB 0
   \   0000DE   B3           DB 179
   \   0000DF   65           DB 101
   \   0000E0   D9           DB 217
   \   0000E1   0E           DB 14
   \   0000E2   9F           DB 159
   \   0000E3   C9           DB 201
   \   0000E4   1D           DB 29
   \   0000E5   CF           DB 207
   \   0000E6   4C           DB 76
   \   0000E7   34           DB 52
   \   0000E8   30           DB 48
   \   0000E9   00           DB 0
   \   0000EA   00           DB 0
   \   0000EB   00           DB 0
   \   0000EC   50           DB 80
   \   0000ED   00           DB 0
   \   0000EE   00           DB 0
   \   0000EF   00           DB 0
   \   0000F0   3B           DB 59
   \   0000F1   B6           DB 182
   \   0000F2   7A           DB 122
   \   0000F3   E8           DB 232
   \   0000F4   00           DB 0
   \   0000F5   64           DB 100
   \   0000F6   00           DB 0
   \   0000F7   00           DB 0
   \   0000F8   00           DB 0
   \   0000F9   C8           DB 200
   \   0000FA   00           DB 0
   \   0000FB   00           DB 0
   \   0000FC   00           DB 0
   \   0000FD   00           DB 0
   \   0000FE   00           DB 0
   \   0000FF   00           DB 0
   \   000100   10           DB 16
   \   000101   00           DB 0
   \   000102   00           DB 0
   \   000103   00           DB 0
   \   000104   10           DB 16
   \   000105   00           DB 0
   \   000106   FA           DB 250
   \   000107   92           DB 146
   \   000108   10           DB 16
   \   000109   00           DB 0
   \   00010A   22           DB 34
   \   00010B   5E           DB 94
   \   00010C   00           DB 0
   \   00010D   0D           DB 13
   \   00010E   22           DB 34
   \   00010F   9F           DB 159
   \   000110   00           DB 0
   \   000111   01           DB 1
   \   000112   00           DB 0
   \   000113   00           DB 0
   \   000114   00           DB 0
   \   000115   32           DB 50
   \   000116   00           DB 0
   \   000117   00           DB 0
   \   000118   FF           DB 255
   \   000119   46           DB 70
   \   00011A   00           DB 0
   \   00011B   00           DB 0
   \   00011C   63           DB 99
   \   00011D   D4           DB 212
   \   00011E   00           DB 0
   \   00011F   00           DB 0
   \   000120   10           DB 16
   \   000121   00           DB 0
   \   000122   00           DB 0
   \   000123   00           DB 0
   \   000124   04           DB 4
   \   000125   D6           DB 214
   \   000126   00           DB 0
   \   000127   00           DB 0
   \   000128   04           DB 4
   \   000129   CC           DB 204
   \   00012A   00           DB 0
   \   00012B   00           DB 0
   \   00012C   04           DB 4
   \   00012D   CC           DB 204
   \   00012E   00           DB 0
   \   00012F   00           DB 0
   \   000130   00           DB 0
   \   000131   00           DB 0
   \   000132   10           DB 16
   \   000133   72           DB 114
   \   000134   00           DB 0
   \   000135   00           DB 0
   \   000136   00           DB 0
   \   000137   40           DB 64
   \   000138   00           DB 0
   \   000139   00           DB 0
   \   00013A   00           DB 0
   \   00013B   00           DB 0
   \   00013C   00           DB 0
   \   00013D   00           DB 0
   \   00013E   00           DB 0
   \   00013F   00           DB 0
   \   000140   00           DB 0
   \   000141   06           DB 6
   \   000142   00           DB 0
   \   000143   02           DB 2
   \   000144   00           DB 0
   \   000145   05           DB 5
   \   000146   00           DB 0
   \   000147   07           DB 7
   \   000148   00           DB 0
   \   000149   00           DB 0
   \   00014A   00           DB 0
   \   00014B   00           DB 0
   \   00014C   00           DB 0
   \   00014D   64           DB 100
   \   00014E   00           DB 0
   \   00014F   00           DB 0
   \   000150   00           DB 0
   \   000151   00           DB 0
   \   000152   00           DB 0
   \   000153   00           DB 0
   \   000154   00           DB 0
   \   000155   00           DB 0
   \   000156   00           DB 0
   \   000157   05           DB 5
   \   000158   00           DB 0
   \   000159   05           DB 5
   \   00015A   00           DB 0
   \   00015B   64           DB 100
   \   00015C   00           DB 0
   \   00015D   20           DB 32
   \   00015E   00           DB 0
   \   00015F   00           DB 0
   \   000160   00           DB 0
   \   000161   00           DB 0
   \   000162   00           DB 0
   \   000163   00           DB 0
   \   000164   00           DB 0
   \   000165   00           DB 0
   \   000166   00           DB 0
   \   000167   00           DB 0
   \   000168   00           DB 0
   \   000169   00           DB 0
   \   00016A   40           DB 64
   \   00016B   00           DB 0
   \   00016C   00           DB 0
   \   00016D   00           DB 0
   \   00016E   03           DB 3
   \   00016F   00           DB 0
   \   000170   00           DB 0
   \   000171   00           DB 0
   \   000172   00           DB 0
   \   000173   32           DB 50
   \   000174   F8           DB 248
   \   000175   98           DB 152
   \   000176   00           DB 0
   \   000177   00           DB 0
   \   000178   FF           DB 255
   \   000179   65           DB 101
   \   00017A   00           DB 0
   \   00017B   00           DB 0
   \   00017C   83           DB 131
   \   00017D   0F           DB 15
   \   00017E   00           DB 0
   \   00017F   00           DB 0
   \   000180   FF           DB 255
   \   000181   9B           DB 155
   \   000182   FC           DB 252
   \   000183   00           DB 0
   \   000184   00           DB 0
   \   000185   00           DB 0
   \   000186   00           DB 0
   \   000187   00           DB 0
   \   000188   00           DB 0
   \   000189   00           DB 0
   \   00018A   00           DB 0
   \   00018B   00           DB 0
   \   00018C   00           DB 0
   \   00018D   00           DB 0
   \   00018E   00           DB 0
   \   00018F   00           DB 0
   \   000190   00           DB 0
   \   000191   00           DB 0
   \   000192   00           DB 0
   \   000193   00           DB 0
   \   000194   00           DB 0
   \   000195   00           DB 0
   \   000196   00           DB 0
   \   000197   00           DB 0
   \   000198   00           DB 0
   \   000199   00           DB 0
   \   00019A   00           DB 0
   \   00019B   00           DB 0
   \   00019C   00           DB 0
   \   00019D   00           DB 0
   \   00019E   00           DB 0
   \   00019F   00           DB 0
   \   0001A0   00           DB 0
   \   0001A1   00           DB 0
   \   0001A2   00           DB 0
   \   0001A3   00           DB 0
   \   0001A4   00           DB 0
   \   0001A5   00           DB 0
   \   0001A6   00           DB 0
   \   0001A7   00           DB 0
   \   0001A8   00           DB 0
   \   0001A9   00           DB 0
   \   0001AA   00           DB 0
   \   0001AB   00           DB 0
   \   0001AC   00           DB 0
   \   0001AD   00           DB 0
   \   0001AE   10           DB 16
   \   0001AF   00           DB 0
   \   0001B0   40           DB 64
   \   0001B1   00           DB 0
   \   0001B2   00           DB 0
   \   0001B3   00           DB 0
   \   0001B4   00           DB 0
   \   0001B5   00           DB 0
   \   0001B6   00           DB 0
   \   0001B7   06           DB 6
   \   0001B8   00           DB 0
   \   0001B9   00           DB 0
   \   0001BA   B2           DB 178
   \   0001BB   6A           DB 106
   \   0001BC   00           DB 0
   \   0001BD   02           DB 2
   \   0001BE   00           DB 0
   \   0001BF   00           DB 0
   \   0001C0   00           DB 0
   \   0001C1   01           DB 1
   \   0001C2   FB           DB 251
   \   0001C3   83           DB 131
   \   0001C4   00           DB 0
   \   0001C5   68           DB 104
   \   0001C6   00           DB 0
   \   0001C7   00           DB 0
   \   0001C8   00           DB 0
   \   0001C9   D9           DB 217
   \   0001CA   FC           DB 252
   \   0001CB   00           DB 0
   \   0001CC   7C           DB 124
   \   0001CD   F1           DB 241
   \   0001CE   FF           DB 255
   \   0001CF   83           DB 131
   \   0001D0   00           DB 0
   \   0001D1   00           DB 0
   \   0001D2   00           DB 0
   \   0001D3   00           DB 0
   \   0001D4   00           DB 0
   \   0001D5   65           DB 101
   \   0001D6   00           DB 0
   \   0001D7   00           DB 0
   \   0001D8   00           DB 0
   \   0001D9   64           DB 100
   \   0001DA   03           DB 3
   \   0001DB   E8           DB 232
   \   0001DC   00           DB 0
   \   0001DD   64           DB 100
   \   0001DE   00           DB 0
   \   0001DF   28           DB 40
   \   0001E0   00           DB 0
   \   0001E1   00           DB 0
   \   0001E2   00           DB 0
   \   0001E3   25           DB 37
   \   0001E4   00           DB 0
   \   0001E5   00           DB 0
   \   0001E6   00           DB 0
   \   0001E7   00           DB 0
   \   0001E8   16           DB 22
   \   0001E9   A0           DB 160
   \   0001EA   00           DB 0
   \   0001EB   00           DB 0
   \   0001EC   00           DB 0
   \   0001ED   00           DB 0
   \   0001EE   10           DB 16
   \   0001EF   00           DB 0
   \   0001F0   00           DB 0
   \   0001F1   00           DB 0
   \   0001F2   10           DB 16
   \   0001F3   00           DB 0
   \   0001F4   00           DB 0
   \   0001F5   2F           DB 47
   \   0001F6   00           DB 0
   \   0001F7   00           DB 0
   \   0001F8   00           DB 0
   \   0001F9   00           DB 0
   \   0001FA   01           DB 1
   \   0001FB   F4           DB 244
   \   0001FC   00           DB 0
   \   0001FD   00           DB 0
   \   0001FE   10           DB 16
   \   0001FF   00           DB 0
   \   000200   00           DB 0
   \   000201   28           DB 40
   \   000202   00           DB 0
   \   000203   00           DB 0
   \   000204   FF           DB 255
   \   000205   FF           DB 255
   \   000206   45           DB 69
   \   000207   81           DB 129
   \   000208   FF           DB 255
   \   000209   FF           DB 255
   \   00020A   FA           DB 250
   \   00020B   72           DB 114
   \   00020C   00           DB 0
   \   00020D   00           DB 0
   \   00020E   00           DB 0
   \   00020F   00           DB 0
   \   000210   00           DB 0
   \   000211   00           DB 0
   \   000212   00           DB 0
   \   000213   00           DB 0
   \   000214   00           DB 0
   \   000215   44           DB 68
   \   000216   00           DB 0
   \   000217   05           DB 5
   \   000218   00           DB 0
   \   000219   05           DB 5
   \   00021A   BA           DB 186
   \   00021B   C6           DB 198
   \   00021C   00           DB 0
   \   00021D   47           DB 71
   \   00021E   78           DB 120
   \   00021F   A2           DB 162
   \   000220   00           DB 0
   \   000221   00           DB 0
   \   000222   00           DB 0
   \   000223   01           DB 1
   \   000224   00           DB 0
   \   000225   00           DB 0
   \   000226   00           DB 0
   \   000227   00           DB 0
   \   000228   00           DB 0
   \   000229   00           DB 0
   \   00022A   06           DB 6
   \   00022B   00           DB 0
   \   00022C   00           DB 0
   \   00022D   00           DB 0
   \   00022E   00           DB 0
   \   00022F   14           DB 20
   \   000230   00           DB 0
   \   000231   00           DB 0
   \   000232   25           DB 37
   \   000233   4D           DB 77
   \   000234   00           DB 0
   \   000235   2F           DB 47
   \   000236   70           DB 112
   \   000237   6D           DB 109
   \   000238   00           DB 0
   \   000239   00           DB 0
   \   00023A   05           DB 5
   \   00023B   AE           DB 174
   \   00023C   00           DB 0
   \   00023D   0C           DB 12
   \   00023E   02           DB 2
   \   00023F   D0           DB 208
   \   000240   00           DB 0
   \   000241   00           DB 0
   \   000242   00           DB 0
   \   000243   00           DB 0
   \   000244   00           DB 0
   \   000245   00           DB 0
   \   000246   00           DB 0
   \   000247   00           DB 0
   \   000248   00           DB 0
   \   000249   00           DB 0
   \   00024A   00           DB 0
   \   00024B   00           DB 0
   \   00024C   00           DB 0
   \   00024D   00           DB 0
   \   00024E   00           DB 0
   \   00024F   00           DB 0
   \   000250   00           DB 0
   \   000251   1B           DB 27
   \   000252   00           DB 0
   \   000253   00           DB 0
   \   000254   00           DB 0
   \   000255   00           DB 0
   \   000256   00           DB 0
   \   000257   00           DB 0
   \   000258   00           DB 0
   \   000259   00           DB 0
   \   00025A   00           DB 0
   \   00025B   00           DB 0
   \   00025C   00           DB 0
   \   00025D   00           DB 0
   \   00025E   00           DB 0
   \   00025F   00           DB 0
   \   000260   00           DB 0
   \   000261   64           DB 100
   \   000262   00           DB 0
   \   000263   00           DB 0
   \   000264   00           DB 0
   \   000265   08           DB 8
   \   000266   00           DB 0
   \   000267   00           DB 0
   \   000268   00           DB 0
   \   000269   00           DB 0
   \   00026A   00           DB 0
   \   00026B   00           DB 0
   \   00026C   00           DB 0
   \   00026D   00           DB 0
   \   00026E   00           DB 0
   \   00026F   00           DB 0
   \   000270   00           DB 0
   \   000271   00           DB 0
   \   000272   00           DB 0
   \   000273   00           DB 0
   \   000274   00           DB 0
   \   000275   00           DB 0
   \   000276   00           DB 0
   \   000277   00           DB 0
   \   000278   00           DB 0
   \   000279   00           DB 0
   \   00027A   00           DB 0
   \   00027B   00           DB 0
   \   00027C   00           DB 0
   \   00027D   00           DB 0
   \   00027E   00           DB 0
   \   00027F   00           DB 0
   \   000280   00           DB 0
   \   000281   00           DB 0
   \   000282   00           DB 0
   \   000283   00           DB 0
   \   000284   00           DB 0
   \   000285   00           DB 0
   \   000286   00           DB 0
   \   000287   00           DB 0
   \   000288   00           DB 0
   \   000289   00           DB 0
   \   00028A   00           DB 0
   \   00028B   00           DB 0
   \   00028C   00           DB 0
   \   00028D   00           DB 0
   \   00028E   00           DB 0
   \   00028F   00           DB 0
   \   000290   00           DB 0
   \   000291   00           DB 0
   \   000292   00           DB 0
   \   000293   00           DB 0
   \   000294   00           DB 0
   \   000295   00           DB 0
   \   000296   00           DB 0
   \   000297   00           DB 0
   \   000298   00           DB 0
   \   000299   00           DB 0
   \   00029A   00           DB 0
   \   00029B   00           DB 0
   \   00029C   00           DB 0
   \   00029D   00           DB 0
   \   00029E   00           DB 0
   \   00029F   00           DB 0
   \   0002A0   00           DB 0
   \   0002A1   00           DB 0
   \   0002A2   00           DB 0
   \   0002A3   00           DB 0
   \   0002A4   00           DB 0
   \   0002A5   00           DB 0
   \   0002A6   00           DB 0
   \   0002A7   00           DB 0
   \   0002A8   00           DB 0
   \   0002A9   00           DB 0
   \   0002AA   00           DB 0
   \   0002AB   00           DB 0
   \   0002AC   00           DB 0
   \   0002AD   00           DB 0
   \   0002AE   00           DB 0
   \   0002AF   00           DB 0
   \   0002B0   00           DB 0
   \   0002B1   00           DB 0
   \   0002B2   00           DB 0
   \   0002B3   00           DB 0
   \   0002B4   00           DB 0
   \   0002B5   00           DB 0
   \   0002B6   00           DB 0
   \   0002B7   00           DB 0
   \   0002B8   00           DB 0
   \   0002B9   00           DB 0
   \   0002BA   00           DB 0
   \   0002BB   00           DB 0
   \   0002BC   00           DB 0
   \   0002BD   00           DB 0
   \   0002BE   00           DB 0
   \   0002BF   00           DB 0
   \   0002C0   00           DB 0
   \   0002C1   1B           DB 27
   \   0002C2   00           DB 0
   \   0002C3   00           DB 0
   \   0002C4   00           DB 0
   \   0002C5   00           DB 0
   \   0002C6   00           DB 0
   \   0002C7   00           DB 0
   \   0002C8   00           DB 0
   \   0002C9   00           DB 0
   \   0002CA   00           DB 0
   \   0002CB   00           DB 0
   \   0002CC   00           DB 0
   \   0002CD   0E           DB 14
   \   0002CE   00           DB 0
   \   0002CF   0E           DB 14
   \   0002D0   00           DB 0
   \   0002D1   00           DB 0
   \   0002D2   0A           DB 10
   \   0002D3   C7           DB 199
   \   0002D4   00           DB 0
   \   0002D5   04           DB 4
   \   0002D6   00           DB 0
   \   0002D7   00           DB 0
   \   0002D8   00           DB 0
   \   0002D9   00           DB 0
   \   0002DA   00           DB 0
   \   0002DB   32           DB 50
   \   0002DC   FF           DB 255
   \   0002DD   FF           DB 255
   \   0002DE   FF           DB 255
   \   0002DF   9C           DB 156
   \   0002E0   00           DB 0
   \   0002E1   00           DB 0
   \   0002E2   0B           DB 11
   \   0002E3   2B           DB 43
   \   0002E4   00           DB 0
   \   0002E5   00           DB 0
   \   0002E6   00           DB 0
   \   0002E7   02           DB 2
   \   0002E8   00           DB 0
   \   0002E9   00           DB 0
   \   0002EA   00           DB 0
   \   0002EB   01           DB 1
   \   0002EC   00           DB 0
   \   0002ED   00           DB 0
   \   0002EE   00           DB 0
   \   0002EF   64           DB 100
   \   0002F0   FF           DB 255
   \   0002F1   E5           DB 229
   \   0002F2   00           DB 0
   \   0002F3   00           DB 0
   \   0002F4   00           DB 0
   \   0002F5   00           DB 0
   \   0002F6   00           DB 0
   \   0002F7   00           DB 0
   \   0002F8   00           DB 0
   \   0002F9   00           DB 0
   \   0002FA   00           DB 0
   \   0002FB   00           DB 0
   \   0002FC   00           DB 0
   \   0002FD   00           DB 0
   \   0002FE   00           DB 0
   \   0002FF   00           DB 0
   \   000300   00           DB 0
   \   000301   00           DB 0
   \   000302   00           DB 0
   \   000303   01           DB 1
   \   000304   00           DB 0
   \   000305   00           DB 0
   \   000306   00           DB 0
   \   000307   00           DB 0
   \   000308   00           DB 0
   \   000309   01           DB 1
   \   00030A   00           DB 0
   \   00030B   00           DB 0
   \   00030C   00           DB 0
   \   00030D   00           DB 0
   \   00030E   00           DB 0
   \   00030F   00           DB 0
   \   000310   00           DB 0
   \   000311   01           DB 1
   \   000312   80           DB 128
   \   000313   00           DB 0
   \   000314   00           DB 0
   \   000315   01           DB 1
   \   000316   80           DB 128
   \   000317   00           DB 0
   \   000318   00           DB 0
   \   000319   01           DB 1
   \   00031A   80           DB 128
   \   00031B   00           DB 0
   \   00031C   00           DB 0
   \   00031D   24           DB 36
   \   00031E   26           DB 38
   \   00031F   D3           DB 211
   \   000320   00           DB 0
   \   000321   00           DB 0
   \   000322   00           DB 0
   \   000323   00           DB 0
   \   000324   00           DB 0
   \   000325   00           DB 0
   \   000326   00           DB 0
   \   000327   00           DB 0
   \   000328   00           DB 0
   \   000329   06           DB 6
   \   00032A   00           DB 0
   \   00032B   10           DB 16
   \   00032C   00           DB 0
   \   00032D   96           DB 150
   \   00032E   00           DB 0
   \   00032F   3C           DB 60
   \   000330   00           DB 0
   \   000331   00           DB 0
   \   000332   00           DB 0
   \   000333   00           DB 0
   \   000334   00           DB 0
   \   000335   00           DB 0
   \   000336   00           DB 0
   \   000337   00           DB 0
   \   000338   00           DB 0
   \   000339   00           DB 0
   \   00033A   00           DB 0
   \   00033B   00           DB 0
   \   00033C   00           DB 0
   \   00033D   00           DB 0
   \   00033E   00           DB 0
   \   00033F   00           DB 0
   \   000340   0C           DB 12
   \   000341   0A           DB 10
   \   000342   4E           DB 78
   \   000343   68           DB 104
   \   000344   CD           DB 205
   \   000345   CF           DB 207
   \   000346   77           DB 119
   \   000347   09           DB 9
   \   000348   50           DB 80
   \   000349   16           DB 22
   \   00034A   67           DB 103
   \   00034B   59           DB 89
   \   00034C   C6           DB 198
   \   00034D   19           DB 25
   \   00034E   CE           DB 206
   \   00034F   82           DB 130
   \   000350   00           DB 0
   \   000351   00           DB 0
   \   000352   00           DB 0
   \   000353   00           DB 0
   \   000354   00           DB 0
   \   000355   00           DB 0
   \   000356   00           DB 0
   \   000357   00           DB 0
   \   000358   00           DB 0
   \   000359   00           DB 0
   \   00035A   00           DB 0
   \   00035B   00           DB 0
   \   00035C   00           DB 0
   \   00035D   00           DB 0
   \   00035E   00           DB 0
   \   00035F   00           DB 0
   \   000360   00           DB 0
   \   000361   00           DB 0
   \   000362   00           DB 0
   \   000363   00           DB 0
   \   000364   00           DB 0
   \   000365   00           DB 0
   \   000366   00           DB 0
   \   000367   00           DB 0
   \   000368   17           DB 23
   \   000369   D7           DB 215
   \   00036A   84           DB 132
   \   00036B   00           DB 0
   \   00036C   03           DB 3
   \   00036D   00           DB 0
   \   00036E   00           DB 0
   \   00036F   00           DB 0
   \   000370   00           DB 0
   \   000371   00           DB 0
   \   000372   00           DB 0
   \   000373   00           DB 0
   \   000374   00           DB 0
   \   000375   00           DB 0
   \   000376   00           DB 0
   \   000377   00           DB 0
   \   000378   C7           DB 199
   \   000379   93           DB 147
   \   00037A   8F           DB 143
   \   00037B   9D           DB 157
   \   00037C   1E           DB 30
   \   00037D   1B           DB 27
   \   00037E   1C           DB 28
   \   00037F   19           DB 25
   \   000380   00           DB 0
   \   000381   00           DB 0
   \   000382   00           DB 0
   \   000383   00           DB 0
   \   000384   00           DB 0
   \   000385   00           DB 0
   \   000386   00           DB 0
   \   000387   00           DB 0
   \   000388   00           DB 0
   \   000389   00           DB 0
   \   00038A   00           DB 0
   \   00038B   00           DB 0
   \   00038C   00           DB 0
   \   00038D   00           DB 0
   \   00038E   00           DB 0
   \   00038F   00           DB 0
   \   000390   00           DB 0
   \   000391   00           DB 0
   \   000392   00           DB 0
   \   000393   00           DB 0
   \   000394   00           DB 0
   \   000395   00           DB 0
   \   000396   00           DB 0
   \   000397   00           DB 0
   \   000398   02           DB 2
   \   000399   03           DB 3
   \   00039A   18           DB 24
   \   00039B   85           DB 133
   \   00039C   00           DB 0
   \   00039D   00           DB 0
   \   00039E   40           DB 64
   \   00039F   00           DB 0
   \   0003A0   00           DB 0
   \   0003A1   00           DB 0
   \   0003A2   00           DB 0
   \   0003A3   03           DB 3
   \   0003A4   00           DB 0
   \   0003A5   00           DB 0
   \   0003A6   00           DB 0
   \   0003A7   03           DB 3
   \   0003A8   00           DB 0
   \   0003A9   00           DB 0
   \   0003AA   00           DB 0
   \   0003AB   00           DB 0
   \   0003AC   00           DB 0
   \   0003AD   00           DB 0
   \   0003AE   00           DB 0
   \   0003AF   00           DB 0
   \   0003B0   40           DB 64
   \   0003B1   00           DB 0
   \   0003B2   00           DB 0
   \   0003B3   00           DB 0
   \   0003B4   00           DB 0
   \   0003B5   00           DB 0
   \   0003B6   00           DB 0
   \   0003B7   00           DB 0
   \   0003B8   00           DB 0
   \   0003B9   00           DB 0
   \   0003BA   00           DB 0
   \   0003BB   00           DB 0
   \   0003BC   00           DB 0
   \   0003BD   00           DB 0
   \   0003BE   00           DB 0
   \   0003BF   00           DB 0
   \   0003C0   00           DB 0
   \   0003C1   00           DB 0
   \   0003C2   00           DB 0
   \   0003C3   00           DB 0
   \   0003C4   00           DB 0
   \   0003C5   00           DB 0
   \   0003C6   00           DB 0
   \   0003C7   00           DB 0
   \   0003C8   00           DB 0
   \   0003C9   00           DB 0
   \   0003CA   00           DB 0
   \   0003CB   00           DB 0
   \   0003CC   00           DB 0
   \   0003CD   00           DB 0
   \   0003CE   00           DB 0
   \   0003CF   00           DB 0
   \   0003D0   00           DB 0
   \   0003D1   00           DB 0
   \   0003D2   00           DB 0
   \   0003D3   00           DB 0
   \   0003D4   00           DB 0
   \   0003D5   00           DB 0
   \   0003D6   00           DB 0
   \   0003D7   00           DB 0
   \   0003D8   00           DB 0
   \   0003D9   00           DB 0
   \   0003DA   00           DB 0
   \   0003DB   00           DB 0
   \   0003DC   00           DB 0
   \   0003DD   00           DB 0
   \   0003DE   00           DB 0
   \   0003DF   00           DB 0
   \   0003E0   00           DB 0
   \   0003E1   00           DB 0
   \   0003E2   00           DB 0
   \   0003E3   00           DB 0
   \   0003E4   67           DB 103
   \   0003E5   7D           DB 125
   \   0003E6   DF           DB 223
   \   0003E7   7E           DB 126
   \   0003E8   72           DB 114
   \   0003E9   90           DB 144
   \   0003EA   2E           DB 46
   \   0003EB   55           DB 85
   \   0003EC   4C           DB 76
   \   0003ED   F6           DB 246
   \   0003EE   E6           DB 230
   \   0003EF   88           DB 136
   \   0003F0   00           DB 0
   \   0003F1   00           DB 0
   \   0003F2   00           DB 0
   \   0003F3   00           DB 0
   \   0003F4   00           DB 0
   \   0003F5   00           DB 0
   \   0003F6   00           DB 0
   \   0003F7   00           DB 0
   \   0003F8   00           DB 0
   \   0003F9   00           DB 0
   \   0003FA   00           DB 0
   \   0003FB   00           DB 0
   \   0003FC   00           DB 0
   \   0003FD   00           DB 0
   \   0003FE   00           DB 0
   \   0003FF   00           DB 0
   \   000400   D8           DB 216
   \   000401   DC           DB 220
   \   000402   B4           DB 180
   \   000403   B8           DB 184
   \   000404   B0           DB 176
   \   000405   D8           DB 216
   \   000406   B9           DB 185
   \   000407   AB           DB 171
   \   000408   F3           DB 243
   \   000409   F8           DB 248
   \   00040A   FA           DB 250
   \   00040B   B3           DB 179
   \   00040C   B7           DB 183
   \   00040D   BB           DB 187
   \   00040E   8E           DB 142
   \   00040F   9E           DB 158
   \   000410   AE           DB 174
   \   000411   F1           DB 241
   \   000412   32           DB 50
   \   000413   F5           DB 245
   \   000414   1B           DB 27
   \   000415   F1           DB 241
   \   000416   B4           DB 180
   \   000417   B8           DB 184
   \   000418   B0           DB 176
   \   000419   80           DB 128
   \   00041A   97           DB 151
   \   00041B   F1           DB 241
   \   00041C   A9           DB 169
   \   00041D   DF           DB 223
   \   00041E   DF           DB 223
   \   00041F   DF           DB 223
   \   000420   AA           DB 170
   \   000421   DF           DB 223
   \   000422   DF           DB 223
   \   000423   DF           DB 223
   \   000424   F2           DB 242
   \   000425   AA           DB 170
   \   000426   C5           DB 197
   \   000427   CD           DB 205
   \   000428   C7           DB 199
   \   000429   A9           DB 169
   \   00042A   0C           DB 12
   \   00042B   C9           DB 201
   \   00042C   2C           DB 44
   \   00042D   97           DB 151
   \   00042E   F1           DB 241
   \   00042F   A9           DB 169
   \   000430   89           DB 137
   \   000431   26           DB 38
   \   000432   46           DB 70
   \   000433   66           DB 102
   \   000434   B2           DB 178
   \   000435   89           DB 137
   \   000436   99           DB 153
   \   000437   A9           DB 169
   \   000438   2D           DB 45
   \   000439   55           DB 85
   \   00043A   7D           DB 125
   \   00043B   B0           DB 176
   \   00043C   B0           DB 176
   \   00043D   8A           DB 138
   \   00043E   A8           DB 168
   \   00043F   96           DB 150
   \   000440   36           DB 54
   \   000441   56           DB 86
   \   000442   76           DB 118
   \   000443   F1           DB 241
   \   000444   BA           DB 186
   \   000445   A3           DB 163
   \   000446   B4           DB 180
   \   000447   B2           DB 178
   \   000448   80           DB 128
   \   000449   C0           DB 192
   \   00044A   B8           DB 184
   \   00044B   A8           DB 168
   \   00044C   97           DB 151
   \   00044D   11           DB 17
   \   00044E   B2           DB 178
   \   00044F   83           DB 131
   \   000450   98           DB 152
   \   000451   BA           DB 186
   \   000452   A3           DB 163
   \   000453   F0           DB 240
   \   000454   24           DB 36
   \   000455   08           DB 8
   \   000456   44           DB 68
   \   000457   10           DB 16
   \   000458   64           DB 100
   \   000459   18           DB 24
   \   00045A   B2           DB 178
   \   00045B   B9           DB 185
   \   00045C   B4           DB 180
   \   00045D   98           DB 152
   \   00045E   83           DB 131
   \   00045F   F1           DB 241
   \   000460   A3           DB 163
   \   000461   29           DB 41
   \   000462   55           DB 85
   \   000463   7D           DB 125
   \   000464   BA           DB 186
   \   000465   B5           DB 181
   \   000466   B1           DB 177
   \   000467   A3           DB 163
   \   000468   83           DB 131
   \   000469   93           DB 147
   \   00046A   F0           DB 240
   \   00046B   00           DB 0
   \   00046C   28           DB 40
   \   00046D   50           DB 80
   \   00046E   F5           DB 245
   \   00046F   B2           DB 178
   \   000470   B6           DB 182
   \   000471   AA           DB 170
   \   000472   83           DB 131
   \   000473   93           DB 147
   \   000474   28           DB 40
   \   000475   54           DB 84
   \   000476   7C           DB 124
   \   000477   F1           DB 241
   \   000478   B9           DB 185
   \   000479   A3           DB 163
   \   00047A   82           DB 130
   \   00047B   93           DB 147
   \   00047C   61           DB 97
   \   00047D   BA           DB 186
   \   00047E   A2           DB 162
   \   00047F   DA           DB 218
   \   000480   DE           DB 222
   \   000481   DF           DB 223
   \   000482   DB           DB 219
   \   000483   81           DB 129
   \   000484   9A           DB 154
   \   000485   B9           DB 185
   \   000486   AE           DB 174
   \   000487   F5           DB 245
   \   000488   60           DB 96
   \   000489   68           DB 104
   \   00048A   70           DB 112
   \   00048B   F1           DB 241
   \   00048C   DA           DB 218
   \   00048D   BA           DB 186
   \   00048E   A2           DB 162
   \   00048F   DF           DB 223
   \   000490   D9           DB 217
   \   000491   BA           DB 186
   \   000492   A2           DB 162
   \   000493   FA           DB 250
   \   000494   B9           DB 185
   \   000495   A3           DB 163
   \   000496   82           DB 130
   \   000497   92           DB 146
   \   000498   DB           DB 219
   \   000499   31           DB 49
   \   00049A   BA           DB 186
   \   00049B   A2           DB 162
   \   00049C   D9           DB 217
   \   00049D   BA           DB 186
   \   00049E   A2           DB 162
   \   00049F   F8           DB 248
   \   0004A0   DF           DB 223
   \   0004A1   85           DB 133
   \   0004A2   A4           DB 164
   \   0004A3   D0           DB 208
   \   0004A4   C1           DB 193
   \   0004A5   BB           DB 187
   \   0004A6   AD           DB 173
   \   0004A7   83           DB 131
   \   0004A8   C2           DB 194
   \   0004A9   C5           DB 197
   \   0004AA   C7           DB 199
   \   0004AB   B8           DB 184
   \   0004AC   A2           DB 162
   \   0004AD   DF           DB 223
   \   0004AE   DF           DB 223
   \   0004AF   DF           DB 223
   \   0004B0   BA           DB 186
   \   0004B1   A0           DB 160
   \   0004B2   DF           DB 223
   \   0004B3   DF           DB 223
   \   0004B4   DF           DB 223
   \   0004B5   D8           DB 216
   \   0004B6   D8           DB 216
   \   0004B7   F1           DB 241
   \   0004B8   B8           DB 184
   \   0004B9   AA           DB 170
   \   0004BA   B3           DB 179
   \   0004BB   8D           DB 141
   \   0004BC   B4           DB 180
   \   0004BD   98           DB 152
   \   0004BE   0D           DB 13
   \   0004BF   35           DB 53
   \   0004C0   5D           DB 93
   \   0004C1   B2           DB 178
   \   0004C2   B6           DB 182
   \   0004C3   BA           DB 186
   \   0004C4   AF           DB 175
   \   0004C5   8C           DB 140
   \   0004C6   96           DB 150
   \   0004C7   19           DB 25
   \   0004C8   8F           DB 143
   \   0004C9   9F           DB 159
   \   0004CA   A7           DB 167
   \   0004CB   0E           DB 14
   \   0004CC   16           DB 22
   \   0004CD   1E           DB 30
   \   0004CE   B4           DB 180
   \   0004CF   9A           DB 154
   \   0004D0   B8           DB 184
   \   0004D1   AA           DB 170
   \   0004D2   87           DB 135
   \   0004D3   2C           DB 44
   \   0004D4   54           DB 84
   \   0004D5   7C           DB 124
   \   0004D6   BA           DB 186
   \   0004D7   A4           DB 164
   \   0004D8   B0           DB 176
   \   0004D9   8A           DB 138
   \   0004DA   B6           DB 182
   \   0004DB   91           DB 145
   \   0004DC   32           DB 50
   \   0004DD   56           DB 86
   \   0004DE   76           DB 118
   \   0004DF   B2           DB 178
   \   0004E0   84           DB 132
   \   0004E1   94           DB 148
   \   0004E2   A4           DB 164
   \   0004E3   C8           DB 200
   \   0004E4   08           DB 8
   \   0004E5   CD           DB 205
   \   0004E6   D8           DB 216
   \   0004E7   B8           DB 184
   \   0004E8   B4           DB 180
   \   0004E9   B0           DB 176
   \   0004EA   F1           DB 241
   \   0004EB   99           DB 153
   \   0004EC   82           DB 130
   \   0004ED   A8           DB 168
   \   0004EE   2D           DB 45
   \   0004EF   55           DB 85
   \   0004F0   7D           DB 125
   \   0004F1   98           DB 152
   \   0004F2   A8           DB 168
   \   0004F3   0E           DB 14
   \   0004F4   16           DB 22
   \   0004F5   1E           DB 30
   \   0004F6   A2           DB 162
   \   0004F7   2C           DB 44
   \   0004F8   54           DB 84
   \   0004F9   7C           DB 124
   \   0004FA   92           DB 146
   \   0004FB   A4           DB 164
   \   0004FC   F0           DB 240
   \   0004FD   2C           DB 44
   \   0004FE   50           DB 80
   \   0004FF   78           DB 120
   \   000500   F1           DB 241
   \   000501   84           DB 132
   \   000502   A8           DB 168
   \   000503   98           DB 152
   \   000504   C4           DB 196
   \   000505   CD           DB 205
   \   000506   FC           DB 252
   \   000507   D8           DB 216
   \   000508   0D           DB 13
   \   000509   DB           DB 219
   \   00050A   A8           DB 168
   \   00050B   FC           DB 252
   \   00050C   2D           DB 45
   \   00050D   F3           DB 243
   \   00050E   D9           DB 217
   \   00050F   BA           DB 186
   \   000510   A6           DB 166
   \   000511   F8           DB 248
   \   000512   DA           DB 218
   \   000513   BA           DB 186
   \   000514   A6           DB 166
   \   000515   DE           DB 222
   \   000516   D8           DB 216
   \   000517   BA           DB 186
   \   000518   B2           DB 178
   \   000519   B6           DB 182
   \   00051A   86           DB 134
   \   00051B   96           DB 150
   \   00051C   A6           DB 166
   \   00051D   D0           DB 208
   \   00051E   F3           DB 243
   \   00051F   C8           DB 200
   \   000520   41           DB 65
   \   000521   DA           DB 218
   \   000522   A6           DB 166
   \   000523   C8           DB 200
   \   000524   F8           DB 248
   \   000525   D8           DB 216
   \   000526   B0           DB 176
   \   000527   B4           DB 180
   \   000528   B8           DB 184
   \   000529   82           DB 130
   \   00052A   A8           DB 168
   \   00052B   92           DB 146
   \   00052C   F5           DB 245
   \   00052D   2C           DB 44
   \   00052E   54           DB 84
   \   00052F   88           DB 136
   \   000530   98           DB 152
   \   000531   F1           DB 241
   \   000532   35           DB 53
   \   000533   D9           DB 217
   \   000534   F4           DB 244
   \   000535   18           DB 24
   \   000536   D8           DB 216
   \   000537   F1           DB 241
   \   000538   A2           DB 162
   \   000539   D0           DB 208
   \   00053A   F8           DB 248
   \   00053B   F9           DB 249
   \   00053C   A8           DB 168
   \   00053D   84           DB 132
   \   00053E   D9           DB 217
   \   00053F   C7           DB 199
   \   000540   DF           DB 223
   \   000541   F8           DB 248
   \   000542   F8           DB 248
   \   000543   83           DB 131
   \   000544   C5           DB 197
   \   000545   DA           DB 218
   \   000546   DF           DB 223
   \   000547   69           DB 105
   \   000548   DF           DB 223
   \   000549   83           DB 131
   \   00054A   C1           DB 193
   \   00054B   D8           DB 216
   \   00054C   F4           DB 244
   \   00054D   01           DB 1
   \   00054E   14           DB 20
   \   00054F   F1           DB 241
   \   000550   A8           DB 168
   \   000551   82           DB 130
   \   000552   4E           DB 78
   \   000553   A8           DB 168
   \   000554   84           DB 132
   \   000555   F3           DB 243
   \   000556   11           DB 17
   \   000557   D1           DB 209
   \   000558   82           DB 130
   \   000559   F5           DB 245
   \   00055A   D9           DB 217
   \   00055B   92           DB 146
   \   00055C   28           DB 40
   \   00055D   97           DB 151
   \   00055E   88           DB 136
   \   00055F   F1           DB 241
   \   000560   09           DB 9
   \   000561   F4           DB 244
   \   000562   1C           DB 28
   \   000563   1C           DB 28
   \   000564   D8           DB 216
   \   000565   84           DB 132
   \   000566   A8           DB 168
   \   000567   F3           DB 243
   \   000568   C0           DB 192
   \   000569   F9           DB 249
   \   00056A   D1           DB 209
   \   00056B   D9           DB 217
   \   00056C   97           DB 151
   \   00056D   82           DB 130
   \   00056E   F1           DB 241
   \   00056F   29           DB 41
   \   000570   F4           DB 244
   \   000571   0D           DB 13
   \   000572   D8           DB 216
   \   000573   F3           DB 243
   \   000574   F9           DB 249
   \   000575   F9           DB 249
   \   000576   D1           DB 209
   \   000577   D9           DB 217
   \   000578   82           DB 130
   \   000579   F4           DB 244
   \   00057A   C2           DB 194
   \   00057B   03           DB 3
   \   00057C   D8           DB 216
   \   00057D   DE           DB 222
   \   00057E   DF           DB 223
   \   00057F   1A           DB 26
   \   000580   D8           DB 216
   \   000581   F1           DB 241
   \   000582   A2           DB 162
   \   000583   FA           DB 250
   \   000584   F9           DB 249
   \   000585   A8           DB 168
   \   000586   84           DB 132
   \   000587   98           DB 152
   \   000588   D9           DB 217
   \   000589   C7           DB 199
   \   00058A   DF           DB 223
   \   00058B   F8           DB 248
   \   00058C   F8           DB 248
   \   00058D   F8           DB 248
   \   00058E   83           DB 131
   \   00058F   C7           DB 199
   \   000590   DA           DB 218
   \   000591   DF           DB 223
   \   000592   69           DB 105
   \   000593   DF           DB 223
   \   000594   F8           DB 248
   \   000595   83           DB 131
   \   000596   C3           DB 195
   \   000597   D8           DB 216
   \   000598   F4           DB 244
   \   000599   01           DB 1
   \   00059A   14           DB 20
   \   00059B   F1           DB 241
   \   00059C   98           DB 152
   \   00059D   A8           DB 168
   \   00059E   82           DB 130
   \   00059F   2E           DB 46
   \   0005A0   A8           DB 168
   \   0005A1   84           DB 132
   \   0005A2   F3           DB 243
   \   0005A3   11           DB 17
   \   0005A4   D1           DB 209
   \   0005A5   82           DB 130
   \   0005A6   F5           DB 245
   \   0005A7   D9           DB 217
   \   0005A8   92           DB 146
   \   0005A9   50           DB 80
   \   0005AA   97           DB 151
   \   0005AB   88           DB 136
   \   0005AC   F1           DB 241
   \   0005AD   09           DB 9
   \   0005AE   F4           DB 244
   \   0005AF   1C           DB 28
   \   0005B0   D8           DB 216
   \   0005B1   84           DB 132
   \   0005B2   A8           DB 168
   \   0005B3   F3           DB 243
   \   0005B4   C0           DB 192
   \   0005B5   F8           DB 248
   \   0005B6   F9           DB 249
   \   0005B7   D1           DB 209
   \   0005B8   D9           DB 217
   \   0005B9   97           DB 151
   \   0005BA   82           DB 130
   \   0005BB   F1           DB 241
   \   0005BC   49           DB 73
   \   0005BD   F4           DB 244
   \   0005BE   0D           DB 13
   \   0005BF   D8           DB 216
   \   0005C0   F3           DB 243
   \   0005C1   F9           DB 249
   \   0005C2   F9           DB 249
   \   0005C3   D1           DB 209
   \   0005C4   D9           DB 217
   \   0005C5   82           DB 130
   \   0005C6   F4           DB 244
   \   0005C7   C4           DB 196
   \   0005C8   03           DB 3
   \   0005C9   D8           DB 216
   \   0005CA   DE           DB 222
   \   0005CB   DF           DB 223
   \   0005CC   D8           DB 216
   \   0005CD   F1           DB 241
   \   0005CE   AD           DB 173
   \   0005CF   88           DB 136
   \   0005D0   98           DB 152
   \   0005D1   CC           DB 204
   \   0005D2   A8           DB 168
   \   0005D3   09           DB 9
   \   0005D4   F9           DB 249
   \   0005D5   D9           DB 217
   \   0005D6   82           DB 130
   \   0005D7   92           DB 146
   \   0005D8   A8           DB 168
   \   0005D9   F5           DB 245
   \   0005DA   7C           DB 124
   \   0005DB   F1           DB 241
   \   0005DC   88           DB 136
   \   0005DD   3A           DB 58
   \   0005DE   CF           DB 207
   \   0005DF   94           DB 148
   \   0005E0   4A           DB 74
   \   0005E1   6E           DB 110
   \   0005E2   98           DB 152
   \   0005E3   DB           DB 219
   \   0005E4   69           DB 105
   \   0005E5   31           DB 49
   \   0005E6   DA           DB 218
   \   0005E7   AD           DB 173
   \   0005E8   F2           DB 242
   \   0005E9   DE           DB 222
   \   0005EA   F9           DB 249
   \   0005EB   D8           DB 216
   \   0005EC   87           DB 135
   \   0005ED   95           DB 149
   \   0005EE   A8           DB 168
   \   0005EF   F2           DB 242
   \   0005F0   21           DB 33
   \   0005F1   D1           DB 209
   \   0005F2   DA           DB 218
   \   0005F3   A5           DB 165
   \   0005F4   F9           DB 249
   \   0005F5   F4           DB 244
   \   0005F6   17           DB 23
   \   0005F7   D9           DB 217
   \   0005F8   F1           DB 241
   \   0005F9   AE           DB 174
   \   0005FA   8E           DB 142
   \   0005FB   D0           DB 208
   \   0005FC   C0           DB 192
   \   0005FD   C3           DB 195
   \   0005FE   AE           DB 174
   \   0005FF   82           DB 130
   \   000600   C6           DB 198
   \   000601   84           DB 132
   \   000602   C3           DB 195
   \   000603   A8           DB 168
   \   000604   85           DB 133
   \   000605   95           DB 149
   \   000606   C8           DB 200
   \   000607   A5           DB 165
   \   000608   88           DB 136
   \   000609   F2           DB 242
   \   00060A   C0           DB 192
   \   00060B   F1           DB 241
   \   00060C   F4           DB 244
   \   00060D   01           DB 1
   \   00060E   0E           DB 14
   \   00060F   F1           DB 241
   \   000610   8E           DB 142
   \   000611   9E           DB 158
   \   000612   A8           DB 168
   \   000613   C6           DB 198
   \   000614   3E           DB 62
   \   000615   56           DB 86
   \   000616   F5           DB 245
   \   000617   54           DB 84
   \   000618   F1           DB 241
   \   000619   88           DB 136
   \   00061A   72           DB 114
   \   00061B   F4           DB 244
   \   00061C   01           DB 1
   \   00061D   15           DB 21
   \   00061E   F1           DB 241
   \   00061F   98           DB 152
   \   000620   45           DB 69
   \   000621   85           DB 133
   \   000622   6E           DB 110
   \   000623   F5           DB 245
   \   000624   8E           DB 142
   \   000625   9E           DB 158
   \   000626   04           DB 4
   \   000627   88           DB 136
   \   000628   F1           DB 241
   \   000629   42           DB 66
   \   00062A   98           DB 152
   \   00062B   5A           DB 90
   \   00062C   8E           DB 142
   \   00062D   9E           DB 158
   \   00062E   06           DB 6
   \   00062F   88           DB 136
   \   000630   69           DB 105
   \   000631   F4           DB 244
   \   000632   01           DB 1
   \   000633   1C           DB 28
   \   000634   F1           DB 241
   \   000635   98           DB 152
   \   000636   1E           DB 30
   \   000637   11           DB 17
   \   000638   08           DB 8
   \   000639   D0           DB 208
   \   00063A   F5           DB 245
   \   00063B   04           DB 4
   \   00063C   F1           DB 241
   \   00063D   1E           DB 30
   \   00063E   97           DB 151
   \   00063F   02           DB 2
   \   000640   02           DB 2
   \   000641   98           DB 152
   \   000642   36           DB 54
   \   000643   25           DB 37
   \   000644   DB           DB 219
   \   000645   F9           DB 249
   \   000646   D9           DB 217
   \   000647   85           DB 133
   \   000648   A5           DB 165
   \   000649   F3           DB 243
   \   00064A   C1           DB 193
   \   00064B   DA           DB 218
   \   00064C   85           DB 133
   \   00064D   A5           DB 165
   \   00064E   F3           DB 243
   \   00064F   DF           DB 223
   \   000650   D8           DB 216
   \   000651   85           DB 133
   \   000652   95           DB 149
   \   000653   A8           DB 168
   \   000654   F3           DB 243
   \   000655   09           DB 9
   \   000656   DA           DB 218
   \   000657   A5           DB 165
   \   000658   FA           DB 250
   \   000659   D8           DB 216
   \   00065A   82           DB 130
   \   00065B   92           DB 146
   \   00065C   A8           DB 168
   \   00065D   F5           DB 245
   \   00065E   78           DB 120
   \   00065F   F1           DB 241
   \   000660   88           DB 136
   \   000661   1A           DB 26
   \   000662   84           DB 132
   \   000663   9F           DB 159
   \   000664   26           DB 38
   \   000665   88           DB 136
   \   000666   98           DB 152
   \   000667   21           DB 33
   \   000668   DA           DB 218
   \   000669   F4           DB 244
   \   00066A   1D           DB 29
   \   00066B   F3           DB 243
   \   00066C   D8           DB 216
   \   00066D   87           DB 135
   \   00066E   9F           DB 159
   \   00066F   39           DB 57
   \   000670   D1           DB 209
   \   000671   AF           DB 175
   \   000672   D9           DB 217
   \   000673   DF           DB 223
   \   000674   DF           DB 223
   \   000675   FB           DB 251
   \   000676   F9           DB 249
   \   000677   F4           DB 244
   \   000678   0C           DB 12
   \   000679   F3           DB 243
   \   00067A   D8           DB 216
   \   00067B   FA           DB 250
   \   00067C   D0           DB 208
   \   00067D   F8           DB 248
   \   00067E   DA           DB 218
   \   00067F   F9           DB 249
   \   000680   F9           DB 249
   \   000681   D0           DB 208
   \   000682   DF           DB 223
   \   000683   D9           DB 217
   \   000684   F9           DB 249
   \   000685   D8           DB 216
   \   000686   F4           DB 244
   \   000687   0B           DB 11
   \   000688   D8           DB 216
   \   000689   F3           DB 243
   \   00068A   87           DB 135
   \   00068B   9F           DB 159
   \   00068C   39           DB 57
   \   00068D   D1           DB 209
   \   00068E   AF           DB 175
   \   00068F   D9           DB 217
   \   000690   DF           DB 223
   \   000691   DF           DB 223
   \   000692   F4           DB 244
   \   000693   1D           DB 29
   \   000694   F3           DB 243
   \   000695   D8           DB 216
   \   000696   FA           DB 250
   \   000697   FC           DB 252
   \   000698   A8           DB 168
   \   000699   69           DB 105
   \   00069A   F9           DB 249
   \   00069B   F9           DB 249
   \   00069C   AF           DB 175
   \   00069D   D0           DB 208
   \   00069E   DA           DB 218
   \   00069F   DE           DB 222
   \   0006A0   FA           DB 250
   \   0006A1   D9           DB 217
   \   0006A2   F8           DB 248
   \   0006A3   8F           DB 143
   \   0006A4   9F           DB 159
   \   0006A5   A8           DB 168
   \   0006A6   F1           DB 241
   \   0006A7   CC           DB 204
   \   0006A8   F3           DB 243
   \   0006A9   98           DB 152
   \   0006AA   DB           DB 219
   \   0006AB   45           DB 69
   \   0006AC   D9           DB 217
   \   0006AD   AF           DB 175
   \   0006AE   DF           DB 223
   \   0006AF   D0           DB 208
   \   0006B0   F8           DB 248
   \   0006B1   D8           DB 216
   \   0006B2   F1           DB 241
   \   0006B3   8F           DB 143
   \   0006B4   9F           DB 159
   \   0006B5   A8           DB 168
   \   0006B6   CA           DB 202
   \   0006B7   F3           DB 243
   \   0006B8   88           DB 136
   \   0006B9   09           DB 9
   \   0006BA   DA           DB 218
   \   0006BB   AF           DB 175
   \   0006BC   8F           DB 143
   \   0006BD   CB           DB 203
   \   0006BE   F8           DB 248
   \   0006BF   D8           DB 216
   \   0006C0   F2           DB 242
   \   0006C1   AD           DB 173
   \   0006C2   97           DB 151
   \   0006C3   8D           DB 141
   \   0006C4   0C           DB 12
   \   0006C5   D9           DB 217
   \   0006C6   A5           DB 165
   \   0006C7   DF           DB 223
   \   0006C8   F9           DB 249
   \   0006C9   BA           DB 186
   \   0006CA   A6           DB 166
   \   0006CB   F3           DB 243
   \   0006CC   FA           DB 250
   \   0006CD   F4           DB 244
   \   0006CE   12           DB 18
   \   0006CF   F2           DB 242
   \   0006D0   D8           DB 216
   \   0006D1   95           DB 149
   \   0006D2   0D           DB 13
   \   0006D3   D1           DB 209
   \   0006D4   D9           DB 217
   \   0006D5   BA           DB 186
   \   0006D6   A6           DB 166
   \   0006D7   F3           DB 243
   \   0006D8   FA           DB 250
   \   0006D9   DA           DB 218
   \   0006DA   A5           DB 165
   \   0006DB   F2           DB 242
   \   0006DC   C1           DB 193
   \   0006DD   BA           DB 186
   \   0006DE   A6           DB 166
   \   0006DF   F3           DB 243
   \   0006E0   DF           DB 223
   \   0006E1   D8           DB 216
   \   0006E2   F1           DB 241
   \   0006E3   BA           DB 186
   \   0006E4   B2           DB 178
   \   0006E5   B6           DB 182
   \   0006E6   86           DB 134
   \   0006E7   96           DB 150
   \   0006E8   A6           DB 166
   \   0006E9   D0           DB 208
   \   0006EA   CA           DB 202
   \   0006EB   F3           DB 243
   \   0006EC   49           DB 73
   \   0006ED   DA           DB 218
   \   0006EE   A6           DB 166
   \   0006EF   CB           DB 203
   \   0006F0   F8           DB 248
   \   0006F1   D8           DB 216
   \   0006F2   B0           DB 176
   \   0006F3   B4           DB 180
   \   0006F4   B8           DB 184
   \   0006F5   D8           DB 216
   \   0006F6   AD           DB 173
   \   0006F7   84           DB 132
   \   0006F8   F2           DB 242
   \   0006F9   C0           DB 192
   \   0006FA   DF           DB 223
   \   0006FB   F1           DB 241
   \   0006FC   8F           DB 143
   \   0006FD   CB           DB 203
   \   0006FE   C3           DB 195
   \   0006FF   A8           DB 168
   \   000700   B2           DB 178
   \   000701   B6           DB 182
   \   000702   86           DB 134
   \   000703   96           DB 150
   \   000704   C8           DB 200
   \   000705   C1           DB 193
   \   000706   CB           DB 203
   \   000707   C3           DB 195
   \   000708   F3           DB 243
   \   000709   B0           DB 176
   \   00070A   B4           DB 180
   \   00070B   88           DB 136
   \   00070C   98           DB 152
   \   00070D   A8           DB 168
   \   00070E   21           DB 33
   \   00070F   DB           DB 219
   \   000710   71           DB 113
   \   000711   8D           DB 141
   \   000712   9D           DB 157
   \   000713   71           DB 113
   \   000714   85           DB 133
   \   000715   95           DB 149
   \   000716   21           DB 33
   \   000717   D9           DB 217
   \   000718   AD           DB 173
   \   000719   F2           DB 242
   \   00071A   FA           DB 250
   \   00071B   D8           DB 216
   \   00071C   85           DB 133
   \   00071D   97           DB 151
   \   00071E   A8           DB 168
   \   00071F   28           DB 40
   \   000720   D9           DB 217
   \   000721   F4           DB 244
   \   000722   08           DB 8
   \   000723   D8           DB 216
   \   000724   F2           DB 242
   \   000725   8D           DB 141
   \   000726   29           DB 41
   \   000727   DA           DB 218
   \   000728   F4           DB 244
   \   000729   05           DB 5
   \   00072A   D9           DB 217
   \   00072B   F2           DB 242
   \   00072C   85           DB 133
   \   00072D   A4           DB 164
   \   00072E   C2           DB 194
   \   00072F   F2           DB 242
   \   000730   D8           DB 216
   \   000731   A8           DB 168
   \   000732   8D           DB 141
   \   000733   94           DB 148
   \   000734   01           DB 1
   \   000735   D1           DB 209
   \   000736   D9           DB 217
   \   000737   F4           DB 244
   \   000738   11           DB 17
   \   000739   F2           DB 242
   \   00073A   D8           DB 216
   \   00073B   87           DB 135
   \   00073C   21           DB 33
   \   00073D   D8           DB 216
   \   00073E   F4           DB 244
   \   00073F   0A           DB 10
   \   000740   D8           DB 216
   \   000741   F2           DB 242
   \   000742   84           DB 132
   \   000743   98           DB 152
   \   000744   A8           DB 168
   \   000745   C8           DB 200
   \   000746   01           DB 1
   \   000747   D1           DB 209
   \   000748   D9           DB 217
   \   000749   F4           DB 244
   \   00074A   11           DB 17
   \   00074B   D8           DB 216
   \   00074C   F3           DB 243
   \   00074D   A4           DB 164
   \   00074E   C8           DB 200
   \   00074F   BB           DB 187
   \   000750   AF           DB 175
   \   000751   D0           DB 208
   \   000752   F2           DB 242
   \   000753   DE           DB 222
   \   000754   F8           DB 248
   \   000755   F8           DB 248
   \   000756   F8           DB 248
   \   000757   F8           DB 248
   \   000758   F8           DB 248
   \   000759   F8           DB 248
   \   00075A   F8           DB 248
   \   00075B   F8           DB 248
   \   00075C   D8           DB 216
   \   00075D   F1           DB 241
   \   00075E   B8           DB 184
   \   00075F   F6           DB 246
   \   000760   B5           DB 181
   \   000761   B9           DB 185
   \   000762   B0           DB 176
   \   000763   8A           DB 138
   \   000764   95           DB 149
   \   000765   A3           DB 163
   \   000766   DE           DB 222
   \   000767   3C           DB 60
   \   000768   A3           DB 163
   \   000769   D9           DB 217
   \   00076A   F8           DB 248
   \   00076B   D8           DB 216
   \   00076C   5C           DB 92
   \   00076D   A3           DB 163
   \   00076E   D9           DB 217
   \   00076F   F8           DB 248
   \   000770   D8           DB 216
   \   000771   7C           DB 124
   \   000772   A3           DB 163
   \   000773   D9           DB 217
   \   000774   F8           DB 248
   \   000775   D8           DB 216
   \   000776   F8           DB 248
   \   000777   F9           DB 249
   \   000778   D1           DB 209
   \   000779   A5           DB 165
   \   00077A   D9           DB 217
   \   00077B   DF           DB 223
   \   00077C   DA           DB 218
   \   00077D   FA           DB 250
   \   00077E   D8           DB 216
   \   00077F   B1           DB 177
   \   000780   85           DB 133
   \   000781   30           DB 48
   \   000782   F7           DB 247
   \   000783   D9           DB 217
   \   000784   DE           DB 222
   \   000785   D8           DB 216
   \   000786   F8           DB 248
   \   000787   30           DB 48
   \   000788   AD           DB 173
   \   000789   DA           DB 218
   \   00078A   DE           DB 222
   \   00078B   D8           DB 216
   \   00078C   F2           DB 242
   \   00078D   B4           DB 180
   \   00078E   8C           DB 140
   \   00078F   99           DB 153
   \   000790   A3           DB 163
   \   000791   2D           DB 45
   \   000792   55           DB 85
   \   000793   7D           DB 125
   \   000794   A0           DB 160
   \   000795   83           DB 131
   \   000796   DF           DB 223
   \   000797   DF           DB 223
   \   000798   DF           DB 223
   \   000799   B5           DB 181
   \   00079A   91           DB 145
   \   00079B   A0           DB 160
   \   00079C   F6           DB 246
   \   00079D   29           DB 41
   \   00079E   D9           DB 217
   \   00079F   FB           DB 251
   \   0007A0   D8           DB 216
   \   0007A1   A0           DB 160
   \   0007A2   FC           DB 252
   \   0007A3   29           DB 41
   \   0007A4   D9           DB 217
   \   0007A5   FA           DB 250
   \   0007A6   D8           DB 216
   \   0007A7   A0           DB 160
   \   0007A8   D0           DB 208
   \   0007A9   51           DB 81
   \   0007AA   D9           DB 217
   \   0007AB   F8           DB 248
   \   0007AC   D8           DB 216
   \   0007AD   FC           DB 252
   \   0007AE   51           DB 81
   \   0007AF   D9           DB 217
   \   0007B0   F9           DB 249
   \   0007B1   D8           DB 216
   \   0007B2   79           DB 121
   \   0007B3   D9           DB 217
   \   0007B4   FB           DB 251
   \   0007B5   D8           DB 216
   \   0007B6   A0           DB 160
   \   0007B7   D0           DB 208
   \   0007B8   FC           DB 252
   \   0007B9   79           DB 121
   \   0007BA   D9           DB 217
   \   0007BB   FA           DB 250
   \   0007BC   D8           DB 216
   \   0007BD   A1           DB 161
   \   0007BE   F9           DB 249
   \   0007BF   F9           DB 249
   \   0007C0   F9           DB 249
   \   0007C1   F9           DB 249
   \   0007C2   F9           DB 249
   \   0007C3   A0           DB 160
   \   0007C4   DA           DB 218
   \   0007C5   DF           DB 223
   \   0007C6   DF           DB 223
   \   0007C7   DF           DB 223
   \   0007C8   D8           DB 216
   \   0007C9   A1           DB 161
   \   0007CA   F8           DB 248
   \   0007CB   F8           DB 248
   \   0007CC   F8           DB 248
   \   0007CD   F8           DB 248
   \   0007CE   F8           DB 248
   \   0007CF   AC           DB 172
   \   0007D0   DE           DB 222
   \   0007D1   F8           DB 248
   \   0007D2   AD           DB 173
   \   0007D3   DE           DB 222
   \   0007D4   83           DB 131
   \   0007D5   93           DB 147
   \   0007D6   AC           DB 172
   \   0007D7   2C           DB 44
   \   0007D8   54           DB 84
   \   0007D9   7C           DB 124
   \   0007DA   F1           DB 241
   \   0007DB   A8           DB 168
   \   0007DC   DF           DB 223
   \   0007DD   DF           DB 223
   \   0007DE   DF           DB 223
   \   0007DF   F6           DB 246
   \   0007E0   9D           DB 157
   \   0007E1   2C           DB 44
   \   0007E2   DA           DB 218
   \   0007E3   A0           DB 160
   \   0007E4   DF           DB 223
   \   0007E5   D9           DB 217
   \   0007E6   FA           DB 250
   \   0007E7   DB           DB 219
   \   0007E8   2D           DB 45
   \   0007E9   F8           DB 248
   \   0007EA   D8           DB 216
   \   0007EB   A8           DB 168
   \   0007EC   50           DB 80
   \   0007ED   DA           DB 218
   \   0007EE   A0           DB 160
   \   0007EF   D0           DB 208
   \   0007F0   DE           DB 222
   \   0007F1   D9           DB 217
   \   0007F2   D0           DB 208
   \   0007F3   F8           DB 248
   \   0007F4   F8           DB 248
   \   0007F5   F8           DB 248
   \   0007F6   DB           DB 219
   \   0007F7   55           DB 85
   \   0007F8   F8           DB 248
   \   0007F9   D8           DB 216
   \   0007FA   A8           DB 168
   \   0007FB   78           DB 120
   \   0007FC   DA           DB 218
   \   0007FD   A0           DB 160
   \   0007FE   D0           DB 208
   \   0007FF   DF           DB 223
   \   000800   D9           DB 217
   \   000801   D0           DB 208
   \   000802   FA           DB 250
   \   000803   F8           DB 248
   \   000804   F8           DB 248
   \   000805   F8           DB 248
   \   000806   F8           DB 248
   \   000807   DB           DB 219
   \   000808   7D           DB 125
   \   000809   F8           DB 248
   \   00080A   D8           DB 216
   \   00080B   9C           DB 156
   \   00080C   A8           DB 168
   \   00080D   8C           DB 140
   \   00080E   F5           DB 245
   \   00080F   30           DB 48
   \   000810   DB           DB 219
   \   000811   38           DB 56
   \   000812   D9           DB 217
   \   000813   D0           DB 208
   \   000814   DE           DB 222
   \   000815   DF           DB 223
   \   000816   A0           DB 160
   \   000817   D0           DB 208
   \   000818   DE           DB 222
   \   000819   DF           DB 223
   \   00081A   D8           DB 216
   \   00081B   A8           DB 168
   \   00081C   48           DB 72
   \   00081D   DB           DB 219
   \   00081E   58           DB 88
   \   00081F   D9           DB 217
   \   000820   DF           DB 223
   \   000821   D0           DB 208
   \   000822   DE           DB 222
   \   000823   A0           DB 160
   \   000824   DF           DB 223
   \   000825   D0           DB 208
   \   000826   DE           DB 222
   \   000827   D8           DB 216
   \   000828   A8           DB 168
   \   000829   68           DB 104
   \   00082A   DB           DB 219
   \   00082B   70           DB 112
   \   00082C   D9           DB 217
   \   00082D   DF           DB 223
   \   00082E   DF           DB 223
   \   00082F   A0           DB 160
   \   000830   DF           DB 223
   \   000831   DF           DB 223
   \   000832   D8           DB 216
   \   000833   F1           DB 241
   \   000834   A8           DB 168
   \   000835   88           DB 136
   \   000836   90           DB 144
   \   000837   2C           DB 44
   \   000838   54           DB 84
   \   000839   7C           DB 124
   \   00083A   98           DB 152
   \   00083B   A8           DB 168
   \   00083C   D0           DB 208
   \   00083D   5C           DB 92
   \   00083E   38           DB 56
   \   00083F   D1           DB 209
   \   000840   DA           DB 218
   \   000841   F2           DB 242
   \   000842   AE           DB 174
   \   000843   8C           DB 140
   \   000844   DF           DB 223
   \   000845   F9           DB 249
   \   000846   D8           DB 216
   \   000847   B0           DB 176
   \   000848   87           DB 135
   \   000849   A8           DB 168
   \   00084A   C1           DB 193
   \   00084B   C1           DB 193
   \   00084C   B1           DB 177
   \   00084D   88           DB 136
   \   00084E   A8           DB 168
   \   00084F   C6           DB 198
   \   000850   F9           DB 249
   \   000851   F9           DB 249
   \   000852   DA           DB 218
   \   000853   36           DB 54
   \   000854   D8           DB 216
   \   000855   A8           DB 168
   \   000856   F9           DB 249
   \   000857   DA           DB 218
   \   000858   36           DB 54
   \   000859   D8           DB 216
   \   00085A   A8           DB 168
   \   00085B   F9           DB 249
   \   00085C   DA           DB 218
   \   00085D   36           DB 54
   \   00085E   D8           DB 216
   \   00085F   A8           DB 168
   \   000860   F9           DB 249
   \   000861   DA           DB 218
   \   000862   36           DB 54
   \   000863   D8           DB 216
   \   000864   A8           DB 168
   \   000865   F9           DB 249
   \   000866   DA           DB 218
   \   000867   36           DB 54
   \   000868   D8           DB 216
   \   000869   F7           DB 247
   \   00086A   8D           DB 141
   \   00086B   9D           DB 157
   \   00086C   AD           DB 173
   \   00086D   F8           DB 248
   \   00086E   18           DB 24
   \   00086F   DA           DB 218
   \   000870   F2           DB 242
   \   000871   AE           DB 174
   \   000872   DF           DB 223
   \   000873   D8           DB 216
   \   000874   F7           DB 247
   \   000875   AD           DB 173
   \   000876   FA           DB 250
   \   000877   30           DB 48
   \   000878   D9           DB 217
   \   000879   A4           DB 164
   \   00087A   DE           DB 222
   \   00087B   F9           DB 249
   \   00087C   D8           DB 216
   \   00087D   F2           DB 242
   \   00087E   AE           DB 174
   \   00087F   DE           DB 222
   \   000880   FA           DB 250
   \   000881   F9           DB 249
   \   000882   83           DB 131
   \   000883   A7           DB 167
   \   000884   D9           DB 217
   \   000885   C3           DB 195
   \   000886   C5           DB 197
   \   000887   C7           DB 199
   \   000888   F1           DB 241
   \   000889   88           DB 136
   \   00088A   9B           DB 155
   \   00088B   A7           DB 167
   \   00088C   7A           DB 122
   \   00088D   AD           DB 173
   \   00088E   F7           DB 247
   \   00088F   DE           DB 222
   \   000890   DF           DB 223
   \   000891   A4           DB 164
   \   000892   F8           DB 248
   \   000893   84           DB 132
   \   000894   94           DB 148
   \   000895   08           DB 8
   \   000896   A7           DB 167
   \   000897   97           DB 151
   \   000898   F3           DB 243
   \   000899   00           DB 0
   \   00089A   AE           DB 174
   \   00089B   F2           DB 242
   \   00089C   98           DB 152
   \   00089D   19           DB 25
   \   00089E   A4           DB 164
   \   00089F   88           DB 136
   \   0008A0   C6           DB 198
   \   0008A1   A3           DB 163
   \   0008A2   94           DB 148
   \   0008A3   88           DB 136
   \   0008A4   F6           DB 246
   \   0008A5   32           DB 50
   \   0008A6   DF           DB 223
   \   0008A7   F2           DB 242
   \   0008A8   83           DB 131
   \   0008A9   93           DB 147
   \   0008AA   DB           DB 219
   \   0008AB   09           DB 9
   \   0008AC   D9           DB 217
   \   0008AD   F2           DB 242
   \   0008AE   AA           DB 170
   \   0008AF   DF           DB 223
   \   0008B0   D8           DB 216
   \   0008B1   D8           DB 216
   \   0008B2   AE           DB 174
   \   0008B3   F8           DB 248
   \   0008B4   F9           DB 249
   \   0008B5   D1           DB 209
   \   0008B6   DA           DB 218
   \   0008B7   F3           DB 243
   \   0008B8   A4           DB 164
   \   0008B9   DE           DB 222
   \   0008BA   A7           DB 167
   \   0008BB   F1           DB 241
   \   0008BC   88           DB 136
   \   0008BD   9B           DB 155
   \   0008BE   7A           DB 122
   \   0008BF   D8           DB 216
   \   0008C0   F3           DB 243
   \   0008C1   84           DB 132
   \   0008C2   94           DB 148
   \   0008C3   AE           DB 174
   \   0008C4   19           DB 25
   \   0008C5   F9           DB 249
   \   0008C6   DA           DB 218
   \   0008C7   AA           DB 170
   \   0008C8   F1           DB 241
   \   0008C9   DF           DB 223
   \   0008CA   D8           DB 216
   \   0008CB   A8           DB 168
   \   0008CC   81           DB 129
   \   0008CD   C0           DB 192
   \   0008CE   C3           DB 195
   \   0008CF   C5           DB 197
   \   0008D0   C7           DB 199
   \   0008D1   A3           DB 163
   \   0008D2   92           DB 146
   \   0008D3   83           DB 131
   \   0008D4   F6           DB 246
   \   0008D5   28           DB 40
   \   0008D6   AD           DB 173
   \   0008D7   DE           DB 222
   \   0008D8   D9           DB 217
   \   0008D9   F8           DB 248
   \   0008DA   D8           DB 216
   \   0008DB   A3           DB 163
   \   0008DC   50           DB 80
   \   0008DD   AD           DB 173
   \   0008DE   D9           DB 217
   \   0008DF   F8           DB 248
   \   0008E0   D8           DB 216
   \   0008E1   A3           DB 163
   \   0008E2   78           DB 120
   \   0008E3   AD           DB 173
   \   0008E4   D9           DB 217
   \   0008E5   F8           DB 248
   \   0008E6   D8           DB 216
   \   0008E7   F8           DB 248
   \   0008E8   F9           DB 249
   \   0008E9   D1           DB 209
   \   0008EA   A1           DB 161
   \   0008EB   DA           DB 218
   \   0008EC   DE           DB 222
   \   0008ED   C3           DB 195
   \   0008EE   C5           DB 197
   \   0008EF   C7           DB 199
   \   0008F0   D8           DB 216
   \   0008F1   A1           DB 161
   \   0008F2   81           DB 129
   \   0008F3   94           DB 148
   \   0008F4   F8           DB 248
   \   0008F5   18           DB 24
   \   0008F6   F2           DB 242
   \   0008F7   B0           DB 176
   \   0008F8   89           DB 137
   \   0008F9   AC           DB 172
   \   0008FA   C3           DB 195
   \   0008FB   C5           DB 197
   \   0008FC   C7           DB 199
   \   0008FD   F1           DB 241
   \   0008FE   D8           DB 216
   \   0008FF   B8           DB 184
   \   000900   B4           DB 180
   \   000901   B0           DB 176
   \   000902   97           DB 151
   \   000903   86           DB 134
   \   000904   A8           DB 168
   \   000905   31           DB 49
   \   000906   9B           DB 155
   \   000907   06           DB 6
   \   000908   99           DB 153
   \   000909   07           DB 7
   \   00090A   AB           DB 171
   \   00090B   97           DB 151
   \   00090C   28           DB 40
   \   00090D   88           DB 136
   \   00090E   9B           DB 155
   \   00090F   F0           DB 240
   \   000910   0C           DB 12
   \   000911   20           DB 32
   \   000912   14           DB 20
   \   000913   40           DB 64
   \   000914   B0           DB 176
   \   000915   B4           DB 180
   \   000916   B8           DB 184
   \   000917   F0           DB 240
   \   000918   A8           DB 168
   \   000919   8A           DB 138
   \   00091A   9A           DB 154
   \   00091B   28           DB 40
   \   00091C   50           DB 80
   \   00091D   78           DB 120
   \   00091E   B7           DB 183
   \   00091F   9B           DB 155
   \   000920   A8           DB 168
   \   000921   29           DB 41
   \   000922   51           DB 81
   \   000923   79           DB 121
   \   000924   24           DB 36
   \   000925   70           DB 112
   \   000926   59           DB 89
   \   000927   44           DB 68
   \   000928   69           DB 105
   \   000929   38           DB 56
   \   00092A   64           DB 100
   \   00092B   48           DB 72
   \   00092C   31           DB 49
   \   00092D   F1           DB 241
   \   00092E   BB           DB 187
   \   00092F   AB           DB 171
   \   000930   88           DB 136
   \   000931   00           DB 0
   \   000932   2C           DB 44
   \   000933   54           DB 84
   \   000934   7C           DB 124
   \   000935   F0           DB 240
   \   000936   B3           DB 179
   \   000937   8B           DB 139
   \   000938   B8           DB 184
   \   000939   A8           DB 168
   \   00093A   04           DB 4
   \   00093B   28           DB 40
   \   00093C   50           DB 80
   \   00093D   78           DB 120
   \   00093E   F1           DB 241
   \   00093F   B0           DB 176
   \   000940   88           DB 136
   \   000941   B4           DB 180
   \   000942   97           DB 151
   \   000943   26           DB 38
   \   000944   A8           DB 168
   \   000945   59           DB 89
   \   000946   98           DB 152
   \   000947   BB           DB 187
   \   000948   AB           DB 171
   \   000949   B3           DB 179
   \   00094A   8B           DB 139
   \   00094B   02           DB 2
   \   00094C   26           DB 38
   \   00094D   46           DB 70
   \   00094E   66           DB 102
   \   00094F   B0           DB 176
   \   000950   B8           DB 184
   \   000951   F0           DB 240
   \   000952   8A           DB 138
   \   000953   9C           DB 156
   \   000954   A8           DB 168
   \   000955   29           DB 41
   \   000956   51           DB 81
   \   000957   79           DB 121
   \   000958   8B           DB 139
   \   000959   29           DB 41
   \   00095A   51           DB 81
   \   00095B   79           DB 121
   \   00095C   8A           DB 138
   \   00095D   24           DB 36
   \   00095E   70           DB 112
   \   00095F   59           DB 89
   \   000960   8B           DB 139
   \   000961   20           DB 32
   \   000962   58           DB 88
   \   000963   71           DB 113
   \   000964   8A           DB 138
   \   000965   44           DB 68
   \   000966   69           DB 105
   \   000967   38           DB 56
   \   000968   8B           DB 139
   \   000969   39           DB 57
   \   00096A   40           DB 64
   \   00096B   68           DB 104
   \   00096C   8A           DB 138
   \   00096D   64           DB 100
   \   00096E   48           DB 72
   \   00096F   31           DB 49
   \   000970   8B           DB 139
   \   000971   30           DB 48
   \   000972   49           DB 73
   \   000973   60           DB 96
   \   000974   88           DB 136
   \   000975   F1           DB 241
   \   000976   AC           DB 172
   \   000977   00           DB 0
   \   000978   2C           DB 44
   \   000979   54           DB 84
   \   00097A   7C           DB 124
   \   00097B   F0           DB 240
   \   00097C   8C           DB 140
   \   00097D   A8           DB 168
   \   00097E   04           DB 4
   \   00097F   28           DB 40
   \   000980   50           DB 80
   \   000981   78           DB 120
   \   000982   F1           DB 241
   \   000983   88           DB 136
   \   000984   97           DB 151
   \   000985   26           DB 38
   \   000986   A8           DB 168
   \   000987   59           DB 89
   \   000988   98           DB 152
   \   000989   AC           DB 172
   \   00098A   8C           DB 140
   \   00098B   02           DB 2
   \   00098C   26           DB 38
   \   00098D   46           DB 70
   \   00098E   66           DB 102
   \   00098F   F0           DB 240
   \   000990   89           DB 137
   \   000991   9C           DB 156
   \   000992   A8           DB 168
   \   000993   29           DB 41
   \   000994   51           DB 81
   \   000995   79           DB 121
   \   000996   24           DB 36
   \   000997   70           DB 112
   \   000998   59           DB 89
   \   000999   44           DB 68
   \   00099A   69           DB 105
   \   00099B   38           DB 56
   \   00099C   64           DB 100
   \   00099D   48           DB 72
   \   00099E   31           DB 49
   \   00099F   A9           DB 169
   \   0009A0   88           DB 136
   \   0009A1   09           DB 9
   \   0009A2   20           DB 32
   \   0009A3   59           DB 89
   \   0009A4   70           DB 112
   \   0009A5   AB           DB 171
   \   0009A6   11           DB 17
   \   0009A7   38           DB 56
   \   0009A8   40           DB 64
   \   0009A9   69           DB 105
   \   0009AA   A8           DB 168
   \   0009AB   19           DB 25
   \   0009AC   31           DB 49
   \   0009AD   48           DB 72
   \   0009AE   60           DB 96
   \   0009AF   8C           DB 140
   \   0009B0   A8           DB 168
   \   0009B1   3C           DB 60
   \   0009B2   41           DB 65
   \   0009B3   5C           DB 92
   \   0009B4   20           DB 32
   \   0009B5   7C           DB 124
   \   0009B6   00           DB 0
   \   0009B7   F1           DB 241
   \   0009B8   87           DB 135
   \   0009B9   98           DB 152
   \   0009BA   19           DB 25
   \   0009BB   86           DB 134
   \   0009BC   A8           DB 168
   \   0009BD   6E           DB 110
   \   0009BE   76           DB 118
   \   0009BF   7E           DB 126
   \   0009C0   A9           DB 169
   \   0009C1   99           DB 153
   \   0009C2   88           DB 136
   \   0009C3   2D           DB 45
   \   0009C4   55           DB 85
   \   0009C5   7D           DB 125
   \   0009C6   D8           DB 216
   \   0009C7   B1           DB 177
   \   0009C8   B5           DB 181
   \   0009C9   B9           DB 185
   \   0009CA   A3           DB 163
   \   0009CB   DF           DB 223
   \   0009CC   DF           DB 223
   \   0009CD   DF           DB 223
   \   0009CE   AE           DB 174
   \   0009CF   D0           DB 208
   \   0009D0   DF           DB 223
   \   0009D1   AA           DB 170
   \   0009D2   D0           DB 208
   \   0009D3   DE           DB 222
   \   0009D4   F2           DB 242
   \   0009D5   AB           DB 171
   \   0009D6   F8           DB 248
   \   0009D7   F9           DB 249
   \   0009D8   D9           DB 217
   \   0009D9   B0           DB 176
   \   0009DA   87           DB 135
   \   0009DB   C4           DB 196
   \   0009DC   AA           DB 170
   \   0009DD   F1           DB 241
   \   0009DE   DF           DB 223
   \   0009DF   DF           DB 223
   \   0009E0   BB           DB 187
   \   0009E1   AF           DB 175
   \   0009E2   DF           DB 223
   \   0009E3   DF           DB 223
   \   0009E4   B9           DB 185
   \   0009E5   D8           DB 216
   \   0009E6   B1           DB 177
   \   0009E7   F1           DB 241
   \   0009E8   A3           DB 163
   \   0009E9   97           DB 151
   \   0009EA   8E           DB 142
   \   0009EB   60           DB 96
   \   0009EC   DF           DB 223
   \   0009ED   B0           DB 176
   \   0009EE   84           DB 132
   \   0009EF   F2           DB 242
   \   0009F0   C8           DB 200
   \   0009F1   F8           DB 248
   \   0009F2   F9           DB 249
   \   0009F3   D9           DB 217
   \   0009F4   DE           DB 222
   \   0009F5   D8           DB 216
   \   0009F6   93           DB 147
   \   0009F7   85           DB 133
   \   0009F8   F1           DB 241
   \   0009F9   4A           DB 74
   \   0009FA   B1           DB 177
   \   0009FB   83           DB 131
   \   0009FC   A3           DB 163
   \   0009FD   08           DB 8
   \   0009FE   B5           DB 181
   \   0009FF   83           DB 131
   \   000A00   9A           DB 154
   \   000A01   08           DB 8
   \   000A02   10           DB 16
   \   000A03   B7           DB 183
   \   000A04   9F           DB 159
   \   000A05   10           DB 16
   \   000A06   D8           DB 216
   \   000A07   F1           DB 241
   \   000A08   B0           DB 176
   \   000A09   BA           DB 186
   \   000A0A   AE           DB 174
   \   000A0B   B0           DB 176
   \   000A0C   8A           DB 138
   \   000A0D   C2           DB 194
   \   000A0E   B2           DB 178
   \   000A0F   B6           DB 182
   \   000A10   8E           DB 142
   \   000A11   9E           DB 158
   \   000A12   F1           DB 241
   \   000A13   FB           DB 251
   \   000A14   D9           DB 217
   \   000A15   F4           DB 244
   \   000A16   1D           DB 29
   \   000A17   D8           DB 216
   \   000A18   F9           DB 249
   \   000A19   D9           DB 217
   \   000A1A   0C           DB 12
   \   000A1B   F1           DB 241
   \   000A1C   D8           DB 216
   \   000A1D   F8           DB 248
   \   000A1E   F8           DB 248
   \   000A1F   AD           DB 173
   \   000A20   61           DB 97
   \   000A21   D9           DB 217
   \   000A22   AE           DB 174
   \   000A23   FB           DB 251
   \   000A24   D8           DB 216
   \   000A25   F4           DB 244
   \   000A26   0C           DB 12
   \   000A27   F1           DB 241
   \   000A28   D8           DB 216
   \   000A29   F8           DB 248
   \   000A2A   F8           DB 248
   \   000A2B   AD           DB 173
   \   000A2C   19           DB 25
   \   000A2D   D9           DB 217
   \   000A2E   AE           DB 174
   \   000A2F   FB           DB 251
   \   000A30   DF           DB 223
   \   000A31   D8           DB 216
   \   000A32   F4           DB 244
   \   000A33   16           DB 22
   \   000A34   F1           DB 241
   \   000A35   D8           DB 216
   \   000A36   F8           DB 248
   \   000A37   AD           DB 173
   \   000A38   8D           DB 141
   \   000A39   61           DB 97
   \   000A3A   D9           DB 217
   \   000A3B   F4           DB 244
   \   000A3C   F4           DB 244
   \   000A3D   AC           DB 172
   \   000A3E   F5           DB 245
   \   000A3F   9C           DB 156
   \   000A40   9C           DB 156
   \   000A41   8D           DB 141
   \   000A42   DF           DB 223
   \   000A43   2B           DB 43
   \   000A44   BA           DB 186
   \   000A45   B6           DB 182
   \   000A46   AE           DB 174
   \   000A47   FA           DB 250
   \   000A48   F8           DB 248
   \   000A49   F4           DB 244
   \   000A4A   0B           DB 11
   \   000A4B   D8           DB 216
   \   000A4C   F1           DB 241
   \   000A4D   AE           DB 174
   \   000A4E   D0           DB 208
   \   000A4F   F8           DB 248
   \   000A50   AD           DB 173
   \   000A51   51           DB 81
   \   000A52   DA           DB 218
   \   000A53   AE           DB 174
   \   000A54   FA           DB 250
   \   000A55   F8           DB 248
   \   000A56   F1           DB 241
   \   000A57   D8           DB 216
   \   000A58   B9           DB 185
   \   000A59   B1           DB 177
   \   000A5A   B6           DB 182
   \   000A5B   A3           DB 163
   \   000A5C   83           DB 131
   \   000A5D   9C           DB 156
   \   000A5E   08           DB 8
   \   000A5F   B9           DB 185
   \   000A60   B1           DB 177
   \   000A61   83           DB 131
   \   000A62   9A           DB 154
   \   000A63   B5           DB 181
   \   000A64   AA           DB 170
   \   000A65   C0           DB 192
   \   000A66   FD           DB 253
   \   000A67   30           DB 48
   \   000A68   83           DB 131
   \   000A69   B7           DB 183
   \   000A6A   9F           DB 159
   \   000A6B   10           DB 16
   \   000A6C   B5           DB 181
   \   000A6D   8B           DB 139
   \   000A6E   93           DB 147
   \   000A6F   F2           DB 242
   \   000A70   02           DB 2
   \   000A71   02           DB 2
   \   000A72   D1           DB 209
   \   000A73   AB           DB 171
   \   000A74   DA           DB 218
   \   000A75   DE           DB 222
   \   000A76   D8           DB 216
   \   000A77   F1           DB 241
   \   000A78   B0           DB 176
   \   000A79   80           DB 128
   \   000A7A   BA           DB 186
   \   000A7B   AB           DB 171
   \   000A7C   C0           DB 192
   \   000A7D   C3           DB 195
   \   000A7E   B2           DB 178
   \   000A7F   84           DB 132
   \   000A80   C1           DB 193
   \   000A81   C3           DB 195
   \   000A82   D8           DB 216
   \   000A83   B1           DB 177
   \   000A84   B9           DB 185
   \   000A85   F3           DB 243
   \   000A86   8B           DB 139
   \   000A87   A3           DB 163
   \   000A88   91           DB 145
   \   000A89   B6           DB 182
   \   000A8A   09           DB 9
   \   000A8B   B4           DB 180
   \   000A8C   D9           DB 217
   \   000A8D   AB           DB 171
   \   000A8E   DE           DB 222
   \   000A8F   B0           DB 176
   \   000A90   87           DB 135
   \   000A91   9C           DB 156
   \   000A92   B9           DB 185
   \   000A93   A3           DB 163
   \   000A94   DD           DB 221
   \   000A95   F1           DB 241
   \   000A96   B3           DB 179
   \   000A97   8B           DB 139
   \   000A98   8B           DB 139
   \   000A99   8B           DB 139
   \   000A9A   8B           DB 139
   \   000A9B   8B           DB 139
   \   000A9C   B0           DB 176
   \   000A9D   87           DB 135
   \   000A9E   A3           DB 163
   \   000A9F   A3           DB 163
   \   000AA0   A3           DB 163
   \   000AA1   A3           DB 163
   \   000AA2   B2           DB 178
   \   000AA3   8B           DB 139
   \   000AA4   B6           DB 182
   \   000AA5   9B           DB 155
   \   000AA6   F2           DB 242
   \   000AA7   A3           DB 163
   \   000AA8   A3           DB 163
   \   000AA9   A3           DB 163
   \   000AAA   A3           DB 163
   \   000AAB   A3           DB 163
   \   000AAC   A3           DB 163
   \   000AAD   A3           DB 163
   \   000AAE   A3           DB 163
   \   000AAF   A3           DB 163
   \   000AB0   A3           DB 163
   \   000AB1   F1           DB 241
   \   000AB2   B0           DB 176
   \   000AB3   87           DB 135
   \   000AB4   B5           DB 181
   \   000AB5   9A           DB 154
   \   000AB6   A3           DB 163
   \   000AB7   F3           DB 243
   \   000AB8   9B           DB 155
   \   000AB9   A3           DB 163
   \   000ABA   A3           DB 163
   \   000ABB   DC           DB 220
   \   000ABC   BA           DB 186
   \   000ABD   AC           DB 172
   \   000ABE   DF           DB 223
   \   000ABF   B9           DB 185
   \   000AC0   A3           DB 163
   \   000AC1   A3           DB 163
   \   000AC2   A3           DB 163
   \   000AC3   A3           DB 163
   \   000AC4   A3           DB 163
   \   000AC5   A3           DB 163
   \   000AC6   A3           DB 163
   \   000AC7   A3           DB 163
   \   000AC8   A3           DB 163
   \   000AC9   A3           DB 163
   \   000ACA   A3           DB 163
   \   000ACB   A3           DB 163
   \   000ACC   A3           DB 163
   \   000ACD   A3           DB 163
   \   000ACE   A3           DB 163
   \   000ACF   A3           DB 163
   \   000AD0   D8           DB 216
   \   000AD1   D8           DB 216
   \   000AD2   D8           DB 216
   \   000AD3   BB           DB 187
   \   000AD4   B3           DB 179
   \   000AD5   B7           DB 183
   \   000AD6   F1           DB 241
   \   000AD7   AA           DB 170
   \   000AD8   F9           DB 249
   \   000AD9   DA           DB 218
   \   000ADA   FF           DB 255
   \   000ADB   D9           DB 217
   \   000ADC   80           DB 128
   \   000ADD   9A           DB 154
   \   000ADE   AA           DB 170
   \   000ADF   28           DB 40
   \   000AE0   B4           DB 180
   \   000AE1   80           DB 128
   \   000AE2   98           DB 152
   \   000AE3   A7           DB 167
   \   000AE4   20           DB 32
   \   000AE5   B7           DB 183
   \   000AE6   97           DB 151
   \   000AE7   87           DB 135
   \   000AE8   A8           DB 168
   \   000AE9   66           DB 102
   \   000AEA   88           DB 136
   \   000AEB   F0           DB 240
   \   000AEC   79           DB 121
   \   000AED   51           DB 81
   \   000AEE   F1           DB 241
   \   000AEF   90           DB 144
   \   000AF0   2C           DB 44
   \   000AF1   87           DB 135
   \   000AF2   0C           DB 12
   \   000AF3   A7           DB 167
   \   000AF4   81           DB 129
   \   000AF5   97           DB 151
   \   000AF6   62           DB 98
   \   000AF7   93           DB 147
   \   000AF8   F0           DB 240
   \   000AF9   71           DB 113
   \   000AFA   71           DB 113
   \   000AFB   60           DB 96
   \   000AFC   85           DB 133
   \   000AFD   94           DB 148
   \   000AFE   01           DB 1
   \   000AFF   29           DB 41
   \   000B00   51           DB 81
   \   000B01   79           DB 121
   \   000B02   90           DB 144
   \   000B03   A5           DB 165
   \   000B04   F1           DB 241
   \   000B05   28           DB 40
   \   000B06   4C           DB 76
   \   000B07   6C           DB 108
   \   000B08   87           DB 135
   \   000B09   0C           DB 12
   \   000B0A   95           DB 149
   \   000B0B   18           DB 24
   \   000B0C   85           DB 133
   \   000B0D   78           DB 120
   \   000B0E   A3           DB 163
   \   000B0F   83           DB 131
   \   000B10   90           DB 144
   \   000B11   28           DB 40
   \   000B12   4C           DB 76
   \   000B13   6C           DB 108
   \   000B14   88           DB 136
   \   000B15   6C           DB 108
   \   000B16   D8           DB 216
   \   000B17   F3           DB 243
   \   000B18   A2           DB 162
   \   000B19   82           DB 130
   \   000B1A   00           DB 0
   \   000B1B   F2           DB 242
   \   000B1C   10           DB 16
   \   000B1D   A8           DB 168
   \   000B1E   92           DB 146
   \   000B1F   19           DB 25
   \   000B20   80           DB 128
   \   000B21   A2           DB 162
   \   000B22   F2           DB 242
   \   000B23   D9           DB 217
   \   000B24   26           DB 38
   \   000B25   D8           DB 216
   \   000B26   F1           DB 241
   \   000B27   88           DB 136
   \   000B28   A8           DB 168
   \   000B29   4D           DB 77
   \   000B2A   D9           DB 217
   \   000B2B   48           DB 72
   \   000B2C   D8           DB 216
   \   000B2D   96           DB 150
   \   000B2E   A8           DB 168
   \   000B2F   39           DB 57
   \   000B30   80           DB 128
   \   000B31   D9           DB 217
   \   000B32   3C           DB 60
   \   000B33   D8           DB 216
   \   000B34   95           DB 149
   \   000B35   80           DB 128
   \   000B36   A8           DB 168
   \   000B37   39           DB 57
   \   000B38   A6           DB 166
   \   000B39   86           DB 134
   \   000B3A   98           DB 152
   \   000B3B   D9           DB 217
   \   000B3C   2C           DB 44
   \   000B3D   DA           DB 218
   \   000B3E   87           DB 135
   \   000B3F   A7           DB 167
   \   000B40   2C           DB 44
   \   000B41   D8           DB 216
   \   000B42   A8           DB 168
   \   000B43   89           DB 137
   \   000B44   95           DB 149
   \   000B45   19           DB 25
   \   000B46   A9           DB 169
   \   000B47   80           DB 128
   \   000B48   D9           DB 217
   \   000B49   38           DB 56
   \   000B4A   D8           DB 216
   \   000B4B   A8           DB 168
   \   000B4C   89           DB 137
   \   000B4D   39           DB 57
   \   000B4E   A9           DB 169
   \   000B4F   80           DB 128
   \   000B50   DA           DB 218
   \   000B51   3C           DB 60
   \   000B52   D8           DB 216
   \   000B53   A8           DB 168
   \   000B54   2E           DB 46
   \   000B55   A8           DB 168
   \   000B56   39           DB 57
   \   000B57   90           DB 144
   \   000B58   D9           DB 217
   \   000B59   0C           DB 12
   \   000B5A   D8           DB 216
   \   000B5B   A8           DB 168
   \   000B5C   95           DB 149
   \   000B5D   31           DB 49
   \   000B5E   98           DB 152
   \   000B5F   D9           DB 217
   \   000B60   0C           DB 12
   \   000B61   D8           DB 216
   \   000B62   A8           DB 168
   \   000B63   09           DB 9
   \   000B64   D9           DB 217
   \   000B65   FF           DB 255
   \   000B66   D8           DB 216
   \   000B67   01           DB 1
   \   000B68   DA           DB 218
   \   000B69   FF           DB 255
   \   000B6A   D8           DB 216
   \   000B6B   95           DB 149
   \   000B6C   39           DB 57
   \   000B6D   A9           DB 169
   \   000B6E   DA           DB 218
   \   000B6F   26           DB 38
   \   000B70   FF           DB 255
   \   000B71   D8           DB 216
   \   000B72   90           DB 144
   \   000B73   A8           DB 168
   \   000B74   0D           DB 13
   \   000B75   89           DB 137
   \   000B76   99           DB 153
   \   000B77   A8           DB 168
   \   000B78   10           DB 16
   \   000B79   80           DB 128
   \   000B7A   98           DB 152
   \   000B7B   21           DB 33
   \   000B7C   DA           DB 218
   \   000B7D   2E           DB 46
   \   000B7E   D8           DB 216
   \   000B7F   89           DB 137
   \   000B80   99           DB 153
   \   000B81   A8           DB 168
   \   000B82   31           DB 49
   \   000B83   80           DB 128
   \   000B84   DA           DB 218
   \   000B85   2E           DB 46
   \   000B86   D8           DB 216
   \   000B87   A8           DB 168
   \   000B88   86           DB 134
   \   000B89   96           DB 150
   \   000B8A   31           DB 49
   \   000B8B   80           DB 128
   \   000B8C   DA           DB 218
   \   000B8D   2E           DB 46
   \   000B8E   D8           DB 216
   \   000B8F   A8           DB 168
   \   000B90   87           DB 135
   \   000B91   31           DB 49
   \   000B92   80           DB 128
   \   000B93   DA           DB 218
   \   000B94   2E           DB 46
   \   000B95   D8           DB 216
   \   000B96   A8           DB 168
   \   000B97   82           DB 130
   \   000B98   92           DB 146
   \   000B99   F3           DB 243
   \   000B9A   41           DB 65
   \   000B9B   80           DB 128
   \   000B9C   F1           DB 241
   \   000B9D   D9           DB 217
   \   000B9E   2E           DB 46
   \   000B9F   D8           DB 216
   \   000BA0   A8           DB 168
   \   000BA1   82           DB 130
   \   000BA2   F3           DB 243
   \   000BA3   19           DB 25
   \   000BA4   80           DB 128
   \   000BA5   F1           DB 241
   \   000BA6   D9           DB 217
   \   000BA7   2E           DB 46
   \   000BA8   D8           DB 216
   \   000BA9   82           DB 130
   \   000BAA   AC           DB 172
   \   000BAB   F3           DB 243
   \   000BAC   C0           DB 192
   \   000BAD   A2           DB 162
   \   000BAE   80           DB 128
   \   000BAF   22           DB 34
   \   000BB0   F1           DB 241
   \   000BB1   A6           DB 166
   \   000BB2   2E           DB 46
   \   000BB3   A7           DB 167
   \   000BB4   2E           DB 46
   \   000BB5   A9           DB 169
   \   000BB6   22           DB 34
   \   000BB7   98           DB 152
   \   000BB8   A8           DB 168
   \   000BB9   29           DB 41
   \   000BBA   DA           DB 218
   \   000BBB   AC           DB 172
   \   000BBC   DE           DB 222
   \   000BBD   FF           DB 255
   \   000BBE   D8           DB 216
   \   000BBF   A2           DB 162
   \   000BC0   F2           DB 242
   \   000BC1   2A           DB 42
   \   000BC2   F1           DB 241
   \   000BC3   A9           DB 169
   \   000BC4   2E           DB 46
   \   000BC5   82           DB 130
   \   000BC6   92           DB 146
   \   000BC7   A8           DB 168
   \   000BC8   F2           DB 242
   \   000BC9   31           DB 49
   \   000BCA   80           DB 128
   \   000BCB   A6           DB 166
   \   000BCC   96           DB 150
   \   000BCD   F1           DB 241
   \   000BCE   D9           DB 217
   \   000BCF   00           DB 0
   \   000BD0   AC           DB 172
   \   000BD1   8C           DB 140
   \   000BD2   9C           DB 156
   \   000BD3   0C           DB 12
   \   000BD4   30           DB 48
   \   000BD5   AC           DB 172
   \   000BD6   DE           DB 222
   \   000BD7   D0           DB 208
   \   000BD8   DE           DB 222
   \   000BD9   FF           DB 255
   \   000BDA   D8           DB 216
   \   000BDB   8C           DB 140
   \   000BDC   9C           DB 156
   \   000BDD   AC           DB 172
   \   000BDE   D0           DB 208
   \   000BDF   10           DB 16
   \   000BE0   AC           DB 172
   \   000BE1   DE           DB 222
   \   000BE2   80           DB 128
   \   000BE3   92           DB 146
   \   000BE4   A2           DB 162
   \   000BE5   F2           DB 242
   \   000BE6   4C           DB 76
   \   000BE7   82           DB 130
   \   000BE8   A8           DB 168
   \   000BE9   F1           DB 241
   \   000BEA   CA           DB 202
   \   000BEB   F2           DB 242
   \   000BEC   35           DB 53
   \   000BED   F1           DB 241
   \   000BEE   96           DB 150
   \   000BEF   88           DB 136
   \   000BF0   A6           DB 166
   \   000BF1   D9           DB 217
   \   000BF2   00           DB 0
   \   000BF3   D8           DB 216
   \   000BF4   F1           DB 241
   \   000BF5   FF           DB 255
    255              /* bank # 0 */
    256              0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,
    257              0x00, 0x65, 0x00, 0x54, 0xff, 0xef, 0x00, 0x00, 0xfa, 0x80, 0x00, 0x0b, 0x12, 0x82, 0x00, 0x01,
    258              0x03, 0x0c, 0x30, 0xc3, 0x0e, 0x8c, 0x8c, 0xe9, 0x14, 0xd5, 0x40, 0x02, 0x13, 0x71, 0x0f, 0x8e,
    259              0x38, 0x83, 0xf8, 0x83, 0x30, 0x00, 0xf8, 0x83, 0x25, 0x8e, 0xf8, 0x83, 0x30, 0x00, 0xf8, 0x83,
    260              0xff, 0xff, 0xff, 0xff, 0x0f, 0xfe, 0xa9, 0xd6, 0x24, 0x00, 0x04, 0x00, 0x1a, 0x82, 0x79, 0xa1,
    261              0x00, 0x00, 0x00, 0x3c, 0xff, 0xff, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x38, 0x83, 0x6f, 0xa2,
    262              0x00, 0x3e, 0x03, 0x30, 0x40, 0x00, 0x00, 0x00, 0x02, 0xca, 0xe3, 0x09, 0x3e, 0x80, 0x00, 0x00,
    263              0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
    264              0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x18, 0x6e, 0x00, 0x00, 0x06, 0x92, 0x0a, 0x16, 0xc0, 0xdf,
    265              0xff, 0xff, 0x02, 0x56, 0xfd, 0x8c, 0xd3, 0x77, 0xff, 0xe1, 0xc4, 0x96, 0xe0, 0xc5, 0xbe, 0xaa,
    266              0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x2b, 0x00, 0x00, 0x16, 0x57, 0x00, 0x00, 0x03, 0x59,
    267              0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xfa, 0x00, 0x02, 0x6c, 0x1d, 0x00, 0x00, 0x00, 0x00,
    268              0x3f, 0xff, 0xdf, 0xeb, 0x00, 0x3e, 0xb3, 0xb6, 0x00, 0x0d, 0x22, 0x78, 0x00, 0x00, 0x2f, 0x3c,
    269              0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x42, 0xb5, 0x00, 0x00, 0x39, 0xa2, 0x00, 0x00, 0xb3, 0x65,
    270              0xd9, 0x0e, 0x9f, 0xc9, 0x1d, 0xcf, 0x4c, 0x34, 0x30, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
    271              0x3b, 0xb6, 0x7a, 0xe8, 0x00, 0x64, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    272              /* bank # 1 */
    273              0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0xfa, 0x92, 0x10, 0x00, 0x22, 0x5e, 0x00, 0x0d, 0x22, 0x9f,
    274              0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0xff, 0x46, 0x00, 0x00, 0x63, 0xd4, 0x00, 0x00,
    275              0x10, 0x00, 0x00, 0x00, 0x04, 0xd6, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x00,
    276              0x00, 0x00, 0x10, 0x72, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    277              0x00, 0x06, 0x00, 0x02, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    278              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x64, 0x00, 0x20, 0x00, 0x00,
    279              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00,
    280              0x00, 0x00, 0x00, 0x32, 0xf8, 0x98, 0x00, 0x00, 0xff, 0x65, 0x00, 0x00, 0x83, 0x0f, 0x00, 0x00,
    281              0xff, 0x9b, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    282              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    283              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
    284              0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0xb2, 0x6a, 0x00, 0x02, 0x00, 0x00,
    285              0x00, 0x01, 0xfb, 0x83, 0x00, 0x68, 0x00, 0x00, 0x00, 0xd9, 0xfc, 0x00, 0x7c, 0xf1, 0xff, 0x83,
    286              0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x64, 0x03, 0xe8, 0x00, 0x64, 0x00, 0x28,
    287              0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x16, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
    288              0x00, 0x00, 0x10, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf4, 0x00, 0x00, 0x10, 0x00,
    289              /* bank # 2 */
    290              0x00, 0x28, 0x00, 0x00, 0xff, 0xff, 0x45, 0x81, 0xff, 0xff, 0xfa, 0x72, 0x00, 0x00, 0x00, 0x00,
    291              0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x05, 0x00, 0x05, 0xba, 0xc6, 0x00, 0x47, 0x78, 0xa2,
    292              0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x14,
    293              0x00, 0x00, 0x25, 0x4d, 0x00, 0x2f, 0x70, 0x6d, 0x00, 0x00, 0x05, 0xae, 0x00, 0x0c, 0x02, 0xd0,
    294              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    295              0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    296              0x00, 0x64, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    297              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    298              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    299              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    300              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    301              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    302              0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0e,
    303              0x00, 0x00, 0x0a, 0xc7, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0xff, 0xff, 0xff, 0x9c,
    304              0x00, 0x00, 0x0b, 0x2b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64,
    305              0xff, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    306              /* bank # 3 */
    307              0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    308              0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x24, 0x26, 0xd3,
    309              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x96, 0x00, 0x3c,
    310              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    311              0x0c, 0x0a, 0x4e, 0x68, 0xcd, 0xcf, 0x77, 0x09, 0x50, 0x16, 0x67, 0x59, 0xc6, 0x19, 0xce, 0x82,
    312              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    313              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xd7, 0x84, 0x00, 0x03, 0x00, 0x00, 0x00,
    314              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x93, 0x8f, 0x9d, 0x1e, 0x1b, 0x1c, 0x19,
    315              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    316              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x18, 0x85, 0x00, 0x00, 0x40, 0x00,
    317              0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    318              0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    319              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    320              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    321              0x00, 0x00, 0x00, 0x00, 0x67, 0x7d, 0xdf, 0x7e, 0x72, 0x90, 0x2e, 0x55, 0x4c, 0xf6, 0xe6, 0x88,
    322              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    323          
    324              /* bank # 4 */
    325              0xd8, 0xdc, 0xb4, 0xb8, 0xb0, 0xd8, 0xb9, 0xab, 0xf3, 0xf8, 0xfa, 0xb3, 0xb7, 0xbb, 0x8e, 0x9e,
    326              0xae, 0xf1, 0x32, 0xf5, 0x1b, 0xf1, 0xb4, 0xb8, 0xb0, 0x80, 0x97, 0xf1, 0xa9, 0xdf, 0xdf, 0xdf,
    327              0xaa, 0xdf, 0xdf, 0xdf, 0xf2, 0xaa, 0xc5, 0xcd, 0xc7, 0xa9, 0x0c, 0xc9, 0x2c, 0x97, 0xf1, 0xa9,
    328              0x89, 0x26, 0x46, 0x66, 0xb2, 0x89, 0x99, 0xa9, 0x2d, 0x55, 0x7d, 0xb0, 0xb0, 0x8a, 0xa8, 0x96,
    329              0x36, 0x56, 0x76, 0xf1, 0xba, 0xa3, 0xb4, 0xb2, 0x80, 0xc0, 0xb8, 0xa8, 0x97, 0x11, 0xb2, 0x83,
    330              0x98, 0xba, 0xa3, 0xf0, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xb2, 0xb9, 0xb4, 0x98, 0x83, 0xf1,
    331              0xa3, 0x29, 0x55, 0x7d, 0xba, 0xb5, 0xb1, 0xa3, 0x83, 0x93, 0xf0, 0x00, 0x28, 0x50, 0xf5, 0xb2,
    332              0xb6, 0xaa, 0x83, 0x93, 0x28, 0x54, 0x7c, 0xf1, 0xb9, 0xa3, 0x82, 0x93, 0x61, 0xba, 0xa2, 0xda,
    333              0xde, 0xdf, 0xdb, 0x81, 0x9a, 0xb9, 0xae, 0xf5, 0x60, 0x68, 0x70, 0xf1, 0xda, 0xba, 0xa2, 0xdf,
    334              0xd9, 0xba, 0xa2, 0xfa, 0xb9, 0xa3, 0x82, 0x92, 0xdb, 0x31, 0xba, 0xa2, 0xd9, 0xba, 0xa2, 0xf8,
    335              0xdf, 0x85, 0xa4, 0xd0, 0xc1, 0xbb, 0xad, 0x83, 0xc2, 0xc5, 0xc7, 0xb8, 0xa2, 0xdf, 0xdf, 0xdf,
    336              0xba, 0xa0, 0xdf, 0xdf, 0xdf, 0xd8, 0xd8, 0xf1, 0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35,
    337              0x5d, 0xb2, 0xb6, 0xba, 0xaf, 0x8c, 0x96, 0x19, 0x8f, 0x9f, 0xa7, 0x0e, 0x16, 0x1e, 0xb4, 0x9a,
    338              0xb8, 0xaa, 0x87, 0x2c, 0x54, 0x7c, 0xba, 0xa4, 0xb0, 0x8a, 0xb6, 0x91, 0x32, 0x56, 0x76, 0xb2,
    339              0x84, 0x94, 0xa4, 0xc8, 0x08, 0xcd, 0xd8, 0xb8, 0xb4, 0xb0, 0xf1, 0x99, 0x82, 0xa8, 0x2d, 0x55,
    340              0x7d, 0x98, 0xa8, 0x0e, 0x16, 0x1e, 0xa2, 0x2c, 0x54, 0x7c, 0x92, 0xa4, 0xf0, 0x2c, 0x50, 0x78,
    341              /* bank # 5 */
    342              0xf1, 0x84, 0xa8, 0x98, 0xc4, 0xcd, 0xfc, 0xd8, 0x0d, 0xdb, 0xa8, 0xfc, 0x2d, 0xf3, 0xd9, 0xba,
    343              0xa6, 0xf8, 0xda, 0xba, 0xa6, 0xde, 0xd8, 0xba, 0xb2, 0xb6, 0x86, 0x96, 0xa6, 0xd0, 0xf3, 0xc8,
    344              0x41, 0xda, 0xa6, 0xc8, 0xf8, 0xd8, 0xb0, 0xb4, 0xb8, 0x82, 0xa8, 0x92, 0xf5, 0x2c, 0x54, 0x88,
    345              0x98, 0xf1, 0x35, 0xd9, 0xf4, 0x18, 0xd8, 0xf1, 0xa2, 0xd0, 0xf8, 0xf9, 0xa8, 0x84, 0xd9, 0xc7,
    346              0xdf, 0xf8, 0xf8, 0x83, 0xc5, 0xda, 0xdf, 0x69, 0xdf, 0x83, 0xc1, 0xd8, 0xf4, 0x01, 0x14, 0xf1,
    347              0xa8, 0x82, 0x4e, 0xa8, 0x84, 0xf3, 0x11, 0xd1, 0x82, 0xf5, 0xd9, 0x92, 0x28, 0x97, 0x88, 0xf1,
    348              0x09, 0xf4, 0x1c, 0x1c, 0xd8, 0x84, 0xa8, 0xf3, 0xc0, 0xf9, 0xd1, 0xd9, 0x97, 0x82, 0xf1, 0x29,
    349              0xf4, 0x0d, 0xd8, 0xf3, 0xf9, 0xf9, 0xd1, 0xd9, 0x82, 0xf4, 0xc2, 0x03, 0xd8, 0xde, 0xdf, 0x1a,
    350              0xd8, 0xf1, 0xa2, 0xfa, 0xf9, 0xa8, 0x84, 0x98, 0xd9, 0xc7, 0xdf, 0xf8, 0xf8, 0xf8, 0x83, 0xc7,
    351              0xda, 0xdf, 0x69, 0xdf, 0xf8, 0x83, 0xc3, 0xd8, 0xf4, 0x01, 0x14, 0xf1, 0x98, 0xa8, 0x82, 0x2e,
    352              0xa8, 0x84, 0xf3, 0x11, 0xd1, 0x82, 0xf5, 0xd9, 0x92, 0x50, 0x97, 0x88, 0xf1, 0x09, 0xf4, 0x1c,
    353              0xd8, 0x84, 0xa8, 0xf3, 0xc0, 0xf8, 0xf9, 0xd1, 0xd9, 0x97, 0x82, 0xf1, 0x49, 0xf4, 0x0d, 0xd8,
    354              0xf3, 0xf9, 0xf9, 0xd1, 0xd9, 0x82, 0xf4, 0xc4, 0x03, 0xd8, 0xde, 0xdf, 0xd8, 0xf1, 0xad, 0x88,
    355              0x98, 0xcc, 0xa8, 0x09, 0xf9, 0xd9, 0x82, 0x92, 0xa8, 0xf5, 0x7c, 0xf1, 0x88, 0x3a, 0xcf, 0x94,
    356              0x4a, 0x6e, 0x98, 0xdb, 0x69, 0x31, 0xda, 0xad, 0xf2, 0xde, 0xf9, 0xd8, 0x87, 0x95, 0xa8, 0xf2,
    357              0x21, 0xd1, 0xda, 0xa5, 0xf9, 0xf4, 0x17, 0xd9, 0xf1, 0xae, 0x8e, 0xd0, 0xc0, 0xc3, 0xae, 0x82,
    358              /* bank # 6 */
    359              0xc6, 0x84, 0xc3, 0xa8, 0x85, 0x95, 0xc8, 0xa5, 0x88, 0xf2, 0xc0, 0xf1, 0xf4, 0x01, 0x0e, 0xf1,
    360              0x8e, 0x9e, 0xa8, 0xc6, 0x3e, 0x56, 0xf5, 0x54, 0xf1, 0x88, 0x72, 0xf4, 0x01, 0x15, 0xf1, 0x98,
    361              0x45, 0x85, 0x6e, 0xf5, 0x8e, 0x9e, 0x04, 0x88, 0xf1, 0x42, 0x98, 0x5a, 0x8e, 0x9e, 0x06, 0x88,
    362              0x69, 0xf4, 0x01, 0x1c, 0xf1, 0x98, 0x1e, 0x11, 0x08, 0xd0, 0xf5, 0x04, 0xf1, 0x1e, 0x97, 0x02,
    363              0x02, 0x98, 0x36, 0x25, 0xdb, 0xf9, 0xd9, 0x85, 0xa5, 0xf3, 0xc1, 0xda, 0x85, 0xa5, 0xf3, 0xdf,
    364              0xd8, 0x85, 0x95, 0xa8, 0xf3, 0x09, 0xda, 0xa5, 0xfa, 0xd8, 0x82, 0x92, 0xa8, 0xf5, 0x78, 0xf1,
    365              0x88, 0x1a, 0x84, 0x9f, 0x26, 0x88, 0x98, 0x21, 0xda, 0xf4, 0x1d, 0xf3, 0xd8, 0x87, 0x9f, 0x39,
    366              0xd1, 0xaf, 0xd9, 0xdf, 0xdf, 0xfb, 0xf9, 0xf4, 0x0c, 0xf3, 0xd8, 0xfa, 0xd0, 0xf8, 0xda, 0xf9,
    367              0xf9, 0xd0, 0xdf, 0xd9, 0xf9, 0xd8, 0xf4, 0x0b, 0xd8, 0xf3, 0x87, 0x9f, 0x39, 0xd1, 0xaf, 0xd9,
    368              0xdf, 0xdf, 0xf4, 0x1d, 0xf3, 0xd8, 0xfa, 0xfc, 0xa8, 0x69, 0xf9, 0xf9, 0xaf, 0xd0, 0xda, 0xde,
    369              0xfa, 0xd9, 0xf8, 0x8f, 0x9f, 0xa8, 0xf1, 0xcc, 0xf3, 0x98, 0xdb, 0x45, 0xd9, 0xaf, 0xdf, 0xd0,
    370              0xf8, 0xd8, 0xf1, 0x8f, 0x9f, 0xa8, 0xca, 0xf3, 0x88, 0x09, 0xda, 0xaf, 0x8f, 0xcb, 0xf8, 0xd8,
    371              0xf2, 0xad, 0x97, 0x8d, 0x0c, 0xd9, 0xa5, 0xdf, 0xf9, 0xba, 0xa6, 0xf3, 0xfa, 0xf4, 0x12, 0xf2,
    372              0xd8, 0x95, 0x0d, 0xd1, 0xd9, 0xba, 0xa6, 0xf3, 0xfa, 0xda, 0xa5, 0xf2, 0xc1, 0xba, 0xa6, 0xf3,
    373              0xdf, 0xd8, 0xf1, 0xba, 0xb2, 0xb6, 0x86, 0x96, 0xa6, 0xd0, 0xca, 0xf3, 0x49, 0xda, 0xa6, 0xcb,
    374              0xf8, 0xd8, 0xb0, 0xb4, 0xb8, 0xd8, 0xad, 0x84, 0xf2, 0xc0, 0xdf, 0xf1, 0x8f, 0xcb, 0xc3, 0xa8,
    375              /* bank # 7 */
    376              0xb2, 0xb6, 0x86, 0x96, 0xc8, 0xc1, 0xcb, 0xc3, 0xf3, 0xb0, 0xb4, 0x88, 0x98, 0xa8, 0x21, 0xdb,
    377              0x71, 0x8d, 0x9d, 0x71, 0x85, 0x95, 0x21, 0xd9, 0xad, 0xf2, 0xfa, 0xd8, 0x85, 0x97, 0xa8, 0x28,
    378              0xd9, 0xf4, 0x08, 0xd8, 0xf2, 0x8d, 0x29, 0xda, 0xf4, 0x05, 0xd9, 0xf2, 0x85, 0xa4, 0xc2, 0xf2,
    379              0xd8, 0xa8, 0x8d, 0x94, 0x01, 0xd1, 0xd9, 0xf4, 0x11, 0xf2, 0xd8, 0x87, 0x21, 0xd8, 0xf4, 0x0a,
    380              0xd8, 0xf2, 0x84, 0x98, 0xa8, 0xc8, 0x01, 0xd1, 0xd9, 0xf4, 0x11, 0xd8, 0xf3, 0xa4, 0xc8, 0xbb,
    381              0xaf, 0xd0, 0xf2, 0xde, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xd8, 0xf1, 0xb8, 0xf6,
    382              0xb5, 0xb9, 0xb0, 0x8a, 0x95, 0xa3, 0xde, 0x3c, 0xa3, 0xd9, 0xf8, 0xd8, 0x5c, 0xa3, 0xd9, 0xf8,
    383              0xd8, 0x7c, 0xa3, 0xd9, 0xf8, 0xd8, 0xf8, 0xf9, 0xd1, 0xa5, 0xd9, 0xdf, 0xda, 0xfa, 0xd8, 0xb1,
    384              0x85, 0x30, 0xf7, 0xd9, 0xde, 0xd8, 0xf8, 0x30, 0xad, 0xda, 0xde, 0xd8, 0xf2, 0xb4, 0x8c, 0x99,
    385              0xa3, 0x2d, 0x55, 0x7d, 0xa0, 0x83, 0xdf, 0xdf, 0xdf, 0xb5, 0x91, 0xa0, 0xf6, 0x29, 0xd9, 0xfb,
    386              0xd8, 0xa0, 0xfc, 0x29, 0xd9, 0xfa, 0xd8, 0xa0, 0xd0, 0x51, 0xd9, 0xf8, 0xd8, 0xfc, 0x51, 0xd9,
    387              0xf9, 0xd8, 0x79, 0xd9, 0xfb, 0xd8, 0xa0, 0xd0, 0xfc, 0x79, 0xd9, 0xfa, 0xd8, 0xa1, 0xf9, 0xf9,
    388              0xf9, 0xf9, 0xf9, 0xa0, 0xda, 0xdf, 0xdf, 0xdf, 0xd8, 0xa1, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xac,
    389              0xde, 0xf8, 0xad, 0xde, 0x83, 0x93, 0xac, 0x2c, 0x54, 0x7c, 0xf1, 0xa8, 0xdf, 0xdf, 0xdf, 0xf6,
    390              0x9d, 0x2c, 0xda, 0xa0, 0xdf, 0xd9, 0xfa, 0xdb, 0x2d, 0xf8, 0xd8, 0xa8, 0x50, 0xda, 0xa0, 0xd0,
    391              0xde, 0xd9, 0xd0, 0xf8, 0xf8, 0xf8, 0xdb, 0x55, 0xf8, 0xd8, 0xa8, 0x78, 0xda, 0xa0, 0xd0, 0xdf,
    392              /* bank # 8 */
    393              0xd9, 0xd0, 0xfa, 0xf8, 0xf8, 0xf8, 0xf8, 0xdb, 0x7d, 0xf8, 0xd8, 0x9c, 0xa8, 0x8c, 0xf5, 0x30,
    394              0xdb, 0x38, 0xd9, 0xd0, 0xde, 0xdf, 0xa0, 0xd0, 0xde, 0xdf, 0xd8, 0xa8, 0x48, 0xdb, 0x58, 0xd9,
    395              0xdf, 0xd0, 0xde, 0xa0, 0xdf, 0xd0, 0xde, 0xd8, 0xa8, 0x68, 0xdb, 0x70, 0xd9, 0xdf, 0xdf, 0xa0,
    396              0xdf, 0xdf, 0xd8, 0xf1, 0xa8, 0x88, 0x90, 0x2c, 0x54, 0x7c, 0x98, 0xa8, 0xd0, 0x5c, 0x38, 0xd1,
    397              0xda, 0xf2, 0xae, 0x8c, 0xdf, 0xf9, 0xd8, 0xb0, 0x87, 0xa8, 0xc1, 0xc1, 0xb1, 0x88, 0xa8, 0xc6,
    398              0xf9, 0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xa8,
    399              0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xf7, 0x8d, 0x9d, 0xad, 0xf8, 0x18, 0xda,
    400              0xf2, 0xae, 0xdf, 0xd8, 0xf7, 0xad, 0xfa, 0x30, 0xd9, 0xa4, 0xde, 0xf9, 0xd8, 0xf2, 0xae, 0xde,
    401              0xfa, 0xf9, 0x83, 0xa7, 0xd9, 0xc3, 0xc5, 0xc7, 0xf1, 0x88, 0x9b, 0xa7, 0x7a, 0xad, 0xf7, 0xde,
    402              0xdf, 0xa4, 0xf8, 0x84, 0x94, 0x08, 0xa7, 0x97, 0xf3, 0x00, 0xae, 0xf2, 0x98, 0x19, 0xa4, 0x88,
    403              0xc6, 0xa3, 0x94, 0x88, 0xf6, 0x32, 0xdf, 0xf2, 0x83, 0x93, 0xdb, 0x09, 0xd9, 0xf2, 0xaa, 0xdf,
    404              0xd8, 0xd8, 0xae, 0xf8, 0xf9, 0xd1, 0xda, 0xf3, 0xa4, 0xde, 0xa7, 0xf1, 0x88, 0x9b, 0x7a, 0xd8,
    405              0xf3, 0x84, 0x94, 0xae, 0x19, 0xf9, 0xda, 0xaa, 0xf1, 0xdf, 0xd8, 0xa8, 0x81, 0xc0, 0xc3, 0xc5,
    406              0xc7, 0xa3, 0x92, 0x83, 0xf6, 0x28, 0xad, 0xde, 0xd9, 0xf8, 0xd8, 0xa3, 0x50, 0xad, 0xd9, 0xf8,
    407              0xd8, 0xa3, 0x78, 0xad, 0xd9, 0xf8, 0xd8, 0xf8, 0xf9, 0xd1, 0xa1, 0xda, 0xde, 0xc3, 0xc5, 0xc7,
    408              0xd8, 0xa1, 0x81, 0x94, 0xf8, 0x18, 0xf2, 0xb0, 0x89, 0xac, 0xc3, 0xc5, 0xc7, 0xf1, 0xd8, 0xb8,
    409              /* bank # 9 */
    410              0xb4, 0xb0, 0x97, 0x86, 0xa8, 0x31, 0x9b, 0x06, 0x99, 0x07, 0xab, 0x97, 0x28, 0x88, 0x9b, 0xf0,
    411              0x0c, 0x20, 0x14, 0x40, 0xb0, 0xb4, 0xb8, 0xf0, 0xa8, 0x8a, 0x9a, 0x28, 0x50, 0x78, 0xb7, 0x9b,
    412              0xa8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31, 0xf1, 0xbb, 0xab,
    413              0x88, 0x00, 0x2c, 0x54, 0x7c, 0xf0, 0xb3, 0x8b, 0xb8, 0xa8, 0x04, 0x28, 0x50, 0x78, 0xf1, 0xb0,
    414              0x88, 0xb4, 0x97, 0x26, 0xa8, 0x59, 0x98, 0xbb, 0xab, 0xb3, 0x8b, 0x02, 0x26, 0x46, 0x66, 0xb0,
    415              0xb8, 0xf0, 0x8a, 0x9c, 0xa8, 0x29, 0x51, 0x79, 0x8b, 0x29, 0x51, 0x79, 0x8a, 0x24, 0x70, 0x59,
    416              0x8b, 0x20, 0x58, 0x71, 0x8a, 0x44, 0x69, 0x38, 0x8b, 0x39, 0x40, 0x68, 0x8a, 0x64, 0x48, 0x31,
    417              0x8b, 0x30, 0x49, 0x60, 0x88, 0xf1, 0xac, 0x00, 0x2c, 0x54, 0x7c, 0xf0, 0x8c, 0xa8, 0x04, 0x28,
    418              0x50, 0x78, 0xf1, 0x88, 0x97, 0x26, 0xa8, 0x59, 0x98, 0xac, 0x8c, 0x02, 0x26, 0x46, 0x66, 0xf0,
    419              0x89, 0x9c, 0xa8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31, 0xa9,
    420              0x88, 0x09, 0x20, 0x59, 0x70, 0xab, 0x11, 0x38, 0x40, 0x69, 0xa8, 0x19, 0x31, 0x48, 0x60, 0x8c,
    421              0xa8, 0x3c, 0x41, 0x5c, 0x20, 0x7c, 0x00, 0xf1, 0x87, 0x98, 0x19, 0x86, 0xa8, 0x6e, 0x76, 0x7e,
    422              0xa9, 0x99, 0x88, 0x2d, 0x55, 0x7d, 0xd8, 0xb1, 0xb5, 0xb9, 0xa3, 0xdf, 0xdf, 0xdf, 0xae, 0xd0,
    423              0xdf, 0xaa, 0xd0, 0xde, 0xf2, 0xab, 0xf8, 0xf9, 0xd9, 0xb0, 0x87, 0xc4, 0xaa, 0xf1, 0xdf, 0xdf,
    424              0xbb, 0xaf, 0xdf, 0xdf, 0xb9, 0xd8, 0xb1, 0xf1, 0xa3, 0x97, 0x8e, 0x60, 0xdf, 0xb0, 0x84, 0xf2,
    425              0xc8, 0xf8, 0xf9, 0xd9, 0xde, 0xd8, 0x93, 0x85, 0xf1, 0x4a, 0xb1, 0x83, 0xa3, 0x08, 0xb5, 0x83,
    426              /* bank # 10 */
    427              0x9a, 0x08, 0x10, 0xb7, 0x9f, 0x10, 0xd8, 0xf1, 0xb0, 0xba, 0xae, 0xb0, 0x8a, 0xc2, 0xb2, 0xb6,
    428              0x8e, 0x9e, 0xf1, 0xfb, 0xd9, 0xf4, 0x1d, 0xd8, 0xf9, 0xd9, 0x0c, 0xf1, 0xd8, 0xf8, 0xf8, 0xad,
    429              0x61, 0xd9, 0xae, 0xfb, 0xd8, 0xf4, 0x0c, 0xf1, 0xd8, 0xf8, 0xf8, 0xad, 0x19, 0xd9, 0xae, 0xfb,
    430              0xdf, 0xd8, 0xf4, 0x16, 0xf1, 0xd8, 0xf8, 0xad, 0x8d, 0x61, 0xd9, 0xf4, 0xf4, 0xac, 0xf5, 0x9c,
    431              0x9c, 0x8d, 0xdf, 0x2b, 0xba, 0xb6, 0xae, 0xfa, 0xf8, 0xf4, 0x0b, 0xd8, 0xf1, 0xae, 0xd0, 0xf8,
    432              0xad, 0x51, 0xda, 0xae, 0xfa, 0xf8, 0xf1, 0xd8, 0xb9, 0xb1, 0xb6, 0xa3, 0x83, 0x9c, 0x08, 0xb9,
    433              0xb1, 0x83, 0x9a, 0xb5, 0xaa, 0xc0, 0xfd, 0x30, 0x83, 0xb7, 0x9f, 0x10, 0xb5, 0x8b, 0x93, 0xf2,
    434              0x02, 0x02, 0xd1, 0xab, 0xda, 0xde, 0xd8, 0xf1, 0xb0, 0x80, 0xba, 0xab, 0xc0, 0xc3, 0xb2, 0x84,
    435              0xc1, 0xc3, 0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9, 0xab, 0xde, 0xb0,
    436              0x87, 0x9c, 0xb9, 0xa3, 0xdd, 0xf1, 0xb3, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0xb0, 0x87, 0xa3, 0xa3,
    437              0xa3, 0xa3, 0xb2, 0x8b, 0xb6, 0x9b, 0xf2, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
    438              0xa3, 0xf1, 0xb0, 0x87, 0xb5, 0x9a, 0xa3, 0xf3, 0x9b, 0xa3, 0xa3, 0xdc, 0xba, 0xac, 0xdf, 0xb9,
    439              0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
    440              0xd8, 0xd8, 0xd8, 0xbb, 0xb3, 0xb7, 0xf1, 0xaa, 0xf9, 0xda, 0xff, 0xd9, 0x80, 0x9a, 0xaa, 0x28,
    441              0xb4, 0x80, 0x98, 0xa7, 0x20, 0xb7, 0x97, 0x87, 0xa8, 0x66, 0x88, 0xf0, 0x79, 0x51, 0xf1, 0x90,
    442              0x2c, 0x87, 0x0c, 0xa7, 0x81, 0x97, 0x62, 0x93, 0xf0, 0x71, 0x71, 0x60, 0x85, 0x94, 0x01, 0x29,
    443              /* bank # 11 */
    444              0x51, 0x79, 0x90, 0xa5, 0xf1, 0x28, 0x4c, 0x6c, 0x87, 0x0c, 0x95, 0x18, 0x85, 0x78, 0xa3, 0x83,
    445              0x90, 0x28, 0x4c, 0x6c, 0x88, 0x6c, 0xd8, 0xf3, 0xa2, 0x82, 0x00, 0xf2, 0x10, 0xa8, 0x92, 0x19,
    446              0x80, 0xa2, 0xf2, 0xd9, 0x26, 0xd8, 0xf1, 0x88, 0xa8, 0x4d, 0xd9, 0x48, 0xd8, 0x96, 0xa8, 0x39,
    447              0x80, 0xd9, 0x3c, 0xd8, 0x95, 0x80, 0xa8, 0x39, 0xa6, 0x86, 0x98, 0xd9, 0x2c, 0xda, 0x87, 0xa7,
    448              0x2c, 0xd8, 0xa8, 0x89, 0x95, 0x19, 0xa9, 0x80, 0xd9, 0x38, 0xd8, 0xa8, 0x89, 0x39, 0xa9, 0x80,
    449              0xda, 0x3c, 0xd8, 0xa8, 0x2e, 0xa8, 0x39, 0x90, 0xd9, 0x0c, 0xd8, 0xa8, 0x95, 0x31, 0x98, 0xd9,
    450              0x0c, 0xd8, 0xa8, 0x09, 0xd9, 0xff, 0xd8, 0x01, 0xda, 0xff, 0xd8, 0x95, 0x39, 0xa9, 0xda, 0x26,
    451              0xff, 0xd8, 0x90, 0xa8, 0x0d, 0x89, 0x99, 0xa8, 0x10, 0x80, 0x98, 0x21, 0xda, 0x2e, 0xd8, 0x89,
    452              0x99, 0xa8, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8, 0x86, 0x96, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8,
    453              0x87, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8, 0x82, 0x92, 0xf3, 0x41, 0x80, 0xf1, 0xd9, 0x2e, 0xd8,
    454              0xa8, 0x82, 0xf3, 0x19, 0x80, 0xf1, 0xd9, 0x2e, 0xd8, 0x82, 0xac, 0xf3, 0xc0, 0xa2, 0x80, 0x22,
    455              0xf1, 0xa6, 0x2e, 0xa7, 0x2e, 0xa9, 0x22, 0x98, 0xa8, 0x29, 0xda, 0xac, 0xde, 0xff, 0xd8, 0xa2,
    456              0xf2, 0x2a, 0xf1, 0xa9, 0x2e, 0x82, 0x92, 0xa8, 0xf2, 0x31, 0x80, 0xa6, 0x96, 0xf1, 0xd9, 0x00,
    457              0xac, 0x8c, 0x9c, 0x0c, 0x30, 0xac, 0xde, 0xd0, 0xde, 0xff, 0xd8, 0x8c, 0x9c, 0xac, 0xd0, 0x10,
    458              0xac, 0xde, 0x80, 0x92, 0xa2, 0xf2, 0x4c, 0x82, 0xa8, 0xf1, 0xca, 0xf2, 0x35, 0xf1, 0x96, 0x88,
    459              0xa6, 0xd9, 0x00, 0xd8, 0xf1, 0xff
    460          };
    461          
    462          static const unsigned short sStartAddress = 0x0400;
    463          
    464          /* END OF SECTION COPIED FROM dmpDefaultMPU6050.c */
    465          
    466          #define INT_SRC_TAP             (0x01)
    467          #define INT_SRC_ANDROID_ORIENT  (0x08)
    468          
    469          #define DMP_FEATURE_SEND_ANY_GYRO   (DMP_FEATURE_SEND_RAW_GYRO | \
    470                                               DMP_FEATURE_SEND_CAL_GYRO)
    471          
    472          #define MAX_PACKET_LENGTH   (32)
    473          
    474          #define DMP_SAMPLE_RATE     (200)
    475          #define GYRO_SF             (46850825LL * 200 / DMP_SAMPLE_RATE)
    476          
    477          #define FIFO_CORRUPTION_CHECK
    478          #ifdef FIFO_CORRUPTION_CHECK
    479          #define QUAT_ERROR_THRESH       (1L<<24)
    480          #define QUAT_MAG_SQ_NORMALIZED  (1L<<28)
    481          #define QUAT_MAG_SQ_MIN         (QUAT_MAG_SQ_NORMALIZED - QUAT_ERROR_THRESH)
    482          #define QUAT_MAG_SQ_MAX         (QUAT_MAG_SQ_NORMALIZED + QUAT_ERROR_THRESH)
    483          #endif
    484          
    485          struct dmp_s {
    486              void (*tap_cb)(unsigned char count, unsigned char direction);
    487              void (*android_orient_cb)(unsigned char orientation);
    488              unsigned short orient;
    489              unsigned short feature_mask;
    490              unsigned short fifo_rate;
    491              unsigned char packet_length;
    492          };
    493          
    494          //static struct dmp_s dmp = {
    495          //    .tap_cb = NULL,
    496          //    .android_orient_cb = NULL,
    497          //    .orient = 0,
    498          //    .feature_mask = 0,
    499          //    .fifo_rate = 0,
    500          //    .packet_length = 0
    501          //};

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    502          static struct dmp_s dmp={
   \                     dmp:
   \   000000                DS 11
   \   00000B                REQUIRE __INIT_XDATA_Z
    503            NULL,
    504            NULL,
    505            0,
    506            0,
    507            0,
    508            0
    509          };
    510          /**
    511           *  @brief  Load the DMP with this image.
    512           *  @return 0 if successful.
    513           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    514          int dmp_load_motion_driver_firmware(void)
   \                     dmp_load_motion_driver_firmware:
    515          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    516              return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
    517                  DMP_SAMPLE_RATE);
   \   000005                ; Setup parameters for call to function mpu_load_firmware
   \   000005   75..C8       MOV     ?V0 + 0,#-0x38
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..00       MOV     ?V0 + 0,#0x0
   \   000013   75..04       MOV     ?V0 + 1,#0x4
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C..         MOV     R4,#dmp_memory & 0xff
   \   00001D   7D..         MOV     R5,#(dmp_memory >> 8) & 0xff
   \   00001F   7AF6         MOV     R2,#-0xa
   \   000021   7B0B         MOV     R3,#0xb
   \   000023   12....       LCALL   ??mpu_load_firmware?relay
   \   000026   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    518          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   7404         MOV     A,#0x4
   \   000002                REQUIRE ??Subroutine45_0
   \   000002                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    519          
    520          /**
    521           *  @brief      Push gyro and accel orientation to the DMP.
    522           *  The orientation is represented here as the output of
    523           *  @e inv_orientation_matrix_to_scalar.
    524           *  @param[in]  orient  Gyro and accel orientation in body frame.
    525           *  @return     0 if successful.
    526           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    527          int dmp_set_orientation(unsigned short orient)
   \                     dmp_set_orientation:
    528          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    529              unsigned char gyro_regs[3], accel_regs[3];
    530              const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
   \   00000E   7409         MOV     A,#0x9
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   AC82         MOV     R4,DPL
   \   000015   AD83         MOV     R5,DPH
   \   000017   7583..       MOV     DPH,#(`?<Constant {76, 205, 108}>` >> 8) & 0xff
   \   00001A   7582..       MOV     DPL,#`?<Constant {76, 205, 108}>` & 0xff
   \   00001D   7403         MOV     A,#0x3
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    531              const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
   \   000022   7406         MOV     A,#0x6
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   AC82         MOV     R4,DPL
   \   000029   AD83         MOV     R5,DPH
   \   00002B   7583..       MOV     DPH,#(`?<Constant {12, 201, 44}>` >> 8) & 0xff
   \   00002E   7582..       MOV     DPL,#`?<Constant {12, 201, 44}>` & 0xff
   \   000031   7403         MOV     A,#0x3
   \   000033   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    532              const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
   \   000036   740F         MOV     A,#0xf
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   AC82         MOV     R4,DPL
   \   00003D   AD83         MOV     R5,DPH
   \   00003F   7583..       MOV     DPH,#(`?<Constant {54, 86, 118}>` >> 8) & 0xff
   \   000042   7582..       MOV     DPL,#`?<Constant {54, 86, 118}>` & 0xff
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    533              const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
   \   00004A   740C         MOV     A,#0xc
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   AC82         MOV     R4,DPL
   \   000051   AD83         MOV     R5,DPH
   \   000053   7583..       MOV     DPH,#(`?<Constant {38, 70, 102}>` >> 8) & 0xff
   \   000056   7582..       MOV     DPL,#`?<Constant {38, 70, 102}>` & 0xff
   \   000059   7403         MOV     A,#0x3
   \   00005B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00005E   EE           MOV     A,R6
   \   00005F   5403         ANL     A,#0x3
   \   000061   FA           MOV     R2,A
   \   000062   7409         MOV     A,#0x9
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00006A   C0E0         PUSH    A
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   D0E0         POP     A
   \   000073   F0           MOVX    @DPTR,A
    534          
    535              gyro_regs[0] = gyro_axes[orient & 3];
    536              gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
   \   000074   EE           MOV     A,R6
   \   000075   13           RRC     A
   \   000076   13           RRC     A
   \   000077   13           RRC     A
   \   000078   541F         ANL     A,#0x1f
   \   00007A   5403         ANL     A,#0x3
   \   00007C   F8           MOV     R0,A
   \   00007D   7409         MOV     A,#0x9
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E582         MOV     A,DPL
   \   000084   28           ADD     A,R0
   \   000085   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000088   C0E0         PUSH    A
   \   00008A   7404         MOV     A,#0x4
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   D0E0         POP     A
   \   000091   F0           MOVX    @DPTR,A
    537              gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
   \   000092   EE           MOV     A,R6
   \   000093   C4           SWAP    A
   \   000094   13           RRC     A
   \   000095   13           RRC     A
   \   000096   5403         ANL     A,#0x3
   \   000098   FC           MOV     R4,A
   \   000099   7409         MOV     A,#0x9
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   E582         MOV     A,DPL
   \   0000A0   2C           ADD     A,R4
   \   0000A1   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000A4   C0E0         PUSH    A
   \   0000A6   7405         MOV     A,#0x5
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   D0E0         POP     A
   \   0000AD   F0           MOVX    @DPTR,A
    538              accel_regs[0] = accel_axes[orient & 3];
   \   0000AE   7406         MOV     A,#0x6
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000B6   85..82       MOV     DPL,?XSP + 0
   \   0000B9   85..83       MOV     DPH,?XSP + 1
   \   0000BC   F0           MOVX    @DPTR,A
    539              accel_regs[1] = accel_axes[(orient >> 3) & 3];
   \   0000BD   7406         MOV     A,#0x6
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   E582         MOV     A,DPL
   \   0000C4   28           ADD     A,R0
   \   0000C5   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000C8   C0E0         PUSH    A
   \   0000CA   7401         MOV     A,#0x1
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   D0E0         POP     A
   \   0000D1   F0           MOVX    @DPTR,A
    540              accel_regs[2] = accel_axes[(orient >> 6) & 3];
   \   0000D2   7406         MOV     A,#0x6
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   E582         MOV     A,DPL
   \   0000D9   2C           ADD     A,R4
   \   0000DA   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000DD   C0E0         PUSH    A
   \   0000DF   7402         MOV     A,#0x2
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   D0E0         POP     A
   \   0000E6   F0           MOVX    @DPTR,A
    541          
    542              /* Chip-to-body, axes only. */
    543              if (mpu_write_mem(FCFG_1, 3, gyro_regs))
   \   0000E7                ; Setup parameters for call to function mpu_write_mem
   \   0000E7   7403         MOV     A,#0x3
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   8582..       MOV     ?V0 + 0,DPL
   \   0000EF   8583..       MOV     ?V0 + 1,DPH
   \   0000F2   78..         MOV     R0,#?V0 + 0
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F7   7C03         MOV     R4,#0x3
   \   0000F9   7D00         MOV     R5,#0x0
   \   0000FB   7A26         MOV     R2,#0x26
   \   0000FD   7B04         MOV     R3,#0x4
   \   0000FF   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   8B..         MOV     ?V0 + 1,R3
   \   000107   EA           MOV     A,R2
   \   000108   45..         ORL     A,?V0 + 1
   \   00010A   6007         JZ      ??dmp_set_orientation_0
    544                  return -1;
   \                     ??dmp_set_orientation_1:
   \   00010C   7AFF         MOV     R2,#-0x1
   \   00010E   7BFF         MOV     R3,#-0x1
   \   000110   02....       LJMP    ??CrossCallReturnLabel_48 & 0xFFFF
    545              if (mpu_write_mem(FCFG_2, 3, accel_regs))
   \                     ??dmp_set_orientation_0:
   \   000113                ; Setup parameters for call to function mpu_write_mem
   \   000113   85..82       MOV     DPL,?XSP + 0
   \   000116   85..83       MOV     DPH,?XSP + 1
   \   000119   8582..       MOV     ?V0 + 0,DPL
   \   00011C   8583..       MOV     ?V0 + 1,DPH
   \   00011F   78..         MOV     R0,#?V0 + 0
   \   000121   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000124   7C03         MOV     R4,#0x3
   \   000126   7D00         MOV     R5,#0x0
   \   000128   7A2A         MOV     R2,#0x2a
   \   00012A   7B04         MOV     R3,#0x4
   \   00012C   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00012F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000132   8B..         MOV     ?V0 + 1,R3
   \   000134   EA           MOV     A,R2
   \   000135   45..         ORL     A,?V0 + 1
   \   000137   70D3         JNZ     ??dmp_set_orientation_1
    546                  return -1;
    547          
    548              memcpy(gyro_regs, gyro_sign, 3);
   \   000139                ; Setup parameters for call to function memcpy
   \   000139   75..03       MOV     ?V0 + 0,#0x3
   \   00013C   75..00       MOV     ?V0 + 1,#0x0
   \   00013F   78..         MOV     R0,#?V0 + 0
   \   000141   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000144   7411         MOV     A,#0x11
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   AC82         MOV     R4,DPL
   \   00014B   AD83         MOV     R5,DPH
   \   00014D   7405         MOV     A,#0x5
   \   00014F   12....       LCALL   ?XSTACK_DISP0_8
   \   000152   AA82         MOV     R2,DPL
   \   000154   AB83         MOV     R3,DPH
   \   000156   12....       LCALL   ??memcpy?relay
   \   000159   7402         MOV     A,#0x2
   \   00015B   12....       LCALL   ?DEALLOC_XSTACK8
    549              memcpy(accel_regs, accel_sign, 3);
   \   00015E                ; Setup parameters for call to function memcpy
   \   00015E   78..         MOV     R0,#?V0 + 0
   \   000160   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000163   740E         MOV     A,#0xe
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   AC82         MOV     R4,DPL
   \   00016A   AD83         MOV     R5,DPH
   \   00016C   7402         MOV     A,#0x2
   \   00016E   12....       LCALL   ?XSTACK_DISP0_8
   \   000171   AA82         MOV     R2,DPL
   \   000173   AB83         MOV     R3,DPH
   \   000175   12....       LCALL   ??memcpy?relay
   \   000178   7402         MOV     A,#0x2
   \   00017A   12....       LCALL   ?DEALLOC_XSTACK8
    550              if (orient & 4) {
   \   00017D   EE           MOV     A,R6
   \   00017E   5404         ANL     A,#0x4
   \   000180   6011         JZ      ??CrossCallReturnLabel_33
    551                  gyro_regs[0] |= 1;
   \   000182   7403         MOV     A,#0x3
   \   000184   12....       LCALL   ?XSTACK_DISP0_8
   \   000187   12....       LCALL   ?Subroutine24 & 0xFFFF
    552                  accel_regs[0] |= 1;
   \                     ??CrossCallReturnLabel_32:
   \   00018A   85..82       MOV     DPL,?XSP + 0
   \   00018D   85..83       MOV     DPH,?XSP + 1
   \   000190   12....       LCALL   ?Subroutine24 & 0xFFFF
    553              }
    554              if (orient & 0x20) {
   \                     ??CrossCallReturnLabel_33:
   \   000193   EE           MOV     A,R6
   \   000194   5420         ANL     A,#0x20
   \   000196   6010         JZ      ??CrossCallReturnLabel_35
    555                  gyro_regs[1] |= 1;
   \   000198   7404         MOV     A,#0x4
   \   00019A   12....       LCALL   ?XSTACK_DISP0_8
   \   00019D   12....       LCALL   ?Subroutine24 & 0xFFFF
    556                  accel_regs[1] |= 1;
   \                     ??CrossCallReturnLabel_34:
   \   0001A0   7401         MOV     A,#0x1
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   12....       LCALL   ?Subroutine24 & 0xFFFF
    557              }
    558              if (orient & 0x100) {
   \                     ??CrossCallReturnLabel_35:
   \   0001A8   EF           MOV     A,R7
   \   0001A9   5401         ANL     A,#0x1
   \   0001AB   6010         JZ      ??CrossCallReturnLabel_37
    559                  gyro_regs[2] |= 1;
   \   0001AD   7405         MOV     A,#0x5
   \   0001AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B2   12....       LCALL   ?Subroutine24 & 0xFFFF
    560                  accel_regs[2] |= 1;
   \                     ??CrossCallReturnLabel_36:
   \   0001B5   7402         MOV     A,#0x2
   \   0001B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BA   12....       LCALL   ?Subroutine24 & 0xFFFF
    561              }
    562          
    563              /* Chip-to-body, sign only. */
    564              if (mpu_write_mem(FCFG_3, 3, gyro_regs))
   \                     ??CrossCallReturnLabel_37:
   \   0001BD                ; Setup parameters for call to function mpu_write_mem
   \   0001BD   7403         MOV     A,#0x3
   \   0001BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C2   8582..       MOV     ?V0 + 0,DPL
   \   0001C5   8583..       MOV     ?V0 + 1,DPH
   \   0001C8   78..         MOV     R0,#?V0 + 0
   \   0001CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CD   7C03         MOV     R4,#0x3
   \   0001CF   7D00         MOV     R5,#0x0
   \   0001D1   7A40         MOV     R2,#0x40
   \   0001D3   7B04         MOV     R3,#0x4
   \   0001D5   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0001D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001DB   8B..         MOV     ?V0 + 1,R3
   \   0001DD   EA           MOV     A,R2
   \   0001DE   45..         ORL     A,?V0 + 1
   \   0001E0   6003         JZ      $+5
   \   0001E2   02....       LJMP    ??dmp_set_orientation_1 & 0xFFFF
    565                  return -1;
    566              if (mpu_write_mem(FCFG_7, 3, accel_regs))
   \   0001E5                ; Setup parameters for call to function mpu_write_mem
   \   0001E5   85..82       MOV     DPL,?XSP + 0
   \   0001E8   85..83       MOV     DPH,?XSP + 1
   \   0001EB   8582..       MOV     ?V0 + 0,DPL
   \   0001EE   8583..       MOV     ?V0 + 1,DPH
   \   0001F1   78..         MOV     R0,#?V0 + 0
   \   0001F3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F6   7C03         MOV     R4,#0x3
   \   0001F8   7D00         MOV     R5,#0x0
   \   0001FA   7A31         MOV     R2,#0x31
   \   0001FC   7B04         MOV     R3,#0x4
   \   0001FE   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000201   12....       LCALL   ?DEALLOC_XSTACK8
   \   000204   8B..         MOV     ?V0 + 1,R3
   \   000206   EA           MOV     A,R2
   \   000207   45..         ORL     A,?V0 + 1
   \   000209   6003         JZ      $+5
   \   00020B   02....       LJMP    ??dmp_set_orientation_1 & 0xFFFF
    567                  return -1;
    568              dmp.orient = orient;
   \   00020E   90....       MOV     DPTR,#dmp + 4
   \   000211   12....       LCALL   ?Subroutine31 & 0xFFFF
    569              return 0;
   \                     ??CrossCallReturnLabel_48:
   \   000214   7412         MOV     A,#0x12
   \   000216   02....       LJMP    ??Subroutine45_0 & 0xFFFF
    570          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   D2E0         SETB    0xE0 /* A   */.0
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E582         MOV     A,DPL
   \   000002   2A           ADD     A,R2
   \   000003                REQUIRE ??Subroutine41_0
   \   000003                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E583         MOV     A,DPH
   \   000004   3400         ADDC    A,#0x0
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EE           MOV     A,R6
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EF           MOV     A,R7
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL   ??mpu_write_mem?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET
    571          
    572          /**
    573           *  @brief      Push gyro biases to the DMP.
    574           *  Because the gyro integration is handled in the DMP, any gyro biases
    575           *  calculated by the MPL should be pushed down to DMP memory to remove
    576           *  3-axis quaternion drift.
    577           *  \n NOTE: If the DMP-based gyro calibration is enabled, the DMP will
    578           *  overwrite the biases written to this location once a new one is computed.
    579           *  @param[in]  bias    Gyro biases in q16.
    580           *  @return     0 if successful.
    581           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    582          int dmp_set_gyro_bias(long *bias)
   \                     dmp_set_gyro_bias:
    583          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
    584              long gyro_bias_body[3];
    585              unsigned char regs[4];
    586          
    587              gyro_bias_body[0] = bias[dmp.orient & 3];
   \   00000E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000011   12....       LCALL   ?S_SHL
   \   000014   EA           MOV     A,R2
   \   000015   25..         ADD     A,?V0 + 2
   \   000017   F582         MOV     DPL,A
   \   000019   EB           MOV     A,R3
   \   00001A   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00001D   12....       LCALL   ?XLOAD_R2345
   \   000020   7404         MOV     A,#0x4
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?XSTORE_R2345
    588              if (dmp.orient & 4)
   \   000028   EE           MOV     A,R6
   \   000029   5404         ANL     A,#0x4
   \   00002B   6019         JZ      ??dmp_set_gyro_bias_0
    589                  gyro_bias_body[0] *= -1;
   \   00002D   7404         MOV     A,#0x4
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   78..         MOV     R0,#?V0 + 4
   \   000034   12....       LCALL   ?L_MOV_X
   \   000037   78..         MOV     R0,#?V0 + 4
   \   000039   12....       LCALL   ?L_NEG
   \   00003C   7404         MOV     A,#0x4
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   78..         MOV     R0,#?V0 + 4
   \   000043   12....       LCALL   ?L_MOV_TO_X
    590              gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
   \                     ??dmp_set_gyro_bias_0:
   \   000046   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000049   12....       LCALL   ?S_SHL
   \   00004C   E5..         MOV     A,?V0 + 0
   \   00004E   25..         ADD     A,?V0 + 2
   \   000050   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000053   78..         MOV     R0,#?V0 + 4
   \   000055   12....       LCALL   ?L_MOV_X
   \   000058   7408         MOV     A,#0x8
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   78..         MOV     R0,#?V0 + 4
   \   00005F   12....       LCALL   ?L_MOV_TO_X
    591              if (dmp.orient & 0x20)
   \   000062   EE           MOV     A,R6
   \   000063   5420         ANL     A,#0x20
   \   000065   600F         JZ      ??dmp_set_gyro_bias_1
    592                  gyro_bias_body[1] *= -1;
   \   000067   78..         MOV     R0,#?V0 + 4
   \   000069   12....       LCALL   ?L_NEG
   \   00006C   7408         MOV     A,#0x8
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   12....       LCALL   ?L_MOV_TO_X
    593              gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
   \                     ??dmp_set_gyro_bias_1:
   \   000076   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000079   78..         MOV     R0,#?V0 + 0
   \   00007B   12....       LCALL   ?L_MOV_X
   \   00007E   740C         MOV     A,#0xc
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   78..         MOV     R0,#?V0 + 0
   \   000085   12....       LCALL   ?L_MOV_TO_X
    594              if (dmp.orient & 0x100)
   \   000088   EF           MOV     A,R7
   \   000089   5401         ANL     A,#0x1
   \   00008B   600F         JZ      ??dmp_set_gyro_bias_2
    595                  gyro_bias_body[2] *= -1;
   \   00008D   78..         MOV     R0,#?V0 + 0
   \   00008F   12....       LCALL   ?L_NEG
   \   000092   740C         MOV     A,#0xc
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   78..         MOV     R0,#?V0 + 0
   \   000099   12....       LCALL   ?L_MOV_TO_X
    596          //#define EMPL_NO_64BIT
    597          #ifdef EMPL_NO_64BIT
    598              gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    599              gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    600              gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
    601          #else
    602              gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
                                                                                ^
Warning[Pe061]: integer operation result is out of range
   \                     ??dmp_set_gyro_bias_2:
   \   00009C   7404         MOV     A,#0x4
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   78..         MOV     R0,#?V0 + 0
   \   0000A3   12....       LCALL   ?L_MOV_X
   \   0000A6   90....       MOV     DPTR,#__Constant_3b86e0
   \   0000A9   78..         MOV     R0,#?V0 + 4
   \   0000AB   12....       LCALL   ?L_MOV_X
   \   0000AE   78..         MOV     R0,#?V0 + 0
   \   0000B0   79..         MOV     R1,#?V0 + 4
   \   0000B2   12....       LCALL   ?L_MUL
   \   0000B5   741E         MOV     A,#0x1e
   \   0000B7   78..         MOV     R0,#?V0 + 0
   \   0000B9   12....       LCALL   ?SL_SHR
   \   0000BC   7404         MOV     A,#0x4
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   78..         MOV     R0,#?V0 + 0
   \   0000C3   12....       LCALL   ?L_MOV_TO_X
    603              gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
                                                                                ^
Warning[Pe061]: integer operation result is out of range
   \   0000C6   7408         MOV     A,#0x8
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   78..         MOV     R0,#?V0 + 8
   \   0000CD   12....       LCALL   ?L_MOV_X
   \   0000D0   90....       MOV     DPTR,#__Constant_3b86e0
   \   0000D3   78..         MOV     R0,#?V0 + 0
   \   0000D5   12....       LCALL   ?L_MOV_X
   \   0000D8   78..         MOV     R0,#?V0 + 8
   \   0000DA   79..         MOV     R1,#?V0 + 0
   \   0000DC   12....       LCALL   ?L_MUL
   \   0000DF   741E         MOV     A,#0x1e
   \   0000E1   78..         MOV     R0,#?V0 + 8
   \   0000E3   12....       LCALL   ?SL_SHR
   \   0000E6   7408         MOV     A,#0x8
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   78..         MOV     R0,#?V0 + 8
   \   0000ED   12....       LCALL   ?L_MOV_TO_X
    604              gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
                                                                                ^
Warning[Pe061]: integer operation result is out of range
   \   0000F0   740C         MOV     A,#0xc
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   78..         MOV     R0,#?V0 + 4
   \   0000F7   12....       LCALL   ?L_MOV_X
   \   0000FA   90....       MOV     DPTR,#__Constant_3b86e0
   \   0000FD   78..         MOV     R0,#?V0 + 0
   \   0000FF   12....       LCALL   ?L_MOV_X
   \   000102   78..         MOV     R0,#?V0 + 4
   \   000104   79..         MOV     R1,#?V0 + 0
   \   000106   12....       LCALL   ?L_MUL
   \   000109   741E         MOV     A,#0x1e
   \   00010B   78..         MOV     R0,#?V0 + 4
   \   00010D   12....       LCALL   ?SL_SHR
   \   000110   740C         MOV     A,#0xc
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   78..         MOV     R0,#?V0 + 4
   \   000117   12....       LCALL   ?L_MOV_TO_X
    605          #endif
    606          
    607              regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
   \   00011A   7404         MOV     A,#0x4
   \   00011C   12....       LCALL   ?XSTACK_DISP0_8
   \   00011F   78..         MOV     R0,#?V0 + 0
   \   000121   12....       LCALL   ?L_MOV_X
   \   000124   7418         MOV     A,#0x18
   \   000126   78..         MOV     R0,#?V0 + 0
   \   000128   12....       LCALL   ?SL_SHR
   \   00012B   85..82       MOV     DPL,?XSP + 0
   \   00012E   85..83       MOV     DPH,?XSP + 1
   \   000131   E5..         MOV     A,?V0 + 0
   \   000133   F0           MOVX    @DPTR,A
    608              regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
   \   000134   7404         MOV     A,#0x4
   \   000136   12....       LCALL   ?XSTACK_DISP0_8
   \   000139   78..         MOV     R0,#?V0 + 0
   \   00013B   12....       LCALL   ?L_MOV_X
   \   00013E   7410         MOV     A,#0x10
   \   000140   78..         MOV     R0,#?V0 + 0
   \   000142   12....       LCALL   ?SL_SHR
   \   000145   04           INC     A
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   E5..         MOV     A,?V0 + 0
   \   00014B   F0           MOVX    @DPTR,A
    609              regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
   \   00014C   7404         MOV     A,#0x4
   \   00014E   12....       LCALL   ?XSTACK_DISP0_8
   \   000151   78..         MOV     R0,#?V0 + 0
   \   000153   12....       LCALL   ?L_MOV_X
   \   000156   7408         MOV     A,#0x8
   \   000158   78..         MOV     R0,#?V0 + 0
   \   00015A   12....       LCALL   ?SS_SHR
   \   00015D   7402         MOV     A,#0x2
   \   00015F   12....       LCALL   ?XSTACK_DISP0_8
   \   000162   E5..         MOV     A,?V0 + 0
   \   000164   F0           MOVX    @DPTR,A
    610              regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
   \   000165   7404         MOV     A,#0x4
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   78..         MOV     R0,#?V0 + 0
   \   00016C   12....       LCALL   ?L_MOV_X
   \   00016F   7403         MOV     A,#0x3
   \   000171   12....       LCALL   ?XSTACK_DISP0_8
   \   000174   E5..         MOV     A,?V0 + 0
   \   000176   12....       LCALL   ??Subroutine46_0 & 0xFFFF
    611              if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
   \                     ??CrossCallReturnLabel_79:
   \   000179   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017C   7C04         MOV     R4,#0x4
   \   00017E   7D00         MOV     R5,#0x0
   \   000180   7AD0         MOV     R2,#-0x30
   \   000182   7B03         MOV     R3,#0x3
   \   000184   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000187   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018A   8B..         MOV     ?V0 + 1,R3
   \   00018C   EA           MOV     A,R2
   \   00018D   45..         ORL     A,?V0 + 1
   \   00018F   6007         JZ      ??dmp_set_gyro_bias_3
    612                  return -1;
   \                     ??dmp_set_gyro_bias_4:
   \   000191   7AFF         MOV     R2,#-0x1
   \   000193   7BFF         MOV     R3,#-0x1
   \   000195   02....       LJMP    ??dmp_set_gyro_bias_5 & 0xFFFF
    613          
    614              regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
   \                     ??dmp_set_gyro_bias_3:
   \   000198   85....       MOV     ?V0 + 0,?V0 + 8
   \   00019B   85....       MOV     ?V0 + 1,?V0 + 9
   \   00019E   85....       MOV     ?V0 + 2,?V0 + 10
   \   0001A1   85....       MOV     ?V0 + 3,?V0 + 11
   \   0001A4   7418         MOV     A,#0x18
   \   0001A6   78..         MOV     R0,#?V0 + 0
   \   0001A8   12....       LCALL   ?SL_SHR
   \   0001AB   85..82       MOV     DPL,?XSP + 0
   \   0001AE   85..83       MOV     DPH,?XSP + 1
   \   0001B1   12....       LCALL   ?Subroutine26 & 0xFFFF
    615              regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
   \                     ??CrossCallReturnLabel_38:
   \   0001B4   12....       LCALL   ?SL_SHR
   \   0001B7   04           INC     A
   \   0001B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BB   12....       LCALL   ?Subroutine29 & 0xFFFF
    616              regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
   \                     ??CrossCallReturnLabel_44:
   \   0001BE   12....       LCALL   ?SS_SHR
   \   0001C1   7402         MOV     A,#0x2
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   E5..         MOV     A,?V0 + 0
   \   0001C8   F0           MOVX    @DPTR,A
    617              regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
   \   0001C9   7403         MOV     A,#0x3
   \   0001CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CE   E5..         MOV     A,?V0 + 8
   \   0001D0   12....       LCALL   ??Subroutine46_0 & 0xFFFF
    618              if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
   \                     ??CrossCallReturnLabel_80:
   \   0001D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D6   7C04         MOV     R4,#0x4
   \   0001D8   7D00         MOV     R5,#0x0
   \   0001DA   7AD4         MOV     R2,#-0x2c
   \   0001DC   7B03         MOV     R3,#0x3
   \   0001DE   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0001E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E4   8B..         MOV     ?V0 + 1,R3
   \   0001E6   EA           MOV     A,R2
   \   0001E7   45..         ORL     A,?V0 + 1
   \   0001E9   70A6         JNZ     ??dmp_set_gyro_bias_4
    619                  return -1;
    620          
    621              regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
   \   0001EB   85....       MOV     ?V0 + 0,?V0 + 4
   \   0001EE   85....       MOV     ?V0 + 1,?V0 + 5
   \   0001F1   85....       MOV     ?V0 + 2,?V0 + 6
   \   0001F4   85....       MOV     ?V0 + 3,?V0 + 7
   \   0001F7   7418         MOV     A,#0x18
   \   0001F9   78..         MOV     R0,#?V0 + 0
   \   0001FB   12....       LCALL   ?SL_SHR
   \   0001FE   12....       LCALL   ?Subroutine27 & 0xFFFF
    622              regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
   \                     ??CrossCallReturnLabel_40:
   \   000201   12....       LCALL   ?SL_SHR
   \   000204   04           INC     A
   \   000205   12....       LCALL   ?XSTACK_DISP0_8
   \   000208   12....       LCALL   ?Subroutine30 & 0xFFFF
    623              regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
   \                     ??CrossCallReturnLabel_46:
   \   00020B   12....       LCALL   ?SS_SHR
   \   00020E   7402         MOV     A,#0x2
   \   000210   12....       LCALL   ?XSTACK_DISP0_8
   \   000213   E5..         MOV     A,?V0 + 0
   \   000215   F0           MOVX    @DPTR,A
    624              regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
   \   000216   7403         MOV     A,#0x3
   \   000218   12....       LCALL   ?XSTACK_DISP0_8
   \   00021B   12....       LCALL   ?Subroutine25 & 0xFFFF
    625              return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
   \                     ??CrossCallReturnLabel_76:
   \   00021E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000221   7C04         MOV     R4,#0x4
   \   000223   7D00         MOV     R5,#0x0
   \   000225   7AD8         MOV     R2,#-0x28
   \   000227   7B03         MOV     R3,#0x3
   \   000229   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00022C   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??dmp_set_gyro_bias_5:
   \   00022F   7410         MOV     A,#0x10
   \   000231   02....       LJMP    ?Subroutine1 & 0xFFFF
    626          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85....       MOV     ?V0 + 0,?V0 + 8
   \   000006   85....       MOV     ?V0 + 1,?V0 + 9
   \   000009   7408         MOV     A,#0x8
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   7410         MOV     A,#0x10
   \   000005   78..         MOV     R0,#?V0 + 0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85....       MOV     ?V0 + 0,?V0 + 8
   \   000006   85....       MOV     ?V0 + 1,?V0 + 9
   \   000009   85....       MOV     ?V0 + 2,?V0 + 10
   \   00000C   85....       MOV     ?V0 + 3,?V0 + 11
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   EE           MOV     A,R6
   \   000001   C4           SWAP    A
   \   000002   540F         ANL     A,#0xf
   \   000004   54FC         ANL     A,#0xfc
   \   000006   F8           MOV     R0,A
   \   000007   E5..         MOV     A,?V0 + 0
   \   000009   28           ADD     A,R0
   \   00000A                REQUIRE ??Subroutine42_0
   \   00000A                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine43_0
   \   000004                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EE           MOV     A,R6
   \   000001   13           RRC     A
   \   000002   13           RRC     A
   \   000003   13           RRC     A
   \   000004   541F         ANL     A,#0x1f
   \   000006   5403         ANL     A,#0x3
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   7402         MOV     A,#0x2
   \   00000C   78..         MOV     R0,#?V0 + 2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#dmp + 4
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FE           MOV     R6,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FF           MOV     R7,A
   \   000008   EE           MOV     A,R6
   \   000009   5403         ANL     A,#0x3
   \   00000B   F5..         MOV     ?V0 + 2,A
   \   00000D   75..00       MOV     ?V0 + 3,#0x0
   \   000010   7402         MOV     A,#0x2
   \   000012   78..         MOV     R0,#?V0 + 2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0C         MOV     R7,#0xc
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85....       MOV     ?V0 + 0,?V0 + 4
   \   000006   85....       MOV     ?V0 + 1,?V0 + 5
   \   000009   7408         MOV     A,#0x8
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   85....       MOV     ?V0 + 3,?V0 + 7
   \   000006   7410         MOV     A,#0x10
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002                REQUIRE ??Subroutine46_0
   \   000002                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   8582..       MOV     ?V0 + 0,DPL
   \   000006   8583..       MOV     ?V0 + 1,DPH
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E5..         MOV     A,?V0 + 0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   85....       MOV     ?V0 + 0,?V0 + 4
   \   00000C   85....       MOV     ?V0 + 1,?V0 + 5
   \   00000F   85....       MOV     ?V0 + 2,?V0 + 6
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function mpu_write_mem
   \   000001                ; Setup parameters for call to function mpu_write_mem
   \   000001                ; Setup parameters for call to function mpu_write_mem
   \   000001                ; Setup parameters for call to function mpu_write_mem
   \   000001                ; Setup parameters for call to function mpu_write_mem
   \   000001                ; Setup parameters for call to function mpu_write_mem
   \   000001                ; Setup parameters for call to function mpu_write_mem
   \   000001                ; Setup parameters for call to function mpu_write_mem
   \   000001                ; Setup parameters for call to function mpu_write_mem
   \   000001                ; Setup parameters for call to function mpu_write_mem
   \   000001                ; Setup parameters for call to function mpu_write_mem
   \   000001                ; Setup parameters for call to function mpu_write_mem
   \   000001                ; Setup parameters for call to function mpu_write_mem
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    627          
    628          /**
    629           *  @brief      Push accel biases to the DMP.
    630           *  These biases will be removed from the DMP 6-axis quaternion.
    631           *  @param[in]  bias    Accel biases in q16.
    632           *  @return     0 if successful.
    633           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    634          int dmp_set_accel_bias(long *bias)
   \                     dmp_set_accel_bias:
    635          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV     A,#-0x1a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
    636              long accel_bias_body[3];
    637              unsigned char regs[12];
    638              long long accel_sf;
    639              unsigned short accel_sens;
    640          
    641              mpu_get_accel_sens(&accel_sens);
   \   00000E                ; Setup parameters for call to function mpu_get_accel_sens
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AA82         MOV     R2,DPL
   \   000016   AB83         MOV     R3,DPH
   \   000018   12....       LCALL   ??mpu_get_accel_sens?relay
    642              accel_sf = (long long)accel_sens << 15;
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 5,A
   \   000028   E4           CLR     A
   \   000029   F5..         MOV     ?V0 + 6,A
   \   00002B   F5..         MOV     ?V0 + 7,A
   \   00002D   740F         MOV     A,#0xf
   \   00002F   78..         MOV     R0,#?V0 + 4
   \   000031   12....       LCALL   ?L_SHL
    643              //__no_operation();
    644          
    645              accel_bias_body[0] = bias[dmp.orient & 3];
   \   000034   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000037   12....       LCALL   ?S_SHL
   \   00003A   E5..         MOV     A,?V0 + 0
   \   00003C   25..         ADD     A,?V0 + 2
   \   00003E   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000041   12....       LCALL   ?XLOAD_R2345
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?XSTORE_R2345
    646              if (dmp.orient & 4)
   \   00004C   EE           MOV     A,R6
   \   00004D   5404         ANL     A,#0x4
   \   00004F   6019         JZ      ??dmp_set_accel_bias_0
    647                  accel_bias_body[0] *= -1;
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   78..         MOV     R0,#?V0 + 8
   \   000058   12....       LCALL   ?L_MOV_X
   \   00005B   78..         MOV     R0,#?V0 + 8
   \   00005D   12....       LCALL   ?L_NEG
   \   000060   7402         MOV     A,#0x2
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   78..         MOV     R0,#?V0 + 8
   \   000067   12....       LCALL   ?L_MOV_TO_X
    648              accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
   \                     ??dmp_set_accel_bias_0:
   \   00006A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00006D   12....       LCALL   ?S_SHL
   \   000070   E5..         MOV     A,?V0 + 0
   \   000072   25..         ADD     A,?V0 + 2
   \   000074   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000077   78..         MOV     R0,#?V0 + 8
   \   000079   12....       LCALL   ?L_MOV_X
   \   00007C   7406         MOV     A,#0x6
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   78..         MOV     R0,#?V0 + 8
   \   000083   12....       LCALL   ?L_MOV_TO_X
    649              if (dmp.orient & 0x20)
   \   000086   EE           MOV     A,R6
   \   000087   5420         ANL     A,#0x20
   \   000089   600F         JZ      ??dmp_set_accel_bias_1
    650                  accel_bias_body[1] *= -1;
   \   00008B   78..         MOV     R0,#?V0 + 8
   \   00008D   12....       LCALL   ?L_NEG
   \   000090   7406         MOV     A,#0x6
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   78..         MOV     R0,#?V0 + 8
   \   000097   12....       LCALL   ?L_MOV_TO_X
    651              accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
   \                     ??dmp_set_accel_bias_1:
   \   00009A   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?L_MOV_X
   \   0000A2   740A         MOV     A,#0xa
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?L_MOV_TO_X
    652              if (dmp.orient & 0x100)
   \   0000AC   EF           MOV     A,R7
   \   0000AD   5401         ANL     A,#0x1
   \   0000AF   600F         JZ      ??dmp_set_accel_bias_2
    653                  accel_bias_body[2] *= -1;
   \   0000B1   78..         MOV     R0,#?V0 + 0
   \   0000B3   12....       LCALL   ?L_NEG
   \   0000B6   740A         MOV     A,#0xa
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   78..         MOV     R0,#?V0 + 0
   \   0000BD   12....       LCALL   ?L_MOV_TO_X
    654          
    655          #ifdef EMPL_NO_64BIT
    656              accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    657              accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    658              accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
    659          #else
    660              accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
   \                     ??dmp_set_accel_bias_2:
   \   0000C0   7402         MOV     A,#0x2
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   78..         MOV     R0,#?V0 + 0
   \   0000C7   12....       LCALL   ?L_MOV_X
   \   0000CA   78..         MOV     R0,#?V0 + 0
   \   0000CC   79..         MOV     R1,#?V0 + 4
   \   0000CE   12....       LCALL   ?L_MUL
   \   0000D1   741E         MOV     A,#0x1e
   \   0000D3   78..         MOV     R0,#?V0 + 0
   \   0000D5   12....       LCALL   ?SL_SHR
   \   0000D8   7402         MOV     A,#0x2
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   78..         MOV     R0,#?V0 + 0
   \   0000DF   12....       LCALL   ?L_MOV_TO_X
    661              accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
   \   0000E2   7406         MOV     A,#0x6
   \   0000E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E7   78..         MOV     R0,#?V0 + 0
   \   0000E9   12....       LCALL   ?L_MOV_X
   \   0000EC   78..         MOV     R0,#?V0 + 0
   \   0000EE   79..         MOV     R1,#?V0 + 4
   \   0000F0   12....       LCALL   ?L_MUL
   \   0000F3   741E         MOV     A,#0x1e
   \   0000F5   78..         MOV     R0,#?V0 + 0
   \   0000F7   12....       LCALL   ?SL_SHR
   \   0000FA   7406         MOV     A,#0x6
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   78..         MOV     R0,#?V0 + 0
   \   000101   12....       LCALL   ?L_MOV_TO_X
    662              accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
   \   000104   740A         MOV     A,#0xa
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   78..         MOV     R0,#?V0 + 8
   \   00010B   12....       LCALL   ?L_MOV_X
   \   00010E   78..         MOV     R0,#?V0 + 8
   \   000110   79..         MOV     R1,#?V0 + 4
   \   000112   12....       LCALL   ?L_MUL
   \   000115   741E         MOV     A,#0x1e
   \   000117   78..         MOV     R0,#?V0 + 8
   \   000119   12....       LCALL   ?SL_SHR
   \   00011C   740A         MOV     A,#0xa
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   78..         MOV     R0,#?V0 + 8
   \   000123   12....       LCALL   ?L_MOV_TO_X
    663          #endif
    664          
    665              regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
   \   000126   7402         MOV     A,#0x2
   \   000128   12....       LCALL   ?XSTACK_DISP0_8
   \   00012B   78..         MOV     R0,#?V0 + 4
   \   00012D   12....       LCALL   ?L_MOV_X
   \   000130   7418         MOV     A,#0x18
   \   000132   78..         MOV     R0,#?V0 + 4
   \   000134   12....       LCALL   ?SL_SHR
   \   000137   740E         MOV     A,#0xe
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   E5..         MOV     A,?V0 + 4
   \   00013E   F0           MOVX    @DPTR,A
    666              regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
   \   00013F   7402         MOV     A,#0x2
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   78..         MOV     R0,#?V0 + 4
   \   000146   12....       LCALL   ?L_MOV_X
   \   000149   7410         MOV     A,#0x10
   \   00014B   78..         MOV     R0,#?V0 + 4
   \   00014D   12....       LCALL   ?SL_SHR
   \   000150   740F         MOV     A,#0xf
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   E5..         MOV     A,?V0 + 4
   \   000157   F0           MOVX    @DPTR,A
    667              regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
   \   000158   7402         MOV     A,#0x2
   \   00015A   12....       LCALL   ?XSTACK_DISP0_8
   \   00015D   78..         MOV     R0,#?V0 + 4
   \   00015F   12....       LCALL   ?L_MOV_X
   \   000162   7408         MOV     A,#0x8
   \   000164   78..         MOV     R0,#?V0 + 4
   \   000166   12....       LCALL   ?SS_SHR
   \   000169   7410         MOV     A,#0x10
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   E5..         MOV     A,?V0 + 4
   \   000170   F0           MOVX    @DPTR,A
    668              regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
   \   000171   7402         MOV     A,#0x2
   \   000173   12....       LCALL   ?XSTACK_DISP0_8
   \   000176   78..         MOV     R0,#?V0 + 4
   \   000178   12....       LCALL   ?L_MOV_X
   \   00017B   7411         MOV     A,#0x11
   \   00017D   12....       LCALL   ?XSTACK_DISP0_8
   \   000180   12....       LCALL   ?Subroutine28 & 0xFFFF
    669              regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
   \                     ??CrossCallReturnLabel_42:
   \   000183   7418         MOV     A,#0x18
   \   000185   78..         MOV     R0,#?V0 + 4
   \   000187   12....       LCALL   ?SL_SHR
   \   00018A   7412         MOV     A,#0x12
   \   00018C   12....       LCALL   ?XSTACK_DISP0_8
   \   00018F   12....       LCALL   ?Subroutine28 & 0xFFFF
    670              regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
   \                     ??CrossCallReturnLabel_43:
   \   000192   7410         MOV     A,#0x10
   \   000194   78..         MOV     R0,#?V0 + 4
   \   000196   12....       LCALL   ?SL_SHR
   \   000199   7413         MOV     A,#0x13
   \   00019B   12....       LCALL   ?XSTACK_DISP0_8
   \   00019E   E5..         MOV     A,?V0 + 4
   \   0001A0   F0           MOVX    @DPTR,A
    671              regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
   \   0001A1   85....       MOV     ?V0 + 4,?V0 + 0
   \   0001A4   85....       MOV     ?V0 + 5,?V0 + 1
   \   0001A7   7408         MOV     A,#0x8
   \   0001A9   78..         MOV     R0,#?V0 + 4
   \   0001AB   12....       LCALL   ?SS_SHR
   \   0001AE   7414         MOV     A,#0x14
   \   0001B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B3   E5..         MOV     A,?V0 + 4
   \   0001B5   F0           MOVX    @DPTR,A
    672              regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
   \   0001B6   7415         MOV     A,#0x15
   \   0001B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BB   12....       LCALL   ?Subroutine33 & 0xFFFF
    673              regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
   \                     ??CrossCallReturnLabel_50:
   \   0001BE   7418         MOV     A,#0x18
   \   0001C0   78..         MOV     R0,#?V0 + 0
   \   0001C2   12....       LCALL   ?SL_SHR
   \   0001C5   7416         MOV     A,#0x16
   \   0001C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CA   12....       LCALL   ?Subroutine26 & 0xFFFF
    674              regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
   \                     ??CrossCallReturnLabel_39:
   \   0001CD   12....       LCALL   ?SL_SHR
   \   0001D0   7417         MOV     A,#0x17
   \   0001D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D5   12....       LCALL   ?Subroutine29 & 0xFFFF
    675              regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
   \                     ??CrossCallReturnLabel_45:
   \   0001D8   12....       LCALL   ?SS_SHR
   \   0001DB   7418         MOV     A,#0x18
   \   0001DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E0   E5..         MOV     A,?V0 + 0
   \   0001E2   F0           MOVX    @DPTR,A
    676              regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
   \   0001E3   7419         MOV     A,#0x19
   \   0001E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E8   E5..         MOV     A,?V0 + 8
   \   0001EA   F0           MOVX    @DPTR,A
    677              return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
   \   0001EB                ; Setup parameters for call to function mpu_write_mem
   \   0001EB   740E         MOV     A,#0xe
   \   0001ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F0   8582..       MOV     ?V0 + 0,DPL
   \   0001F3   8583..       MOV     ?V0 + 1,DPH
   \   0001F6   78..         MOV     R0,#?V0 + 0
   \   0001F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FB   7C0C         MOV     R4,#0xc
   \   0001FD   7D00         MOV     R5,#0x0
   \   0001FF   7A94         MOV     R2,#-0x6c
   \   000201   7B02         MOV     R3,#0x2
   \   000203   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000206   12....       LCALL   ?DEALLOC_XSTACK8
   \   000209   741A         MOV     A,#0x1a
   \   00020B   02....       LJMP    ?Subroutine1 & 0xFFFF
    678          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85....       MOV     ?V0 + 4,?V0 + 0
   \   000006   85....       MOV     ?V0 + 5,?V0 + 1
   \   000009   85....       MOV     ?V0 + 6,?V0 + 2
   \   00000C   85....       MOV     ?V0 + 7,?V0 + 3
   \   00000F   22           RET
    679          
    680          /**
    681           *  @brief      Set DMP output rate.
    682           *  Only used when DMP is on.
    683           *  @param[in]  rate    Desired fifo rate (Hz).
    684           *  @return     0 if successful.
    685           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    686          int dmp_set_fifo_rate(unsigned short rate)
   \                     dmp_set_fifo_rate:
    687          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    688              const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
    689                  0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
   \   00000E   7408         MOV     A,#0x8
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   AC82         MOV     R4,DPL
   \   000015   AD83         MOV     R5,DPH
   \   000017   7583..       MOV     DPH,#(`?<Constant {254, 242, 171, 196, 170, 241, 223,` >> 8) & 0xff
   \   00001A   7582..       MOV     DPL,#`?<Constant {254, 242, 171, 196, 170, 241, 223,` & 0xff
   \   00001D   740C         MOV     A,#0xc
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    690              unsigned short div;
    691              unsigned char tmp[8];
    692          
    693              if (rate > DMP_SAMPLE_RATE)
   \   000022   C3           CLR     C
   \   000023   EE           MOV     A,R6
   \   000024   94C9         SUBB    A,#-0x37
   \   000026   EF           MOV     A,R7
   \   000027   9400         SUBB    A,#0x0
   \   000029   4006         JC      ??dmp_set_fifo_rate_0
    694                  return -1;
   \                     ??dmp_set_fifo_rate_1:
   \   00002B   7AFF         MOV     R2,#-0x1
   \   00002D   7BFF         MOV     R3,#-0x1
   \   00002F   8061         SJMP    ??CrossCallReturnLabel_49
    695              div = DMP_SAMPLE_RATE / rate - 1;
   \                     ??dmp_set_fifo_rate_0:
   \   000031   78C8         MOV     R0,#-0x38
   \   000033   7900         MOV     R1,#0x0
   \   000035   12....       LCALL   ?US_DIV_MOD
   \   000038   E8           MOV     A,R0
   \   000039   24FF         ADD     A,#-0x1
   \   00003B   18           DEC     R0
   \   00003C   E9           MOV     A,R1
   \   00003D   34FF         ADDC    A,#-0x1
    696              tmp[0] = (unsigned char)((div >> 8) & 0xFF);
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   F0           MOVX    @DPTR,A
    697              tmp[1] = (unsigned char)(div & 0xFF);
   \   000046   7401         MOV     A,#0x1
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   E8           MOV     A,R0
   \   00004C   12....       LCALL   ??Subroutine46_0 & 0xFFFF
    698              if (mpu_write_mem(D_0_22, 2, tmp))
   \                     ??CrossCallReturnLabel_81:
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   7C02         MOV     R4,#0x2
   \   000054   7D00         MOV     R5,#0x0
   \   000056   7A16         MOV     R2,#0x16
   \   000058   7B02         MOV     R3,#0x2
   \   00005A   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000060   8B..         MOV     ?V0 + 1,R3
   \   000062   EA           MOV     A,R2
   \   000063   45..         ORL     A,?V0 + 1
   \   000065   70C4         JNZ     ??dmp_set_fifo_rate_1
    699                  return -1;
    700              if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
   \   000067                ; Setup parameters for call to function mpu_write_mem
   \   000067   7408         MOV     A,#0x8
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   8582..       MOV     ?V0 + 0,DPL
   \   00006F   8583..       MOV     ?V0 + 1,DPH
   \   000072   78..         MOV     R0,#?V0 + 0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   7C0C         MOV     R4,#0xc
   \   000079   7D00         MOV     R5,#0x0
   \   00007B   7AC1         MOV     R2,#-0x3f
   \   00007D   7B0A         MOV     R3,#0xa
   \   00007F   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
   \   000085   8B..         MOV     ?V0 + 1,R3
   \   000087   EA           MOV     A,R2
   \   000088   45..         ORL     A,?V0 + 1
   \   00008A   709F         JNZ     ??dmp_set_fifo_rate_1
    701                  return -1;
    702          
    703              dmp.fifo_rate = rate;
   \   00008C   90....       MOV     DPTR,#dmp + 8
   \   00008F   12....       LCALL   ?Subroutine31 & 0xFFFF
    704              return 0;
   \                     ??CrossCallReturnLabel_49:
   \   000092   7414         MOV     A,#0x14
   \   000094   02....       LJMP    ??Subroutine45_0 & 0xFFFF
    705          }
    706          
    707          /**
    708           *  @brief      Get DMP output rate.
    709           *  @param[out] rate    Current fifo rate (Hz).
    710           *  @return     0 if successful.
    711           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    712          int dmp_get_fifo_rate(unsigned short *rate)
   \                     dmp_get_fifo_rate:
    713          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    714              rate[0] = dmp.fifo_rate;
   \   000004   90....       MOV     DPTR,#dmp + 8
   \   000007   02....       LJMP    ?Subroutine2 & 0xFFFF
    715              return 0;
    716          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E8           MOV     A,R0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D                REQUIRE ??Subroutine51_0
   \   00000D                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   7A00         MOV     R2,#0x0
   \   000003   7B00         MOV     R3,#0x0
   \   000005   D083         POP     DPH
   \   000007   D082         POP     DPL
   \   000009   02....       LJMP    ?BRET
    717          
    718          /**
    719           *  @brief      Set tap threshold for a specific axis.
    720           *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
    721           *  @param[in]  thresh  Tap threshold, in mg/ms.
    722           *  @return     0 if successful.
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
   \                     dmp_set_tap_thresh:
    725          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    726              unsigned char tmp[4], accel_fsr;
    727              float scaled_thresh;
    728              unsigned short dmp_thresh, dmp_thresh_2;
    729              if (!(axis & TAP_XYZ) || thresh > 1600)
   \   00000C   7407         MOV     A,#0x7
   \   00000E   5E           ANL     A,R6
   \   00000F   6009         JZ      ??dmp_set_tap_thresh_0
   \   000011   C3           CLR     C
   \   000012   EA           MOV     A,R2
   \   000013   9441         SUBB    A,#0x41
   \   000015   EB           MOV     A,R3
   \   000016   9406         SUBB    A,#0x6
   \   000018   4007         JC      ??dmp_set_tap_thresh_1
    730                  return -1;
   \                     ??dmp_set_tap_thresh_0:
   \   00001A   7AFF         MOV     R2,#-0x1
   \   00001C   7BFF         MOV     R3,#-0x1
   \   00001E   02....       LJMP    ??dmp_set_tap_thresh_2 & 0xFFFF
    731          
    732              scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
   \                     ??dmp_set_tap_thresh_1:
   \   000021   8A..         MOV     ?V0 + 4,R2
   \   000023   8B..         MOV     ?V0 + 5,R3
   \   000025   E4           CLR     A
   \   000026   F5..         MOV     ?V0 + 6,A
   \   000028   F5..         MOV     ?V0 + 7,A
   \   00002A   78..         MOV     R0,#?V0 + 4
   \   00002C   12....       LCALL   ?UL_TO_FLT
   \   00002F   90....       MOV     DPTR,#__Constant_43480000
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?L_MOV_X
   \   000037   78..         MOV     R0,#?V0 + 4
   \   000039   79..         MOV     R1,#?V0 + 0
   \   00003B   12....       LCALL   ?FLT_DIV
    733          
    734              mpu_get_accel_fsr(&accel_fsr);
   \   00003E                ; Setup parameters for call to function mpu_get_accel_fsr
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   AA82         MOV     R2,DPL
   \   000046   AB83         MOV     R3,DPH
   \   000048   12....       LCALL   ??mpu_get_accel_fsr?relay
    735              switch (accel_fsr) {
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   E0           MOVX    A,@DPTR
   \   000052   24FE         ADD     A,#-0x2
   \   000054   600E         JZ      ??dmp_set_tap_thresh_3
   \   000056   24FE         ADD     A,#-0x2
   \   000058   6033         JZ      ??dmp_set_tap_thresh_4
   \   00005A   24FC         ADD     A,#-0x4
   \   00005C   6058         JZ      ??dmp_set_tap_thresh_5
   \   00005E   24F8         ADD     A,#-0x8
   \   000060   607D         JZ      ??dmp_set_tap_thresh_6
   \   000062   80B6         SJMP    ??dmp_set_tap_thresh_0
    736              case 2:
    737                  dmp_thresh = (unsigned short)(scaled_thresh * 16384);
   \                     ??dmp_set_tap_thresh_3:
   \   000064   85....       MOV     ?V0 + 0,?V0 + 4
   \   000067   85....       MOV     ?V0 + 1,?V0 + 5
   \   00006A   85....       MOV     ?V0 + 2,?V0 + 6
   \   00006D   85....       MOV     ?V0 + 3,?V0 + 7
   \   000070   90....       MOV     DPTR,#__Constant_46800000
   \   000073   78..         MOV     R0,#?V0 + 8
   \   000075   12....       LCALL   ?L_MOV_X
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   79..         MOV     R1,#?V0 + 8
   \   00007C   12....       LCALL   ?FLT_MUL
   \   00007F   78..         MOV     R0,#?V0 + 0
   \   000081   12....       LCALL   ?FLT_TO_L
   \   000084   AA..         MOV     R2,?V0 + 0
   \   000086   AB..         MOV     R3,?V0 + 1
    738                  /* dmp_thresh * 0.75 */
    739                  dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
   \   000088   90....       MOV     DPTR,#__Constant_46400000
   \   00008B   8079         SJMP    ??dmp_set_tap_thresh_7
    740                  break;
    741              case 4:
    742                  dmp_thresh = (unsigned short)(scaled_thresh * 8192);
   \                     ??dmp_set_tap_thresh_4:
   \   00008D   85....       MOV     ?V0 + 0,?V0 + 4
   \   000090   85....       MOV     ?V0 + 1,?V0 + 5
   \   000093   85....       MOV     ?V0 + 2,?V0 + 6
   \   000096   85....       MOV     ?V0 + 3,?V0 + 7
   \   000099   90....       MOV     DPTR,#__Constant_46000000
   \   00009C   78..         MOV     R0,#?V0 + 8
   \   00009E   12....       LCALL   ?L_MOV_X
   \   0000A1   78..         MOV     R0,#?V0 + 0
   \   0000A3   79..         MOV     R1,#?V0 + 8
   \   0000A5   12....       LCALL   ?FLT_MUL
   \   0000A8   78..         MOV     R0,#?V0 + 0
   \   0000AA   12....       LCALL   ?FLT_TO_L
   \   0000AD   AA..         MOV     R2,?V0 + 0
   \   0000AF   AB..         MOV     R3,?V0 + 1
    743                  /* dmp_thresh * 0.75 */
    744                  dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
   \   0000B1   90....       MOV     DPTR,#__Constant_45c00000
   \   0000B4   8050         SJMP    ??dmp_set_tap_thresh_7
    745                  break;
    746              case 8:
    747                  dmp_thresh = (unsigned short)(scaled_thresh * 4096);
   \                     ??dmp_set_tap_thresh_5:
   \   0000B6   85....       MOV     ?V0 + 0,?V0 + 4
   \   0000B9   85....       MOV     ?V0 + 1,?V0 + 5
   \   0000BC   85....       MOV     ?V0 + 2,?V0 + 6
   \   0000BF   85....       MOV     ?V0 + 3,?V0 + 7
   \   0000C2   90....       MOV     DPTR,#__Constant_45800000
   \   0000C5   78..         MOV     R0,#?V0 + 8
   \   0000C7   12....       LCALL   ?L_MOV_X
   \   0000CA   78..         MOV     R0,#?V0 + 0
   \   0000CC   79..         MOV     R1,#?V0 + 8
   \   0000CE   12....       LCALL   ?FLT_MUL
   \   0000D1   78..         MOV     R0,#?V0 + 0
   \   0000D3   12....       LCALL   ?FLT_TO_L
   \   0000D6   AA..         MOV     R2,?V0 + 0
   \   0000D8   AB..         MOV     R3,?V0 + 1
    748                  /* dmp_thresh * 0.75 */
    749                  dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
   \   0000DA   90....       MOV     DPTR,#__Constant_45400000
   \   0000DD   8027         SJMP    ??dmp_set_tap_thresh_7
    750                  break;
    751              case 16:
    752                  dmp_thresh = (unsigned short)(scaled_thresh * 2048);
   \                     ??dmp_set_tap_thresh_6:
   \   0000DF   85....       MOV     ?V0 + 0,?V0 + 4
   \   0000E2   85....       MOV     ?V0 + 1,?V0 + 5
   \   0000E5   85....       MOV     ?V0 + 2,?V0 + 6
   \   0000E8   85....       MOV     ?V0 + 3,?V0 + 7
   \   0000EB   90....       MOV     DPTR,#__Constant_45000000
   \   0000EE   78..         MOV     R0,#?V0 + 8
   \   0000F0   12....       LCALL   ?L_MOV_X
   \   0000F3   78..         MOV     R0,#?V0 + 0
   \   0000F5   79..         MOV     R1,#?V0 + 8
   \   0000F7   12....       LCALL   ?FLT_MUL
   \   0000FA   78..         MOV     R0,#?V0 + 0
   \   0000FC   12....       LCALL   ?FLT_TO_L
   \   0000FF   AA..         MOV     R2,?V0 + 0
   \   000101   AB..         MOV     R3,?V0 + 1
    753                  /* dmp_thresh * 0.75 */
    754                  dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
   \   000103   90....       MOV     DPTR,#__Constant_44c00000
   \                     ??dmp_set_tap_thresh_7:
   \   000106   78..         MOV     R0,#?V0 + 0
   \   000108   12....       LCALL   ?L_MOV_X
   \   00010B   78..         MOV     R0,#?V0 + 4
   \   00010D   79..         MOV     R1,#?V0 + 0
   \   00010F   12....       LCALL   ?FLT_MUL
   \   000112   78..         MOV     R0,#?V0 + 4
   \   000114   12....       LCALL   ?FLT_TO_L
   \   000117   AC..         MOV     R4,?V0 + 4
   \   000119   AD..         MOV     R5,?V0 + 5
    755                  break;
    756              default:
    757                  return -1;
    758              }
    759              tmp[0] = (unsigned char)(dmp_thresh >> 8);
   \   00011B   7401         MOV     A,#0x1
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   EB           MOV     A,R3
   \   000121   F0           MOVX    @DPTR,A
    760              tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
   \   000122   7402         MOV     A,#0x2
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   EA           MOV     A,R2
   \   000128   F0           MOVX    @DPTR,A
    761              tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
   \   000129   7403         MOV     A,#0x3
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   ED           MOV     A,R5
   \   00012F   F0           MOVX    @DPTR,A
    762              tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
   \   000130   7404         MOV     A,#0x4
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   EC           MOV     A,R4
   \   000136   F0           MOVX    @DPTR,A
    763          
    764              if (axis & TAP_X) {
   \   000137   EE           MOV     A,R6
   \   000138   A2E0         MOV     C,0xE0 /* A   */.0
   \   00013A   504C         JNC     ??dmp_set_tap_thresh_8
    765                  if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
   \   00013C                ; Setup parameters for call to function mpu_write_mem
   \   00013C   7401         MOV     A,#0x1
   \   00013E   12....       LCALL   ?XSTACK_DISP0_8
   \   000141   8582..       MOV     ?V0 + 0,DPL
   \   000144   8583..       MOV     ?V0 + 1,DPH
   \   000147   78..         MOV     R0,#?V0 + 0
   \   000149   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014C   7C02         MOV     R4,#0x2
   \   00014E   7D00         MOV     R5,#0x0
   \   000150   7AD4         MOV     R2,#-0x2c
   \   000152   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000155   12....       LCALL   ?DEALLOC_XSTACK8
   \   000158   8B..         MOV     ?V0 + 1,R3
   \   00015A   EA           MOV     A,R2
   \   00015B   45..         ORL     A,?V0 + 1
   \   00015D   6003         JZ      $+5
   \   00015F   02....       LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
    766                      return -1;
    767                  if (mpu_write_mem(D_1_36, 2, tmp+2))
   \   000162                ; Setup parameters for call to function mpu_write_mem
   \   000162   7403         MOV     A,#0x3
   \   000164   12....       LCALL   ?XSTACK_DISP0_8
   \   000167   8582..       MOV     ?V0 + 0,DPL
   \   00016A   8583..       MOV     ?V0 + 1,DPH
   \   00016D   78..         MOV     R0,#?V0 + 0
   \   00016F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000172   7C02         MOV     R4,#0x2
   \   000174   7D00         MOV     R5,#0x0
   \   000176   7A24         MOV     R2,#0x24
   \   000178   12....       LCALL   ?Subroutine32 & 0xFFFF
    768                      return -1;
    769              }
   \                     ??CrossCallReturnLabel_95:
   \   00017B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017E   8B..         MOV     ?V0 + 1,R3
   \   000180   EA           MOV     A,R2
   \   000181   45..         ORL     A,?V0 + 1
   \   000183   6003         JZ      $+5
   \   000185   02....       LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
    770              if (axis & TAP_Y) {
   \                     ??dmp_set_tap_thresh_8:
   \   000188   EE           MOV     A,R6
   \   000189   A2E1         MOV     C,0xE0 /* A   */.1
   \   00018B   504C         JNC     ??dmp_set_tap_thresh_9
    771                  if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
   \   00018D                ; Setup parameters for call to function mpu_write_mem
   \   00018D   7401         MOV     A,#0x1
   \   00018F   12....       LCALL   ?XSTACK_DISP0_8
   \   000192   8582..       MOV     ?V0 + 0,DPL
   \   000195   8583..       MOV     ?V0 + 1,DPH
   \   000198   78..         MOV     R0,#?V0 + 0
   \   00019A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019D   7C02         MOV     R4,#0x2
   \   00019F   7D00         MOV     R5,#0x0
   \   0001A1   7AD8         MOV     R2,#-0x28
   \   0001A3   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0001A6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A9   8B..         MOV     ?V0 + 1,R3
   \   0001AB   EA           MOV     A,R2
   \   0001AC   45..         ORL     A,?V0 + 1
   \   0001AE   6003         JZ      $+5
   \   0001B0   02....       LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
    772                      return -1;
    773                  if (mpu_write_mem(D_1_40, 2, tmp+2))
   \   0001B3                ; Setup parameters for call to function mpu_write_mem
   \   0001B3   7403         MOV     A,#0x3
   \   0001B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B8   8582..       MOV     ?V0 + 0,DPL
   \   0001BB   8583..       MOV     ?V0 + 1,DPH
   \   0001BE   78..         MOV     R0,#?V0 + 0
   \   0001C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C3   7C02         MOV     R4,#0x2
   \   0001C5   7D00         MOV     R5,#0x0
   \   0001C7   7A28         MOV     R2,#0x28
   \   0001C9   12....       LCALL   ?Subroutine32 & 0xFFFF
    774                      return -1;
    775              }
   \                     ??CrossCallReturnLabel_97:
   \   0001CC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CF   8B..         MOV     ?V0 + 1,R3
   \   0001D1   EA           MOV     A,R2
   \   0001D2   45..         ORL     A,?V0 + 1
   \   0001D4   6003         JZ      $+5
   \   0001D6   02....       LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
    776              if (axis & TAP_Z) {
   \                     ??dmp_set_tap_thresh_9:
   \   0001D9   EE           MOV     A,R6
   \   0001DA   A2E2         MOV     C,0xE0 /* A   */.2
   \   0001DC   504C         JNC     ??dmp_set_tap_thresh_10
    777                  if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
   \   0001DE                ; Setup parameters for call to function mpu_write_mem
   \   0001DE   7401         MOV     A,#0x1
   \   0001E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E3   8582..       MOV     ?V0 + 0,DPL
   \   0001E6   8583..       MOV     ?V0 + 1,DPH
   \   0001E9   78..         MOV     R0,#?V0 + 0
   \   0001EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EE   7C02         MOV     R4,#0x2
   \   0001F0   7D00         MOV     R5,#0x0
   \   0001F2   7ADC         MOV     R2,#-0x24
   \   0001F4   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0001F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FA   8B..         MOV     ?V0 + 1,R3
   \   0001FC   EA           MOV     A,R2
   \   0001FD   45..         ORL     A,?V0 + 1
   \   0001FF   6003         JZ      $+5
   \   000201   02....       LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
    778                      return -1;
    779                  if (mpu_write_mem(D_1_44, 2, tmp+2))
   \   000204                ; Setup parameters for call to function mpu_write_mem
   \   000204   7403         MOV     A,#0x3
   \   000206   12....       LCALL   ?XSTACK_DISP0_8
   \   000209   8582..       MOV     ?V0 + 0,DPL
   \   00020C   8583..       MOV     ?V0 + 1,DPH
   \   00020F   78..         MOV     R0,#?V0 + 0
   \   000211   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000214   7C02         MOV     R4,#0x2
   \   000216   7D00         MOV     R5,#0x0
   \   000218   7A2C         MOV     R2,#0x2c
   \   00021A   12....       LCALL   ?Subroutine32 & 0xFFFF
    780                      return -1;
    781              }
   \                     ??CrossCallReturnLabel_99:
   \   00021D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000220   8B..         MOV     ?V0 + 1,R3
   \   000222   EA           MOV     A,R2
   \   000223   45..         ORL     A,?V0 + 1
   \   000225   6003         JZ      $+5
   \   000227   02....       LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
    782              return 0;
   \                     ??dmp_set_tap_thresh_10:
   \   00022A   7A00         MOV     R2,#0x0
   \   00022C   7B00         MOV     R3,#0x0
   \                     ??dmp_set_tap_thresh_2:
   \   00022E   7405         MOV     A,#0x5
   \   000230                REQUIRE ?Subroutine1
   \   000230                ; // Fall through to label ?Subroutine1
    783          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   7B01         MOV     R3,#0x1
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0
    784          
    785          /**
    786           *  @brief      Set which axes will register a tap.
    787           *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
    788           *  @return     0 if successful.
    789           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    790          int dmp_set_tap_axes(unsigned char axis)
   \                     dmp_set_tap_axes:
    791          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    792              unsigned char tmp = 0;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
    793          
    794              if (axis & TAP_X)
   \   000014   EE           MOV     A,R6
   \   000015   A2E0         MOV     C,0xE0 /* A   */.0
   \   000017   5003         JNC     ??dmp_set_tap_axes_0
    795                  tmp |= 0x30;
   \   000019   7430         MOV     A,#0x30
   \   00001B   F0           MOVX    @DPTR,A
    796              if (axis & TAP_Y)
   \                     ??dmp_set_tap_axes_0:
   \   00001C   EE           MOV     A,R6
   \   00001D   A2E1         MOV     C,0xE0 /* A   */.1
   \   00001F   5004         JNC     ??dmp_set_tap_axes_1
    797                  tmp |= 0x0C;
   \   000021   E0           MOVX    A,@DPTR
   \   000022   440C         ORL     A,#0xc
   \   000024   F0           MOVX    @DPTR,A
    798              if (axis & TAP_Z)
   \                     ??dmp_set_tap_axes_1:
   \   000025   EE           MOV     A,R6
   \   000026   A2E2         MOV     C,0xE0 /* A   */.2
   \   000028   5004         JNC     ??dmp_set_tap_axes_2
    799                  tmp |= 0x03;
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   4403         ORL     A,#0x3
   \   00002D   F0           MOVX    @DPTR,A
    800              return mpu_write_mem(D_1_72, 1, &tmp);
   \                     ??dmp_set_tap_axes_2:
   \   00002E                ; Setup parameters for call to function mpu_write_mem
   \   00002E   8582..       MOV     ?V0 + 0,DPL
   \   000031   8583..       MOV     ?V0 + 1,DPH
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7C01         MOV     R4,#0x1
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   7A48         MOV     R2,#0x48
   \   00003F                REQUIRE ?Subroutine4
   \   00003F                ; // Fall through to label ?Subroutine4
    801          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   12....       LCALL   ?DEALLOC_XSTACK8
   \   000006   7401         MOV     A,#0x1
   \   000008   80..         SJMP    ??Subroutine45_0
    802          
    803          /**
    804           *  @brief      Set minimum number of taps needed for an interrupt.
    805           *  @param[in]  min_taps    Minimum consecutive taps (1-4).
    806           *  @return     0 if successful.
    807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    808          int dmp_set_tap_count(unsigned char min_taps)
   \                     dmp_set_tap_count:
    809          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    810              unsigned char tmp;
    811          
    812              if (min_taps < 1)
   \   00000C   7004         JNZ     ??dmp_set_tap_count_0
    813                  min_taps = 1;
   \   00000E   7E01         MOV     R6,#0x1
   \   000010   8007         SJMP    ??dmp_set_tap_count_1
    814              else if (min_taps > 4)
   \                     ??dmp_set_tap_count_0:
   \   000012   C3           CLR     C
   \   000013   9405         SUBB    A,#0x5
   \   000015   4002         JC      ??dmp_set_tap_count_1
    815                  min_taps = 4;
   \   000017   7E04         MOV     R6,#0x4
    816          
    817              tmp = min_taps - 1;
   \                     ??dmp_set_tap_count_1:
   \   000019   74FF         MOV     A,#-0x1
   \   00001B   2E           ADD     A,R6
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   F0           MOVX    @DPTR,A
    818              return mpu_write_mem(D_1_79, 1, &tmp);
   \   000023                ; Setup parameters for call to function mpu_write_mem
   \   000023   8582..       MOV     ?V0 + 0,DPL
   \   000026   8583..       MOV     ?V0 + 1,DPH
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C01         MOV     R4,#0x1
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A4F         MOV     R2,#0x4f
   \   000034   80..         SJMP    ?Subroutine4
    819          }
    820          
    821          /**
    822           *  @brief      Set length between valid taps.
    823           *  @param[in]  time    Milliseconds between taps.
    824           *  @return     0 if successful.
    825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    826          int dmp_set_tap_time(unsigned short time)
   \                     dmp_set_tap_time:
    827          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    828              unsigned short dmp_time;
    829              unsigned char tmp[2];
    830          
    831              dmp_time = time / (1000 / DMP_SAMPLE_RATE);
   \   00000A   EA           MOV     A,R2
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   F9           MOV     R1,A
   \   00000E   7A05         MOV     R2,#0x5
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ?US_DIV_MOD
    832              tmp[0] = (unsigned char)(dmp_time >> 8);
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
    833              tmp[1] = (unsigned char)(dmp_time & 0xFF);
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E8           MOV     A,R0
   \   000023   12....       LCALL   ??Subroutine46_0 & 0xFFFF
    834              return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
   \                     ??CrossCallReturnLabel_82:
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C02         MOV     R4,#0x2
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7ADE         MOV     R2,#-0x22
   \   00002F   02....       LJMP    ?Subroutine5 & 0xFFFF
    835          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   12....       LCALL   ?DEALLOC_XSTACK8
   \   000006   7402         MOV     A,#0x2
   \   000008   02....       LJMP    ??Subroutine45_0 & 0xFFFF
    836          
    837          /**
    838           *  @brief      Set max time between taps to register as a multi-tap.
    839           *  @param[in]  time    Max milliseconds between taps.
    840           *  @return     0 if successful.
    841           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    842          int dmp_set_tap_time_multi(unsigned short time)
   \                     dmp_set_tap_time_multi:
    843          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    844              unsigned short dmp_time;
    845              unsigned char tmp[2];
    846          
    847              dmp_time = time / (1000 / DMP_SAMPLE_RATE);
   \   00000A   EA           MOV     A,R2
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   F9           MOV     R1,A
   \   00000E   7A05         MOV     R2,#0x5
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ?US_DIV_MOD
    848              tmp[0] = (unsigned char)(dmp_time >> 8);
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
    849              tmp[1] = (unsigned char)(dmp_time & 0xFF);
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E8           MOV     A,R0
   \   000023   12....       LCALL   ??Subroutine46_0 & 0xFFFF
    850              return mpu_write_mem(D_1_218, 2, tmp);
   \                     ??CrossCallReturnLabel_83:
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C02         MOV     R4,#0x2
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7ADA         MOV     R2,#-0x26
   \   00002F   02....       LJMP    ?Subroutine5 & 0xFFFF
    851          }
    852          
    853          /**
    854           *  @brief      Set shake rejection threshold.
    855           *  If the DMP detects a gyro sample larger than @e thresh, taps are rejected.
    856           *  @param[in]  sf      Gyro scale factor.
    857           *  @param[in]  thresh  Gyro threshold in dps.
    858           *  @return     0 if successful.
    859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    860          int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
   \                     dmp_set_shake_reject_thresh:
    861          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   \   00000E   8C..         MOV     ?V0 + 6,R4
   \   000010   8D..         MOV     ?V0 + 7,R5
   \   000012   7418         MOV     A,#0x18
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 1,A
    862              unsigned char tmp[4];
    863              long thresh_scaled = sf / 1000 * thresh;
   \   00001E   90....       MOV     DPTR,#__Constant_3e8
   \   000021   78..         MOV     R0,#?V0 + 8
   \   000023   12....       LCALL   ?L_MOV_X
   \   000026   78..         MOV     R0,#?V0 + 4
   \   000028   79..         MOV     R1,#?V0 + 8
   \   00002A   12....       LCALL   ?L_DIV_MOD
   \   00002D   E4           CLR     A
   \   00002E   F5..         MOV     ?V0 + 2,A
   \   000030   F5..         MOV     ?V0 + 3,A
   \   000032   78..         MOV     R0,#?V0 + 4
   \   000034   79..         MOV     R1,#?V0 + 0
   \   000036   12....       LCALL   ?L_MUL
    864              tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
   \   000039   85....       MOV     ?V0 + 0,?V0 + 4
   \   00003C   85....       MOV     ?V0 + 1,?V0 + 5
   \   00003F   85....       MOV     ?V0 + 2,?V0 + 6
   \   000042   85....       MOV     ?V0 + 3,?V0 + 7
   \   000045   7418         MOV     A,#0x18
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?SL_SHR
   \   00004C   12....       LCALL   ?Subroutine27 & 0xFFFF
    865              tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
   \                     ??CrossCallReturnLabel_41:
   \   00004F   12....       LCALL   ?SL_SHR
   \   000052   04           INC     A
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   12....       LCALL   ?Subroutine30 & 0xFFFF
    866              tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
   \                     ??CrossCallReturnLabel_47:
   \   000059   12....       LCALL   ?SS_SHR
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   E5..         MOV     A,?V0 + 0
   \   000063   F0           MOVX    @DPTR,A
    867              tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
   \   000064   7403         MOV     A,#0x3
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   12....       LCALL   ?Subroutine25 & 0xFFFF
    868              return mpu_write_mem(D_1_92, 4, tmp);
   \                     ??CrossCallReturnLabel_77:
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   7C04         MOV     R4,#0x4
   \   000071   7D00         MOV     R5,#0x0
   \   000073   7A5C         MOV     R2,#0x5c
   \   000075   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   7404         MOV     A,#0x4
   \   00007D   02....       LJMP    ?Subroutine1 & 0xFFFF
    869          }
    870          
    871          /**
    872           *  @brief      Set shake rejection time.
    873           *  Sets the length of time that the gyro must be outside of the threshold set
    874           *  by @e gyro_set_shake_reject_thresh before taps are rejected. A mandatory
    875           *  60 ms is added to this parameter.
    876           *  @param[in]  time    Time in milliseconds.
    877           *  @return     0 if successful.
    878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    879          int dmp_set_shake_reject_time(unsigned short time)
   \                     dmp_set_shake_reject_time:
    880          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    881              unsigned char tmp[2];
    882          
    883              time /= (1000 / DMP_SAMPLE_RATE);
   \   00000A   EA           MOV     A,R2
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   F9           MOV     R1,A
   \   00000E   7A05         MOV     R2,#0x5
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ?US_DIV_MOD
    884              tmp[0] = time >> 8;
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
    885              tmp[1] = time & 0xFF;
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E8           MOV     A,R0
   \   000023   12....       LCALL   ??Subroutine46_0 & 0xFFFF
    886              return mpu_write_mem(D_1_90,2,tmp);
   \                     ??CrossCallReturnLabel_84:
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C02         MOV     R4,#0x2
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A5A         MOV     R2,#0x5a
   \   00002F                REQUIRE ?Subroutine5
   \   00002F                ; // Fall through to label ?Subroutine5
    887          }
    888          
    889          /**
    890           *  @brief      Set shake rejection timeout.
    891           *  Sets the length of time after a shake rejection that the gyro must stay
    892           *  inside of the threshold before taps can be detected again. A mandatory
    893           *  60 ms is added to this parameter.
    894           *  @param[in]  time    Time in milliseconds.
    895           *  @return     0 if successful.
    896           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    897          int dmp_set_shake_reject_timeout(unsigned short time)
   \                     dmp_set_shake_reject_timeout:
    898          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    899              unsigned char tmp[2];
    900          
    901              time /= (1000 / DMP_SAMPLE_RATE);
   \   00000A   EA           MOV     A,R2
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   F9           MOV     R1,A
   \   00000E   7A05         MOV     R2,#0x5
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ?US_DIV_MOD
    902              tmp[0] = time >> 8;
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
    903              tmp[1] = time & 0xFF;
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E8           MOV     A,R0
   \   000023   12....       LCALL   ??Subroutine46_0 & 0xFFFF
    904              return mpu_write_mem(D_1_88,2,tmp);
   \                     ??CrossCallReturnLabel_85:
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C02         MOV     R4,#0x2
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A58         MOV     R2,#0x58
   \   00002F   80..         SJMP    ?Subroutine5
    905          }
    906          
    907          /**
    908           *  @brief      Get current step count.
    909           *  @param[out] count   Number of steps detected.
    910           *  @return     0 if successful.
    911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    912          int dmp_get_pedometer_step_count(unsigned long *count)
   \                     dmp_get_pedometer_step_count:
    913          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    914              unsigned char tmp[4];
    915              if (!count)
   \   00000E   EE           MOV     A,R6
   \   00000F   4F           ORL     A,R7
   \   000010   7006         JNZ     ??dmp_get_pedometer_step_count_0
    916                  return -1;
   \                     ??dmp_get_pedometer_step_count_1:
   \   000012   7AFF         MOV     R2,#-0x1
   \   000014   7BFF         MOV     R3,#-0x1
   \   000016   8069         SJMP    ??dmp_get_pedometer_step_count_2
    917          
    918              if (mpu_read_mem(D_PEDSTD_STEPCTR, 4, tmp))
   \                     ??dmp_get_pedometer_step_count_0:
   \   000018                ; Setup parameters for call to function mpu_read_mem
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   8582..       MOV     ?V0 + 0,DPL
   \   000021   8583..       MOV     ?V0 + 1,DPH
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C04         MOV     R4,#0x4
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A60         MOV     R2,#0x60
   \   00002F   7B03         MOV     R3,#0x3
   \   000031   12....       LCALL   ??mpu_read_mem?relay
   \   000034   7402         MOV     A,#0x2
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039   8B..         MOV     ?V0 + 1,R3
   \   00003B   EA           MOV     A,R2
   \   00003C   45..         ORL     A,?V0 + 1
   \   00003E   70D2         JNZ     ??dmp_get_pedometer_step_count_1
    919                  return -1;
    920          
    921              count[0] = ((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
    922                  ((unsigned long)tmp[2] << 8) | tmp[3];
   \   000040   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000043   12....       LCALL   ?L_SHL
   \   000046   04           INC     A
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00004D   12....       LCALL   ?L_SHL
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   79..         MOV     R1,#?V0 + 4
   \   000054   12....       LCALL   ?L_IOR
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00005F   12....       LCALL   ?L_SHL
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   79..         MOV     R1,#?V0 + 4
   \   000066   12....       LCALL   ?L_IOR
   \   000069   7403         MOV     A,#0x3
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000071   12....       LCALL   ?L_IOR
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?L_MOV_TO_X
    923              return 0;
   \   00007D   7A00         MOV     R2,#0x0
   \   00007F   7B00         MOV     R3,#0x0
   \                     ??dmp_get_pedometer_step_count_2:
   \   000081   80..         SJMP    ??Subroutine48_0
    924          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine47_0
   \   000006                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   E4           CLR     A
   \   000004   F5..         MOV     ?V0 + 1,A
   \   000006   F5..         MOV     ?V0 + 2,A
   \   000008   F5..         MOV     ?V0 + 3,A
   \   00000A   7418         MOV     A,#0x18
   \   00000C   78..         MOV     R0,#?V0 + 0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   7404         MOV     A,#0x4
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F08         MOV     R7,#0x8
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   E4           CLR     A
   \   000004   F5..         MOV     ?V0 + 5,A
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   79..         MOV     R1,#?V0 + 4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   E4           CLR     A
   \   000004   F5..         MOV     ?V0 + 6,A
   \   000006   7408         MOV     A,#0x8
   \   000008   78..         MOV     R0,#?V0 + 4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   E4           CLR     A
   \   000004   F5..         MOV     ?V0 + 5,A
   \   000006   F5..         MOV     ?V0 + 6,A
   \   000008   F5..         MOV     ?V0 + 7,A
   \   00000A   7410         MOV     A,#0x10
   \   00000C   78..         MOV     R0,#?V0 + 4
   \   00000E   22           RET
    925          
    926          /**
    927           *  @brief      Overwrite current step count.
    928           *  WARNING: This function writes to DMP memory and could potentially encounter
    929           *  a race condition if called while the pedometer is enabled.
    930           *  @param[in]  count   New step count.
    931           *  @return     0 if successful.
    932           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7B03         MOV     R3,#0x3
   \   000002   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008                REQUIRE ??Subroutine48_0
   \   000008                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    933          int dmp_set_pedometer_step_count(unsigned long count)
   \                     dmp_set_pedometer_step_count:
    934          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    935              unsigned char tmp[4];
    936          
    937              tmp[0] = (unsigned char)((count >> 24) & 0xFF);
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   ED           MOV     A,R5
   \   000011   F0           MOVX    @DPTR,A
    938              tmp[1] = (unsigned char)((count >> 16) & 0xFF);
   \   000012   8A..         MOV     ?V0 + 0,R2
   \   000014   8B..         MOV     ?V0 + 1,R3
   \   000016   8C..         MOV     ?V0 + 2,R4
   \   000018   F5..         MOV     ?V0 + 3,A
   \   00001A   7410         MOV     A,#0x10
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?UL_SHR
   \   000021   04           INC     A
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   EC           MOV     A,R4
   \   000026   F0           MOVX    @DPTR,A
    939              tmp[2] = (unsigned char)((count >> 8) & 0xFF);
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   EB           MOV     A,R3
   \   00002D   F0           MOVX    @DPTR,A
    940              tmp[3] = (unsigned char)(count & 0xFF);
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   EA           MOV     A,R2
   \   000034   12....       LCALL   ??Subroutine46_0 & 0xFFFF
    941              return mpu_write_mem(D_PEDSTD_STEPCTR, 4, tmp);
   \                     ??CrossCallReturnLabel_86:
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   7C04         MOV     R4,#0x4
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   7A60         MOV     R2,#0x60
   \   000040   80..         SJMP    ?Subroutine3
    942          }
    943          
    944          /**
    945           *  @brief      Get duration of walking time.
    946           *  @param[in]  time    Walk time in milliseconds.
    947           *  @return     0 if successful.
    948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    949          int dmp_get_pedometer_walk_time(unsigned long *time)
   \                     dmp_get_pedometer_walk_time:
    950          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    951              unsigned char tmp[4];
    952              if (!time)
   \   00000E   EE           MOV     A,R6
   \   00000F   4F           ORL     A,R7
   \   000010   7006         JNZ     ??dmp_get_pedometer_walk_time_0
    953                  return -1;
   \                     ??dmp_get_pedometer_walk_time_1:
   \   000012   7AFF         MOV     R2,#-0x1
   \   000014   7BFF         MOV     R3,#-0x1
   \   000016   8078         SJMP    ??dmp_get_pedometer_walk_time_2
    954          
    955              if (mpu_read_mem(D_PEDSTD_TIMECTR, 4, tmp))
   \                     ??dmp_get_pedometer_walk_time_0:
   \   000018                ; Setup parameters for call to function mpu_read_mem
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   8582..       MOV     ?V0 + 0,DPL
   \   000021   8583..       MOV     ?V0 + 1,DPH
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C04         MOV     R4,#0x4
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7AC4         MOV     R2,#-0x3c
   \   00002F   7B03         MOV     R3,#0x3
   \   000031   12....       LCALL   ??mpu_read_mem?relay
   \   000034   7402         MOV     A,#0x2
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039   8B..         MOV     ?V0 + 1,R3
   \   00003B   EA           MOV     A,R2
   \   00003C   45..         ORL     A,?V0 + 1
   \   00003E   70D2         JNZ     ??dmp_get_pedometer_walk_time_1
    956                  return -1;
    957          
    958              time[0] = (((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
    959                  ((unsigned long)tmp[2] << 8) | tmp[3]) * 20;
   \   000040   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000043   12....       LCALL   ?L_SHL
   \   000046   04           INC     A
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00004D   12....       LCALL   ?L_SHL
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   79..         MOV     R1,#?V0 + 4
   \   000054   12....       LCALL   ?L_IOR
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00005F   12....       LCALL   ?L_SHL
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   79..         MOV     R1,#?V0 + 4
   \   000066   12....       LCALL   ?L_IOR
   \   000069   7403         MOV     A,#0x3
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000071   12....       LCALL   ?L_IOR
   \   000074   90....       MOV     DPTR,#__Constant_14
   \   000077   78..         MOV     R0,#?V0 + 4
   \   000079   12....       LCALL   ?L_MOV_X
   \   00007C   78..         MOV     R0,#?V0 + 0
   \   00007E   79..         MOV     R1,#?V0 + 4
   \   000080   12....       LCALL   ?L_MUL
   \   000083   8E82         MOV     DPL,R6
   \   000085   8F83         MOV     DPH,R7
   \   000087   78..         MOV     R0,#?V0 + 0
   \   000089   12....       LCALL   ?L_MOV_TO_X
    960              return 0;
   \   00008C   7A00         MOV     R2,#0x0
   \   00008E   7B00         MOV     R3,#0x0
   \                     ??dmp_get_pedometer_walk_time_2:
   \   000090   02....       LJMP    ??Subroutine48_0 & 0xFFFF
    961          }
    962          
    963          /**
    964           *  @brief      Overwrite current walk time.
    965           *  WARNING: This function writes to DMP memory and could potentially encounter
    966           *  a race condition if called while the pedometer is enabled.
    967           *  @param[in]  time    New walk time in milliseconds.
    968           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    969          int dmp_set_pedometer_walk_time(unsigned long time)
   \                     dmp_set_pedometer_walk_time:
    970          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   \   00000E   8C..         MOV     ?V0 + 6,R4
   \   000010   8D..         MOV     ?V0 + 7,R5
    971              unsigned char tmp[4];
    972          
    973              time /= 20;
   \   000012   90....       MOV     DPTR,#__Constant_14
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?L_MOV_X
   \   00001A   78..         MOV     R0,#?V0 + 4
   \   00001C   79..         MOV     R1,#?V0 + 0
   \   00001E   12....       LCALL   ?UL_DIV_MOD
    974          
    975              tmp[0] = (unsigned char)((time >> 24) & 0xFF);
   \   000021   85....       MOV     ?V0 + 0,?V0 + 4
   \   000024   85....       MOV     ?V0 + 1,?V0 + 5
   \   000027   85....       MOV     ?V0 + 2,?V0 + 6
   \   00002A   85....       MOV     ?V0 + 3,?V0 + 7
   \   00002D   7418         MOV     A,#0x18
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?UL_SHR
   \   000034   12....       LCALL   ?Subroutine36 & 0xFFFF
    976              tmp[1] = (unsigned char)((time >> 16) & 0xFF);
   \                     ??CrossCallReturnLabel_55:
   \   000037   F5..         MOV     ?V0 + 3,A
   \   000039   7410         MOV     A,#0x10
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?UL_SHR
   \   000040   04           INC     A
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E5..         MOV     A,?V0 + 0
   \   000046   F0           MOVX    @DPTR,A
    977              tmp[2] = (unsigned char)((time >> 8) & 0xFF);
   \   000047   85....       MOV     ?V0 + 1,?V0 + 5
   \   00004A   E5..         MOV     A,?V0 + 1
   \   00004C   F5..         MOV     ?V0 + 0,A
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E5..         MOV     A,?V0 + 0
   \   000055   F0           MOVX    @DPTR,A
    978              tmp[3] = (unsigned char)(time & 0xFF);
   \   000056   7403         MOV     A,#0x3
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ?Subroutine25 & 0xFFFF
    979              return mpu_write_mem(D_PEDSTD_TIMECTR, 4, tmp);
   \                     ??CrossCallReturnLabel_78:
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   7C04         MOV     R4,#0x4
   \   000063   7D00         MOV     R5,#0x0
   \   000065   7AC4         MOV     R2,#-0x3c
   \   000067   02....       LJMP    ?Subroutine3 & 0xFFFF
    980          }
    981          
    982          /**
    983           *  @brief      Enable DMP features.
    984           *  The following \#define's are used in the input mask:
    985           *  \n DMP_FEATURE_TAP
    986           *  \n DMP_FEATURE_ANDROID_ORIENT
    987           *  \n DMP_FEATURE_LP_QUAT
    988           *  \n DMP_FEATURE_6X_LP_QUAT
    989           *  \n DMP_FEATURE_GYRO_CAL
    990           *  \n DMP_FEATURE_SEND_RAW_ACCEL
    991           *  \n DMP_FEATURE_SEND_RAW_GYRO
    992           *  \n NOTE: DMP_FEATURE_LP_QUAT and DMP_FEATURE_6X_LP_QUAT are mutually
    993           *  exclusive.
    994           *  \n NOTE: DMP_FEATURE_SEND_RAW_GYRO and DMP_FEATURE_SEND_CAL_GYRO are also
    995           *  mutually exclusive.
    996           *  @param[in]  mask    Mask of features to enable.
    997           *  @return     0 if successful.
    998           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    999          int dmp_enable_feature(unsigned short mask)
   \                     dmp_enable_feature:
   1000          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1001              unsigned char tmp[10];
   1002          
   1003              /* TODO: All of these settings can probably be integrated into the default
   1004               * DMP image.
   1005               */
   1006              /* Set integration scale factor. */
   1007              tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
                                               ^
Warning[Pe061]: integer operation result is out of range
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   1008              tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
                                               ^
Warning[Pe061]: integer operation result is out of range
   \   000016   04           INC     A
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   743B         MOV     A,#0x3b
   \   00001C   F0           MOVX    @DPTR,A
   1009              tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
                                               ^
Warning[Pe061]: integer operation result is out of range
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   7486         MOV     A,#-0x7a
   \   000024   F0           MOVX    @DPTR,A
   1010              tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
                                              ^
Warning[Pe061]: integer operation result is out of range
   \   000025   7403         MOV     A,#0x3
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   74E0         MOV     A,#-0x20
   \   00002C   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   1011              mpu_write_mem(D_0_104, 4, tmp);
   \                     ??CrossCallReturnLabel_87:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7C04         MOV     R4,#0x4
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A68         MOV     R2,#0x68
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   1012          
   1013              /* Send sensor data to the FIFO. */
   1014              tmp[0] = 0xA3;
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   74A3         MOV     A,#-0x5d
   \   000048   F0           MOVX    @DPTR,A
   1015              if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
   \   000049   EE           MOV     A,R6
   \   00004A   5440         ANL     A,#0x40
   \   00004C   F5..         MOV     ?V0 + 3,A
   \   00004E   6019         JZ      ??dmp_enable_feature_0
   1016                  tmp[1] = 0xC0;
   \   000050   7401         MOV     A,#0x1
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   74C0         MOV     A,#-0x40
   \   000057   F0           MOVX    @DPTR,A
   1017                  tmp[2] = 0xC8;
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   74C8         MOV     A,#-0x38
   \   00005F   F0           MOVX    @DPTR,A
   1018                  tmp[3] = 0xC2;
   \   000060   7403         MOV     A,#0x3
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   74C2         MOV     A,#-0x3e
   \   000067   8017         SJMP    ??dmp_enable_feature_1
   1019              } else {
   1020                  tmp[1] = 0xA3;
   \                     ??dmp_enable_feature_0:
   \   000069   7401         MOV     A,#0x1
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   74A3         MOV     A,#-0x5d
   \   000070   F0           MOVX    @DPTR,A
   1021                  tmp[2] = 0xA3;
   \   000071   7402         MOV     A,#0x2
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   74A3         MOV     A,#-0x5d
   \   000078   F0           MOVX    @DPTR,A
   1022                  tmp[3] = 0xA3;
   \   000079   7403         MOV     A,#0x3
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   74A3         MOV     A,#-0x5d
   \                     ??dmp_enable_feature_1:
   \   000080   F0           MOVX    @DPTR,A
   1023              }
   1024              if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
   \   000081   EE           MOV     A,R6
   \   000082   5480         ANL     A,#0x80
   \   000084   F5..         MOV     ?V0 + 0,A
   \   000086   EF           MOV     A,R7
   \   000087   5401         ANL     A,#0x1
   \   000089   F5..         MOV     ?V0 + 1,A
   \   00008B   E5..         MOV     A,?V0 + 0
   \   00008D   45..         ORL     A,?V0 + 1
   \   00008F   6019         JZ      ??dmp_enable_feature_2
   1025                  tmp[4] = 0xC4;
   \   000091   7404         MOV     A,#0x4
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   74C4         MOV     A,#-0x3c
   \   000098   F0           MOVX    @DPTR,A
   1026                  tmp[5] = 0xCC;
   \   000099   7405         MOV     A,#0x5
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   74CC         MOV     A,#-0x34
   \   0000A0   F0           MOVX    @DPTR,A
   1027                  tmp[6] = 0xC6;
   \   0000A1   7406         MOV     A,#0x6
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   74C6         MOV     A,#-0x3a
   \   0000A8   8017         SJMP    ??dmp_enable_feature_3
   1028              } else {
   1029                  tmp[4] = 0xA3;
   \                     ??dmp_enable_feature_2:
   \   0000AA   7404         MOV     A,#0x4
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   74A3         MOV     A,#-0x5d
   \   0000B1   F0           MOVX    @DPTR,A
   1030                  tmp[5] = 0xA3;
   \   0000B2   7405         MOV     A,#0x5
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   74A3         MOV     A,#-0x5d
   \   0000B9   F0           MOVX    @DPTR,A
   1031                  tmp[6] = 0xA3;
   \   0000BA   7406         MOV     A,#0x6
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   74A3         MOV     A,#-0x5d
   \                     ??dmp_enable_feature_3:
   \   0000C1   F0           MOVX    @DPTR,A
   1032              }
   1033              tmp[7] = 0xA3;
   \   0000C2   7407         MOV     A,#0x7
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   74A3         MOV     A,#-0x5d
   \   0000C9   F0           MOVX    @DPTR,A
   1034              tmp[8] = 0xA3;
   \   0000CA   7408         MOV     A,#0x8
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   74A3         MOV     A,#-0x5d
   \   0000D1   F0           MOVX    @DPTR,A
   1035              tmp[9] = 0xA3;
   \   0000D2   7409         MOV     A,#0x9
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   74A3         MOV     A,#-0x5d
   \   0000D9   12....       LCALL   ?Subroutine34 & 0xFFFF
   1036              mpu_write_mem(CFG_15,10,tmp);
   \                     ??CrossCallReturnLabel_89:
   \   0000DC   8582..       MOV     ?V0 + 4,DPL
   \   0000DF   8583..       MOV     ?V0 + 5,DPH
   \   0000E2   78..         MOV     R0,#?V0 + 4
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E7   7C0A         MOV     R4,#0xa
   \   0000E9   7D00         MOV     R5,#0x0
   \   0000EB   7AA7         MOV     R2,#-0x59
   \   0000ED   7B0A         MOV     R3,#0xa
   \   0000EF   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0000F2   12....       LCALL   ?DEALLOC_XSTACK8
   1037          
   1038              /* Send gesture data to the FIFO. */
   1039              if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
   \   0000F5   EE           MOV     A,R6
   \   0000F6   5403         ANL     A,#0x3
   \   0000F8   F5..         MOV     ?V0 + 2,A
   \   0000FA   85..82       MOV     DPL,?XSP + 0
   \   0000FD   85..83       MOV     DPH,?XSP + 1
   \   000100   6004         JZ      ??dmp_enable_feature_4
   1040                  tmp[0] = DINA20;
   \   000102   7420         MOV     A,#0x20
   \   000104   8002         SJMP    ??dmp_enable_feature_5
   1041              else
   1042                  tmp[0] = 0xD8;
   \                     ??dmp_enable_feature_4:
   \   000106   74D8         MOV     A,#-0x28
   \                     ??dmp_enable_feature_5:
   \   000108   F0           MOVX    @DPTR,A
   1043              mpu_write_mem(CFG_27,1,tmp);
   \   000109                ; Setup parameters for call to function mpu_write_mem
   \   000109   78..         MOV     R0,#?V0 + 4
   \   00010B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010E   7C01         MOV     R4,#0x1
   \   000110   7D00         MOV     R5,#0x0
   \   000112   7AB6         MOV     R2,#-0x4a
   \   000114   7B0A         MOV     R3,#0xa
   \   000116   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000119   12....       LCALL   ?DEALLOC_XSTACK8
   1044          
   1045              if (mask & DMP_FEATURE_GYRO_CAL)
   \   00011C   EE           MOV     A,R6
   \   00011D   5420         ANL     A,#0x20
   \   00011F   6004         JZ      ??dmp_enable_feature_6
   1046                  dmp_enable_gyro_cal(1);
   \   000121                ; Setup parameters for call to function dmp_enable_gyro_cal
   \   000121   7901         MOV     R1,#0x1
   \   000123   8002         SJMP    ??dmp_enable_feature_7
   1047              else
   1048                  dmp_enable_gyro_cal(0);
   \                     ??dmp_enable_feature_6:
   \   000125                ; Setup parameters for call to function dmp_enable_gyro_cal
   \   000125   7900         MOV     R1,#0x0
   \                     ??dmp_enable_feature_7:
   \   000127   12....       LCALL   ??dmp_enable_gyro_cal?relay
   1049          
   1050              if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
   \   00012A   E5..         MOV     A,?V0 + 0
   \   00012C   45..         ORL     A,?V0 + 1
   \   00012E   6055         JZ      ??dmp_enable_feature_8
   1051                  if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
   \   000130   EF           MOV     A,R7
   \   000131   5401         ANL     A,#0x1
   \   000133   85..82       MOV     DPL,?XSP + 0
   \   000136   85..83       MOV     DPH,?XSP + 1
   \   000139   601C         JZ      ??dmp_enable_feature_9
   1052                      tmp[0] = 0xB2;
   \   00013B   74B2         MOV     A,#-0x4e
   \   00013D   F0           MOVX    @DPTR,A
   1053                      tmp[1] = 0x8B;
   \   00013E   7401         MOV     A,#0x1
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   748B         MOV     A,#-0x75
   \   000145   F0           MOVX    @DPTR,A
   1054                      tmp[2] = 0xB6;
   \   000146   7402         MOV     A,#0x2
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   74B6         MOV     A,#-0x4a
   \   00014D   F0           MOVX    @DPTR,A
   1055                      tmp[3] = 0x9B;
   \   00014E   7403         MOV     A,#0x3
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   749B         MOV     A,#-0x65
   \   000155   801A         SJMP    ??dmp_enable_feature_10
   1056                  } else {
   1057                      tmp[0] = DINAC0;
   \                     ??dmp_enable_feature_9:
   \   000157   74B0         MOV     A,#-0x50
   \   000159   F0           MOVX    @DPTR,A
   1058                      tmp[1] = DINA80;
   \   00015A   7401         MOV     A,#0x1
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   7480         MOV     A,#-0x80
   \   000161   F0           MOVX    @DPTR,A
   1059                      tmp[2] = DINAC2;
   \   000162   7402         MOV     A,#0x2
   \   000164   12....       LCALL   ?XSTACK_DISP0_8
   \   000167   74B4         MOV     A,#-0x4c
   \   000169   F0           MOVX    @DPTR,A
   1060                      tmp[3] = DINA90;
   \   00016A   7403         MOV     A,#0x3
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   7490         MOV     A,#-0x70
   \                     ??dmp_enable_feature_10:
   \   000171   F0           MOVX    @DPTR,A
   1061                  }
   1062                  mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
   \   000172                ; Setup parameters for call to function mpu_write_mem
   \   000172   78..         MOV     R0,#?V0 + 4
   \   000174   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000177   7C04         MOV     R4,#0x4
   \   000179   7D00         MOV     R5,#0x0
   \   00017B   7AA2         MOV     R2,#-0x5e
   \   00017D   7B0A         MOV     R3,#0xa
   \   00017F   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1063              }
   \                     ??CrossCallReturnLabel_118:
   \   000182   12....       LCALL   ?DEALLOC_XSTACK8
   1064          
   1065              if (mask & DMP_FEATURE_TAP) {
   \                     ??dmp_enable_feature_8:
   \   000185   EE           MOV     A,R6
   \   000186   A2E0         MOV     C,0xE0 /* A   */.0
   \   000188   85..82       MOV     DPL,?XSP + 0
   \   00018B   85..83       MOV     DPH,?XSP + 1
   \   00018E   5060         JNC     ??dmp_enable_feature_11
   1066                  /* Enable tap. */
   1067                  tmp[0] = 0xF8;
   \   000190   74F8         MOV     A,#-0x8
   \   000192   F0           MOVX    @DPTR,A
   1068                  mpu_write_mem(CFG_20, 1, tmp);
   \   000193                ; Setup parameters for call to function mpu_write_mem
   \   000193   78..         MOV     R0,#?V0 + 4
   \   000195   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000198   7C01         MOV     R4,#0x1
   \   00019A   7D00         MOV     R5,#0x0
   \   00019C   7AB0         MOV     R2,#-0x50
   \   00019E   7B08         MOV     R3,#0x8
   \   0001A0   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0001A3   12....       LCALL   ?DEALLOC_XSTACK8
   1069                  dmp_set_tap_thresh(TAP_XYZ, 250);
   \   0001A6                ; Setup parameters for call to function dmp_set_tap_thresh
   \   0001A6   7AFA         MOV     R2,#-0x6
   \   0001A8   7B00         MOV     R3,#0x0
   \   0001AA   7907         MOV     R1,#0x7
   \   0001AC   12....       LCALL   ??dmp_set_tap_thresh?relay
   1070                  dmp_set_tap_axes(TAP_XYZ);
   \   0001AF                ; Setup parameters for call to function dmp_set_tap_axes
   \   0001AF   7907         MOV     R1,#0x7
   \   0001B1   12....       LCALL   ??dmp_set_tap_axes?relay
   1071                  dmp_set_tap_count(1);
   \   0001B4                ; Setup parameters for call to function dmp_set_tap_count
   \   0001B4   7901         MOV     R1,#0x1
   \   0001B6   12....       LCALL   ??dmp_set_tap_count?relay
   1072                  dmp_set_tap_time(100);
   \   0001B9                ; Setup parameters for call to function dmp_set_tap_time
   \   0001B9   7A64         MOV     R2,#0x64
   \   0001BB   7B00         MOV     R3,#0x0
   \   0001BD   12....       LCALL   ??dmp_set_tap_time?relay
   1073                  dmp_set_tap_time_multi(500);
   \   0001C0                ; Setup parameters for call to function dmp_set_tap_time_multi
   \   0001C0   7AF4         MOV     R2,#-0xc
   \   0001C2   7B01         MOV     R3,#0x1
   \   0001C4   12....       LCALL   ??dmp_set_tap_time_multi?relay
   1074          
   1075                  dmp_set_shake_reject_thresh(GYRO_SF, 200);
                                                     ^
Warning[Pe061]: integer operation result is out of range
   \   0001C7                ; Setup parameters for call to function dmp_set_shake_reject_thresh
   \   0001C7   75..C8       MOV     ?V0 + 4,#-0x38
   \   0001CA   75..00       MOV     ?V0 + 5,#0x0
   \   0001CD   78..         MOV     R0,#?V0 + 4
   \   0001CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D2   90....       MOV     DPTR,#__Constant_3b86e0
   \   0001D5   12....       LCALL   ?XLOAD_R2345
   \   0001D8   12....       LCALL   ??dmp_set_shake_reject_thresh?relay
   \   0001DB   7402         MOV     A,#0x2
   \   0001DD   12....       LCALL   ?DEALLOC_XSTACK8
   1076                  dmp_set_shake_reject_time(40);
   \   0001E0                ; Setup parameters for call to function dmp_set_shake_reject_time
   \   0001E0   7A28         MOV     R2,#0x28
   \   0001E2   7B00         MOV     R3,#0x0
   \   0001E4   12....       LCALL   ??dmp_set_shake_reject_time?relay
   1077                  dmp_set_shake_reject_timeout(10);
   \   0001E7                ; Setup parameters for call to function dmp_set_shake_reject_timeout
   \   0001E7   7A0A         MOV     R2,#0xa
   \   0001E9   7B00         MOV     R3,#0x0
   \   0001EB   12....       LCALL   ??dmp_set_shake_reject_timeout?relay
   \   0001EE   8016         SJMP    ??dmp_enable_feature_12
   1078              } else {
   1079                  tmp[0] = 0xD8;
   \                     ??dmp_enable_feature_11:
   \   0001F0   74D8         MOV     A,#-0x28
   \   0001F2   F0           MOVX    @DPTR,A
   1080                  mpu_write_mem(CFG_20, 1, tmp);
   \   0001F3                ; Setup parameters for call to function mpu_write_mem
   \   0001F3   78..         MOV     R0,#?V0 + 4
   \   0001F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F8   7C01         MOV     R4,#0x1
   \   0001FA   7D00         MOV     R5,#0x0
   \   0001FC   7AB0         MOV     R2,#-0x50
   \   0001FE   7B08         MOV     R3,#0x8
   \   000200   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1081              }
   \                     ??CrossCallReturnLabel_120:
   \   000203   12....       LCALL   ?DEALLOC_XSTACK8
   1082          
   1083              if (mask & DMP_FEATURE_ANDROID_ORIENT) {
   \                     ??dmp_enable_feature_12:
   \   000206   EE           MOV     A,R6
   \   000207   5402         ANL     A,#0x2
   \   000209   85..82       MOV     DPL,?XSP + 0
   \   00020C   85..83       MOV     DPH,?XSP + 1
   \   00020F   6004         JZ      ??dmp_enable_feature_13
   1084                  tmp[0] = 0xD9;
   \   000211   74D9         MOV     A,#-0x27
   \   000213   8002         SJMP    ??dmp_enable_feature_14
   1085              } else
   1086                  tmp[0] = 0xD8;
   \                     ??dmp_enable_feature_13:
   \   000215   74D8         MOV     A,#-0x28
   \                     ??dmp_enable_feature_14:
   \   000217   F0           MOVX    @DPTR,A
   1087              mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
   \   000218                ; Setup parameters for call to function mpu_write_mem
   \   000218   8582..       MOV     ?V0 + 4,DPL
   \   00021B   8583..       MOV     ?V0 + 5,DPH
   \   00021E   78..         MOV     R0,#?V0 + 4
   \   000220   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000223   7C01         MOV     R4,#0x1
   \   000225   7D00         MOV     R5,#0x0
   \   000227   7A3D         MOV     R2,#0x3d
   \   000229   7B07         MOV     R3,#0x7
   \   00022B   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00022E   12....       LCALL   ?DEALLOC_XSTACK8
   1088          
   1089              if (mask & DMP_FEATURE_LP_QUAT)
   \   000231   EE           MOV     A,R6
   \   000232   5404         ANL     A,#0x4
   \   000234   6004         JZ      ??dmp_enable_feature_15
   1090                  dmp_enable_lp_quat(1);
   \   000236                ; Setup parameters for call to function dmp_enable_lp_quat
   \   000236   7901         MOV     R1,#0x1
   \   000238   8002         SJMP    ??dmp_enable_feature_16
   1091              else
   1092                  dmp_enable_lp_quat(0);
   \                     ??dmp_enable_feature_15:
   \   00023A                ; Setup parameters for call to function dmp_enable_lp_quat
   \   00023A   7900         MOV     R1,#0x0
   \                     ??dmp_enable_feature_16:
   \   00023C   12....       LCALL   ??dmp_enable_lp_quat?relay
   1093          
   1094              if (mask & DMP_FEATURE_6X_LP_QUAT)
   \   00023F   EE           MOV     A,R6
   \   000240   5410         ANL     A,#0x10
   \   000242   6004         JZ      ??dmp_enable_feature_17
   1095                  dmp_enable_6x_lp_quat(1);
   \   000244                ; Setup parameters for call to function dmp_enable_6x_lp_quat
   \   000244   7901         MOV     R1,#0x1
   \   000246   8002         SJMP    ??dmp_enable_feature_18
   1096              else
   1097                  dmp_enable_6x_lp_quat(0);
   \                     ??dmp_enable_feature_17:
   \   000248                ; Setup parameters for call to function dmp_enable_6x_lp_quat
   \   000248   7900         MOV     R1,#0x0
   \                     ??dmp_enable_feature_18:
   \   00024A   12....       LCALL   ??dmp_enable_6x_lp_quat?relay
   1098          
   1099              /* Pedometer is always enabled. */
   1100              dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
   \   00024D   EE           MOV     A,R6
   \   00024E   4408         ORL     A,#0x8
   \   000250   F8           MOV     R0,A
   \   000251   EF           MOV     A,R7
   \   000252   F9           MOV     R1,A
   \   000253   90....       MOV     DPTR,#dmp + 6
   \   000256   E8           MOV     A,R0
   \   000257   F0           MOVX    @DPTR,A
   \   000258   A3           INC     DPTR
   \   000259   E9           MOV     A,R1
   \   00025A   F0           MOVX    @DPTR,A
   1101              mpu_reset_fifo();
   \   00025B                ; Setup parameters for call to function mpu_reset_fifo
   \   00025B   12....       LCALL   ??mpu_reset_fifo?relay
   1102          
   1103              dmp.packet_length = 0;
   \   00025E   90....       MOV     DPTR,#dmp + 10
   \   000261   E4           CLR     A
   \   000262   F0           MOVX    @DPTR,A
   1104              if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
   \   000263   E5..         MOV     A,?V0 + 3
   \   000265   6003         JZ      ??dmp_enable_feature_19
   1105                  dmp.packet_length += 6;
   \   000267   7406         MOV     A,#0x6
   \   000269   F0           MOVX    @DPTR,A
   1106              if (mask & DMP_FEATURE_SEND_ANY_GYRO)
   \                     ??dmp_enable_feature_19:
   \   00026A   E5..         MOV     A,?V0 + 0
   \   00026C   45..         ORL     A,?V0 + 1
   \   00026E   6004         JZ      ??dmp_enable_feature_20
   1107                  dmp.packet_length += 6;
   \   000270   E0           MOVX    A,@DPTR
   \   000271   2406         ADD     A,#0x6
   \   000273   F0           MOVX    @DPTR,A
   1108              if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
   \                     ??dmp_enable_feature_20:
   \   000274   EE           MOV     A,R6
   \   000275   5414         ANL     A,#0x14
   \   000277   6004         JZ      ??dmp_enable_feature_21
   1109                  dmp.packet_length += 16;
   \   000279   E0           MOVX    A,@DPTR
   \   00027A   2410         ADD     A,#0x10
   \   00027C   F0           MOVX    @DPTR,A
   1110              if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
   \                     ??dmp_enable_feature_21:
   \   00027D   E5..         MOV     A,?V0 + 2
   \   00027F   6004         JZ      ??dmp_enable_feature_22
   1111                  dmp.packet_length += 4;
   \   000281   E0           MOVX    A,@DPTR
   \   000282   2404         ADD     A,#0x4
   \   000284   F0           MOVX    @DPTR,A
   1112          
   1113              return 0;
   \                     ??dmp_enable_feature_22:
   \   000285   7A00         MOV     R2,#0x0
   \   000287   7B00         MOV     R3,#0x0
   \   000289   740A         MOV     A,#0xa
   \   00028B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00028E   7F06         MOV     R7,#0x6
   \   000290   02....       LJMP    ?BANKED_LEAVE_XDATA
   1114          }
   1115          
   1116          /**
   1117           *  @brief      Get list of currently enabled DMP features.
   1118           *  @param[out] Mask of enabled features.
   1119           *  @return     0 if successful.
   1120           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1121          int dmp_get_enabled_features(unsigned short *mask)
   \                     dmp_get_enabled_features:
   1122          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1123              mask[0] = dmp.feature_mask;
   \   000004   90....       MOV     DPTR,#dmp + 6
   \   000007   02....       LJMP    ?Subroutine2 & 0xFFFF
   1124              return 0;
   1125          }
   1126          
   1127          /**
   1128           *  @brief      Calibrate the gyro data in the DMP.
   1129           *  After eight seconds of no motion, the DMP will compute gyro biases and
   1130           *  subtract them from the quaternion output. If @e dmp_enable_feature is
   1131           *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
   1132           *  subtracted from the gyro output.
   1133           *  @param[in]  enable  1 to enable gyro calibration.
   1134           *  @return     0 if successful.
   1135           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1136          int dmp_enable_gyro_cal(unsigned char enable)
   \                     dmp_enable_gyro_cal:
   1137          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   1138              if (enable) {
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   AC82         MOV     R4,DPL
   \   000013   AD83         MOV     R5,DPH
   \   000015   6008         JZ      ??dmp_enable_gyro_cal_0
   1139                  unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
   \   000017   7583..       MOV     DPH,#(`?<Constant {184, 170, 179, 141, 180, 152, 13, ` >> 8) & 0xff
   \   00001A   7582..       MOV     DPL,#`?<Constant {184, 170, 179, 141, 180, 152, 13, ` & 0xff
   \   00001D   8006         SJMP    ??dmp_enable_gyro_cal_1
   1140                  return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
   1141              } else {
   1142                  unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
   \                     ??dmp_enable_gyro_cal_0:
   \   00001F   7583..       MOV     DPH,#(`?<Constant {184, 170, 170, 170, 176, 136, 195,` >> 8) & 0xff
   \   000022   7582..       MOV     DPL,#`?<Constant {184, 170, 170, 170, 176, 136, 195,` & 0xff
   \                     ??dmp_enable_gyro_cal_1:
   \   000025   7409         MOV     A,#0x9
   \   000027   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1143                  return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
   \   00002A                ; Setup parameters for call to function mpu_write_mem
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   8582..       MOV     ?V0 + 0,DPL
   \   000033   8583..       MOV     ?V0 + 1,DPH
   \   000036   78..         MOV     R0,#?V0 + 0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7C09         MOV     R4,#0x9
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   7AB8         MOV     R2,#-0x48
   \   000041   7B04         MOV     R3,#0x4
   \   000043   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1144              }
   \                     ??CrossCallReturnLabel_122:
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
   \   000049   7409         MOV     A,#0x9
   \   00004B   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   1145          }
   1146          
   1147          /**
   1148           *  @brief      Generate 3-axis quaternions from the DMP.
   1149           *  In this driver, the 3-axis and 6-axis DMP quaternion features are mutually
   1150           *  exclusive.
   1151           *  @param[in]  enable  1 to enable 3-axis quaternion.
   1152           *  @return     0 if successful.
   1153           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B0A         MOV     R3,#0xa
   \   000002   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008                ; Setup parameters for call to function mpu_reset_fifo
   \   000008                ; Setup parameters for call to function mpu_reset_fifo
   \   000008   12....       LCALL   ??mpu_reset_fifo?relay
   \   00000B                REQUIRE ??Subroutine44_0
   \   00000B                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1154          int dmp_enable_lp_quat(unsigned char enable)
   \                     dmp_enable_lp_quat:
   1155          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   1156              unsigned char regs[4];
   1157              if (enable) {
   \   00000B   6023         JZ      ??dmp_enable_lp_quat_0
   1158                  regs[0] = DINBC0;
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   74C0         MOV     A,#-0x40
   \   000015   F0           MOVX    @DPTR,A
   1159                  regs[1] = DINBC2;
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   74C2         MOV     A,#-0x3e
   \   00001D   F0           MOVX    @DPTR,A
   1160                  regs[2] = DINBC4;
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   74C4         MOV     A,#-0x3c
   \   000025   F0           MOVX    @DPTR,A
   1161                  regs[3] = DINBC6;
   \   000026   7403         MOV     A,#0x3
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   74C6         MOV     A,#-0x3a
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   8020         SJMP    ??dmp_enable_lp_quat_1
   1162              }
   1163              else
   1164                  memset(regs, 0x8B, 4);
   \                     ??dmp_enable_lp_quat_0:
   \   000030                ; Setup parameters for call to function memset
   \   000030   75..04       MOV     ?V0 + 0,#0x4
   \   000033   75..00       MOV     ?V0 + 1,#0x0
   \   000036   78..         MOV     R0,#?V0 + 0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7C8B         MOV     R4,#-0x75
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   AA82         MOV     R2,DPL
   \   000046   AB83         MOV     R3,DPH
   \   000048   12....       LCALL   ??memset?relay
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   1165          
   1166              mpu_write_mem(CFG_LP_QUAT, 4, regs);
   \                     ??dmp_enable_lp_quat_1:
   \   000050                ; Setup parameters for call to function mpu_write_mem
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   8582..       MOV     ?V0 + 0,DPL
   \   000059   8583..       MOV     ?V0 + 1,DPH
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   7C04         MOV     R4,#0x4
   \   000063   7D00         MOV     R5,#0x0
   \   000065   7A98         MOV     R2,#-0x68
   \   000067   02....       LJMP    ?Subroutine0 & 0xFFFF
   1167          
   1168              return mpu_reset_fifo();
   1169          }
   1170          
   1171          /**
   1172           *  @brief       Generate 6-axis quaternions from the DMP.
   1173           *  In this driver, the 3-axis and 6-axis DMP quaternion features are mutually
   1174           *  exclusive.
   1175           *  @param[in]   enable  1 to enable 6-axis quaternion.
   1176           *  @return      0 if successful.
   1177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1178          int dmp_enable_6x_lp_quat(unsigned char enable)
   \                     dmp_enable_6x_lp_quat:
   1179          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   1180              unsigned char regs[4];
   1181              if (enable) {
   \   00000B   6023         JZ      ??dmp_enable_6x_lp_quat_0
   1182                  regs[0] = DINA20;
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   7420         MOV     A,#0x20
   \   000015   F0           MOVX    @DPTR,A
   1183                  regs[1] = DINA28;
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   7428         MOV     A,#0x28
   \   00001D   F0           MOVX    @DPTR,A
   1184                  regs[2] = DINA30;
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7430         MOV     A,#0x30
   \   000025   F0           MOVX    @DPTR,A
   1185                  regs[3] = DINA38;
   \   000026   7403         MOV     A,#0x3
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   7438         MOV     A,#0x38
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   8020         SJMP    ??dmp_enable_6x_lp_quat_1
   1186              } else
   1187                  memset(regs, 0xA3, 4);
   \                     ??dmp_enable_6x_lp_quat_0:
   \   000030                ; Setup parameters for call to function memset
   \   000030   75..04       MOV     ?V0 + 0,#0x4
   \   000033   75..00       MOV     ?V0 + 1,#0x0
   \   000036   78..         MOV     R0,#?V0 + 0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7CA3         MOV     R4,#-0x5d
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   AA82         MOV     R2,DPL
   \   000046   AB83         MOV     R3,DPH
   \   000048   12....       LCALL   ??memset?relay
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   1188          
   1189              mpu_write_mem(CFG_8, 4, regs);
   \                     ??dmp_enable_6x_lp_quat_1:
   \   000050                ; Setup parameters for call to function mpu_write_mem
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   8582..       MOV     ?V0 + 0,DPL
   \   000059   8583..       MOV     ?V0 + 1,DPH
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   7C04         MOV     R4,#0x4
   \   000063   7D00         MOV     R5,#0x0
   \   000065   7A9E         MOV     R2,#-0x62
   \   000067   02....       LJMP    ?Subroutine0 & 0xFFFF
   1190          
   1191              return mpu_reset_fifo();
   1192          }
   1193          
   1194          /**
   1195           *  @brief      Decode the four-byte gesture data and execute any callbacks.
   1196           *  @param[in]  gesture Gesture data from DMP packet.
   1197           *  @return     0 if successful.
   1198           */
   1199          static int decode_gesture(unsigned char *gesture)
   1200          {
   1201              unsigned char tap, android_orient;
   1202          
   1203              android_orient = gesture[3] & 0xC0;
   1204              tap = 0x3F & gesture[3];
   1205          
   1206              if (gesture[1] & INT_SRC_TAP) {
   1207                  unsigned char direction, count;
   1208                  direction = tap >> 3;
   1209                  count = (tap % 8) + 1;
   1210                  if (dmp.tap_cb)
   1211                      dmp.tap_cb(direction, count);
   1212              }
   1213          
   1214              if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
   1215                  if (dmp.android_orient_cb)
   1216                      dmp.android_orient_cb(android_orient >> 6);
   1217              }
   1218          
   1219              return 0;
   1220          }
   1221          
   1222          /**
   1223           *  @brief      Specify when a DMP interrupt should occur.
   1224           *  A DMP interrupt can be configured to trigger on either of the two
   1225           *  conditions below:
   1226           *  \n a. One FIFO period has elapsed (set by @e mpu_set_sample_rate).
   1227           *  \n b. A tap event has been detected.
   1228           *  @param[in]  mode    DMP_INT_GESTURE or DMP_INT_CONTINUOUS.
   1229           *  @return     0 if successful.
   1230           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1231          int dmp_set_interrupt_mode(unsigned char mode)
   \                     dmp_set_interrupt_mode:
   1232          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   1233              const unsigned char regs_continuous[11] =
   1234                  {0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9};
   \   00000C   740B         MOV     A,#0xb
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   AC82         MOV     R4,DPL
   \   000013   AD83         MOV     R5,DPH
   \   000015   7583..       MOV     DPH,#(`?<Constant {216, 177, 185, 243, 139, 163, 145,` >> 8) & 0xff
   \   000018   7582..       MOV     DPL,#`?<Constant {216, 177, 185, 243, 139, 163, 145,` & 0xff
   \   00001B   740B         MOV     A,#0xb
   \   00001D   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1235              const unsigned char regs_gesture[11] =
   1236                  {0xda, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0xda, 0xb4, 0xda};
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   AC82         MOV     R4,DPL
   \   000028   AD83         MOV     R5,DPH
   \   00002A   7583..       MOV     DPH,#(`?<Constant {218, 177, 185, 243, 139, 163, 145,` >> 8) & 0xff
   \   00002D   7582..       MOV     DPL,#`?<Constant {218, 177, 185, 243, 139, 163, 145,` & 0xff
   \   000030   740B         MOV     A,#0xb
   \   000032   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1237          
   1238              switch (mode) {
   \   000035   EE           MOV     A,R6
   \   000036   14           DEC     A
   \   000037   6023         JZ      ??dmp_set_interrupt_mode_0
   \   000039   14           DEC     A
   \   00003A   7028         JNZ     ??dmp_set_interrupt_mode_1
   1239              case DMP_INT_CONTINUOUS:
   1240                  return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
   1241                      (unsigned char*)regs_continuous);
   \   00003C                ; Setup parameters for call to function mpu_write_mem
   \   00003C   740B         MOV     A,#0xb
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??dmp_set_interrupt_mode_2:
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   7C0B         MOV     R4,#0xb
   \   00004E   7D00         MOV     R5,#0x0
   \   000050   7A82         MOV     R2,#-0x7e
   \   000052   7B0A         MOV     R3,#0xa
   \   000054   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   800C         SJMP    ??dmp_set_interrupt_mode_3
   1242              case DMP_INT_GESTURE:
   1243                  return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
   1244                      (unsigned char*)regs_gesture);
   \                     ??dmp_set_interrupt_mode_0:
   \   00005C                ; Setup parameters for call to function mpu_write_mem
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   80DD         SJMP    ??dmp_set_interrupt_mode_2
   1245              default:
   1246                  return -1;
   \                     ??dmp_set_interrupt_mode_1:
   \   000064   7AFF         MOV     R2,#-0x1
   \   000066   7BFF         MOV     R3,#-0x1
   \                     ??dmp_set_interrupt_mode_3:
   \   000068   7416         MOV     A,#0x16
   1247              }
   \   00006A   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   1248          }
   1249          
   1250          /**
   1251           *  @brief      Get one packet from the FIFO.
   1252           *  If @e sensors does not contain a particular sensor, disregard the data
   1253           *  returned to that pointer.
   1254           *  \n @e sensors can contain a combination of the following flags:
   1255           *  \n INV_X_GYRO, INV_Y_GYRO, INV_Z_GYRO
   1256           *  \n INV_XYZ_GYRO
   1257           *  \n INV_XYZ_ACCEL
   1258           *  \n INV_WXYZ_QUAT
   1259           *  \n If the FIFO has no new data, @e sensors will be zero.
   1260           *  \n If the FIFO is disabled, @e sensors will be zero and this function will
   1261           *  return a non-zero error code.
   1262           *  @param[out] gyro        Gyro data in hardware units.
   1263           *  @param[out] accel       Accel data in hardware units.
   1264           *  @param[out] quat        3-axis quaternion data in hardware units.
   1265           *  @param[out] timestamp   Timestamp in milliseconds.
   1266           *  @param[out] sensors     Mask of sensors read from FIFO.
   1267           *  @param[out] more        Number of remaining packets.
   1268           *  @return     0 if successful.
   1269           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1270          int dmp_read_fifo(short *gyro, short *accel, long *quat,
   \                     dmp_read_fifo:
   1271              unsigned long *timestamp, short *sensors, unsigned char *more)
   1272          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 57
   \   000005   74C7         MOV     A,#-0x39
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   7457         MOV     A,#0x57
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 1,A
   1273              unsigned char fifo_data[MAX_PACKET_LENGTH];
   1274              unsigned char ii = 0;
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   E4           CLR     A
   \   000031   F0           MOVX    @DPTR,A
   1275          
   1276              /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
   1277               * cache this value and save some cycles.
   1278               */
   1279              sensors[0] = 0;
   \   000032   7455         MOV     A,#0x55
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ?Subroutine21 & 0xFFFF
   1280          
   1281              /* Get a packet. */
   1282              if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
   \                     ??CrossCallReturnLabel_28:
   \   00003A                ; Setup parameters for call to function mpu_read_fifo_stream
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   740B         MOV     A,#0xb
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   AC82         MOV     R4,DPL
   \   000046   AD83         MOV     R5,DPH
   \   000048   90....       MOV     DPTR,#dmp + 10
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   ??mpu_read_fifo_stream?relay
   \   000052   7402         MOV     A,#0x2
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   8B..         MOV     ?V0 + 1,R3
   \   000059   EA           MOV     A,R2
   \   00005A   45..         ORL     A,?V0 + 1
   \   00005C   6007         JZ      ??dmp_read_fifo_0
   1283                  return -1;
   \                     ??dmp_read_fifo_1:
   \   00005E   7AFF         MOV     R2,#-0x1
   \   000060   7BFF         MOV     R3,#-0x1
   \   000062   02....       LJMP    ??dmp_read_fifo_2 & 0xFFFF
   1284          
   1285              /* Parse DMP packet. */
   1286              if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
   \                     ??dmp_read_fifo_0:
   \   000065   90....       MOV     DPTR,#dmp + 6
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FE           MOV     R6,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FF           MOV     R7,A
   \   00006D   EE           MOV     A,R6
   \   00006E   5414         ANL     A,#0x14
   \   000070   7003         JNZ     $+5
   \   000072   02....       LJMP    ??dmp_read_fifo_3 & 0xFFFF
   1287          #ifdef FIFO_CORRUPTION_CHECK
   1288                  long quat_q14[4], quat_mag_sq;
   1289          #endif
   1290                  quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
   1291                      ((long)fifo_data[2] << 8) | fifo_data[3];
   \   000075   7409         MOV     A,#0x9
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00007D   12....       LCALL   ?L_SHL
   \   000080   740A         MOV     A,#0xa
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000088   12....       LCALL   ?L_SHL
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   79..         MOV     R1,#?V0 + 4
   \   00008F   12....       LCALL   ?L_IOR
   \   000092   740B         MOV     A,#0xb
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00009A   12....       LCALL   ?L_SHL
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   79..         MOV     R1,#?V0 + 4
   \   0000A1   12....       LCALL   ?L_IOR
   \   0000A4   740C         MOV     A,#0xc
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000AC   12....       LCALL   ?L_IOR
   \   0000AF   7405         MOV     A,#0x5
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   78..         MOV     R0,#?V0 + 0
   \   0000B6   12....       LCALL   ?L_MOV_TO_X
   \   0000B9   7405         MOV     A,#0x5
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL   ?XLOAD_R2345
   \   0000C1   7451         MOV     A,#0x51
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0000C9   12....       LCALL   ?XSTORE_R2345
   1292                  quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
   1293                      ((long)fifo_data[6] << 8) | fifo_data[7];
   \   0000CC   740D         MOV     A,#0xd
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F5..         MOV     ?V0 + 4,A
   \   0000D4   7418         MOV     A,#0x18
   \   0000D6   78..         MOV     R0,#?V0 + 4
   \   0000D8   12....       LCALL   ?L_SHL
   \   0000DB   740E         MOV     A,#0xe
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000E3   F5..         MOV     ?V0 + 2,A
   \   0000E5   F5..         MOV     ?V0 + 3,A
   \   0000E7   7410         MOV     A,#0x10
   \   0000E9   78..         MOV     R0,#?V0 + 0
   \   0000EB   12....       LCALL   ?L_SHL
   \   0000EE   78..         MOV     R0,#?V0 + 4
   \   0000F0   79..         MOV     R1,#?V0 + 0
   \   0000F2   12....       LCALL   ?L_IOR
   \   0000F5   740F         MOV     A,#0xf
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000FD   12....       LCALL   ?L_SHL
   \   000100   78..         MOV     R0,#?V0 + 4
   \   000102   79..         MOV     R1,#?V0 + 0
   \   000104   12....       LCALL   ?L_IOR
   \   000107   7410         MOV     A,#0x10
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00010F   78..         MOV     R0,#?V0 + 4
   \   000111   79..         MOV     R1,#?V0 + 0
   \   000113   12....       LCALL   ?L_IOR
   \   000116   7451         MOV     A,#0x51
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00011E   78..         MOV     R0,#?V0 + 4
   \   000120   12....       LCALL   ?L_MOV_TO_X
   1294                  quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
   1295                      ((long)fifo_data[10] << 8) | fifo_data[11];
   \   000123   7411         MOV     A,#0x11
   \   000125   12....       LCALL   ?XSTACK_DISP0_8
   \   000128   E0           MOVX    A,@DPTR
   \   000129   F5..         MOV     ?V0 + 8,A
   \   00012B   E4           CLR     A
   \   00012C   F5..         MOV     ?V0 + 9,A
   \   00012E   F5..         MOV     ?V0 + 10,A
   \   000130   F5..         MOV     ?V0 + 11,A
   \   000132   7418         MOV     A,#0x18
   \   000134   78..         MOV     R0,#?V0 + 8
   \   000136   12....       LCALL   ?L_SHL
   \   000139   7412         MOV     A,#0x12
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   F5..         MOV     ?V0 + 0,A
   \   000141   7410         MOV     A,#0x10
   \   000143   78..         MOV     R0,#?V0 + 0
   \   000145   12....       LCALL   ?L_SHL
   \   000148   78..         MOV     R0,#?V0 + 8
   \   00014A   79..         MOV     R1,#?V0 + 0
   \   00014C   12....       LCALL   ?L_IOR
   \   00014F   7413         MOV     A,#0x13
   \   000151   12....       LCALL   ?XSTACK_DISP0_8
   \   000154   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000157   12....       LCALL   ?L_SHL
   \   00015A   78..         MOV     R0,#?V0 + 8
   \   00015C   79..         MOV     R1,#?V0 + 0
   \   00015E   12....       LCALL   ?L_IOR
   \   000161   7414         MOV     A,#0x14
   \   000163   12....       LCALL   ?XSTACK_DISP0_8
   \   000166   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000169   78..         MOV     R0,#?V0 + 8
   \   00016B   79..         MOV     R1,#?V0 + 0
   \   00016D   12....       LCALL   ?L_IOR
   \   000170   7451         MOV     A,#0x51
   \   000172   12....       LCALL   ?XSTACK_DISP0_8
   \   000175   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   78..         MOV     R0,#?V0 + 8
   \   00017E   12....       LCALL   ?L_MOV_TO_X
   1296                  quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
   1297                      ((long)fifo_data[14] << 8) | fifo_data[15];
   \   000181   7415         MOV     A,#0x15
   \   000183   12....       LCALL   ?XSTACK_DISP0_8
   \   000186   E0           MOVX    A,@DPTR
   \   000187   F5..         MOV     ?V0 + 12,A
   \   000189   E4           CLR     A
   \   00018A   F5..         MOV     ?V0 + 13,A
   \   00018C   F5..         MOV     ?V0 + 14,A
   \   00018E   F5..         MOV     ?V0 + 15,A
   \   000190   7418         MOV     A,#0x18
   \   000192   78..         MOV     R0,#?V0 + 12
   \   000194   12....       LCALL   ?L_SHL
   \   000197   7416         MOV     A,#0x16
   \   000199   12....       LCALL   ?XSTACK_DISP0_8
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   F5..         MOV     ?V0 + 0,A
   \   00019F   7410         MOV     A,#0x10
   \   0001A1   78..         MOV     R0,#?V0 + 0
   \   0001A3   12....       LCALL   ?L_SHL
   \   0001A6   78..         MOV     R0,#?V0 + 12
   \   0001A8   79..         MOV     R1,#?V0 + 0
   \   0001AA   12....       LCALL   ?L_IOR
   \   0001AD   7417         MOV     A,#0x17
   \   0001AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B2   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001B5   12....       LCALL   ?L_SHL
   \   0001B8   78..         MOV     R0,#?V0 + 12
   \   0001BA   79..         MOV     R1,#?V0 + 0
   \   0001BC   12....       LCALL   ?L_IOR
   \   0001BF   7418         MOV     A,#0x18
   \   0001C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C4   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0001C7   78..         MOV     R0,#?V0 + 12
   \   0001C9   79..         MOV     R1,#?V0 + 0
   \   0001CB   12....       LCALL   ?L_IOR
   \   0001CE   7451         MOV     A,#0x51
   \   0001D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D3   E0           MOVX    A,@DPTR
   \   0001D4   240C         ADD     A,#0xc
   \   0001D6   F8           MOV     R0,A
   \   0001D7   A3           INC     DPTR
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   3400         ADDC    A,#0x0
   \   0001DB   F9           MOV     R1,A
   \   0001DC   8882         MOV     DPL,R0
   \   0001DE   8983         MOV     DPH,R1
   \   0001E0   78..         MOV     R0,#?V0 + 12
   \   0001E2   12....       LCALL   ?L_MOV_TO_X
   1298                  ii += 16;
   \   0001E5   85..82       MOV     DPL,?XSP + 0
   \   0001E8   85..83       MOV     DPH,?XSP + 1
   \   0001EB   7410         MOV     A,#0x10
   \   0001ED   F0           MOVX    @DPTR,A
   1299          #ifdef FIFO_CORRUPTION_CHECK
   1300                  /* We can detect a corrupted FIFO by monitoring the quaternion data and
   1301                   * ensuring that the magnitude is always normalized to one. This
   1302                   * shouldn't happen in normal operation, but if an I2C error occurs,
   1303                   * the FIFO reads might become misaligned.
   1304                   *
   1305                   * Let's start by scaling down the quaternion data to avoid long long
   1306                   * math.
   1307                   */
   1308                  quat_q14[0] = quat[0] >> 16;
   \   0001EE   7405         MOV     A,#0x5
   \   0001F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F3   78..         MOV     R0,#?V0 + 0
   \   0001F5   12....       LCALL   ?L_MOV_X
   \   0001F8   7410         MOV     A,#0x10
   \   0001FA   78..         MOV     R0,#?V0 + 0
   \   0001FC   12....       LCALL   ?SL_SHR
   \   0001FF   7429         MOV     A,#0x29
   \   000201   12....       LCALL   ?XSTACK_DISP0_8
   \   000204   78..         MOV     R0,#?V0 + 0
   \   000206   12....       LCALL   ?L_MOV_TO_X
   1309                  quat_q14[1] = quat[1] >> 16;
   \   000209   7410         MOV     A,#0x10
   \   00020B   78..         MOV     R0,#?V0 + 4
   \   00020D   12....       LCALL   ?SL_SHR
   \   000210   742D         MOV     A,#0x2d
   \   000212   12....       LCALL   ?XSTACK_DISP0_8
   \   000215   78..         MOV     R0,#?V0 + 4
   \   000217   12....       LCALL   ?L_MOV_TO_X
   1310                  quat_q14[2] = quat[2] >> 16;
   \   00021A   85....       MOV     ?V0 + 0,?V0 + 8
   \   00021D   85....       MOV     ?V0 + 1,?V0 + 9
   \   000220   85....       MOV     ?V0 + 2,?V0 + 10
   \   000223   85....       MOV     ?V0 + 3,?V0 + 11
   \   000226   7410         MOV     A,#0x10
   \   000228   78..         MOV     R0,#?V0 + 0
   \   00022A   12....       LCALL   ?SL_SHR
   \   00022D   7405         MOV     A,#0x5
   \   00022F   12....       LCALL   ?XSTACK_DISP0_8
   \   000232   78..         MOV     R0,#?V0 + 0
   \   000234   12....       LCALL   ?L_MOV_TO_X
   \   000237   7410         MOV     A,#0x10
   \   000239   78..         MOV     R0,#?V0 + 8
   \   00023B   12....       LCALL   ?SL_SHR
   \   00023E   7431         MOV     A,#0x31
   \   000240   12....       LCALL   ?XSTACK_DISP0_8
   \   000243   78..         MOV     R0,#?V0 + 8
   \   000245   12....       LCALL   ?L_MOV_TO_X
   1311                  quat_q14[3] = quat[3] >> 16;
   \   000248   7410         MOV     A,#0x10
   \   00024A   78..         MOV     R0,#?V0 + 12
   \   00024C   12....       LCALL   ?SL_SHR
   \   00024F   7435         MOV     A,#0x35
   \   000251   12....       LCALL   ?XSTACK_DISP0_8
   \   000254   78..         MOV     R0,#?V0 + 12
   \   000256   12....       LCALL   ?L_MOV_TO_X
   1312                  quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
   1313                      quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
   1314                  if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
   1315                      (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
   \   000259   7429         MOV     A,#0x29
   \   00025B   12....       LCALL   ?XSTACK_DISP0_8
   \   00025E   78..         MOV     R0,#?V0 + 0
   \   000260   12....       LCALL   ?L_MOV_X
   \   000263   7429         MOV     A,#0x29
   \   000265   12....       LCALL   ?XSTACK_DISP0_8
   \   000268   78..         MOV     R0,#?V0 + 8
   \   00026A   12....       LCALL   ?L_MOV_X
   \   00026D   78..         MOV     R0,#?V0 + 0
   \   00026F   79..         MOV     R1,#?V0 + 8
   \   000271   12....       LCALL   ?L_MUL
   \   000274   85....       MOV     ?V0 + 8,?V0 + 4
   \   000277   85....       MOV     ?V0 + 9,?V0 + 5
   \   00027A   85....       MOV     ?V0 + 10,?V0 + 6
   \   00027D   85....       MOV     ?V0 + 11,?V0 + 7
   \   000280   78..         MOV     R0,#?V0 + 8
   \   000282   79..         MOV     R1,#?V0 + 4
   \   000284   12....       LCALL   ?L_MUL
   \   000287   78..         MOV     R0,#?V0 + 0
   \   000289   79..         MOV     R1,#?V0 + 8
   \   00028B   12....       LCALL   ?L_ADD
   \   00028E   7405         MOV     A,#0x5
   \   000290   12....       LCALL   ?XSTACK_DISP0_8
   \   000293   78..         MOV     R0,#?V0 + 8
   \   000295   12....       LCALL   ?L_MOV_X
   \   000298   7405         MOV     A,#0x5
   \   00029A   12....       LCALL   ?XSTACK_DISP0_8
   \   00029D   78..         MOV     R0,#?V0 + 4
   \   00029F   12....       LCALL   ?L_MOV_X
   \   0002A2   78..         MOV     R0,#?V0 + 8
   \   0002A4   79..         MOV     R1,#?V0 + 4
   \   0002A6   12....       LCALL   ?L_MUL
   \   0002A9   78..         MOV     R0,#?V0 + 0
   \   0002AB   79..         MOV     R1,#?V0 + 8
   \   0002AD   12....       LCALL   ?L_ADD
   \   0002B0   85....       MOV     ?V0 + 4,?V0 + 12
   \   0002B3   85....       MOV     ?V0 + 5,?V0 + 13
   \   0002B6   85....       MOV     ?V0 + 6,?V0 + 14
   \   0002B9   85....       MOV     ?V0 + 7,?V0 + 15
   \   0002BC   78..         MOV     R0,#?V0 + 4
   \   0002BE   79..         MOV     R1,#?V0 + 12
   \   0002C0   12....       LCALL   ?L_MUL
   \   0002C3   78..         MOV     R0,#?V0 + 0
   \   0002C5   79..         MOV     R1,#?V0 + 4
   \   0002C7   12....       LCALL   ?L_ADD
   \   0002CA   90....       MOV     DPTR,#__Constant_f1000000
   \   0002CD   78..         MOV     R0,#?V0 + 0
   \   0002CF   12....       LCALL   ?L_ADD_X
   \   0002D2   90....       MOV     DPTR,#__Constant_2000001
   \   0002D5   78..         MOV     R0,#?V0 + 0
   \   0002D7   12....       LCALL   ?UL_GE_X
   \   0002DA   500E         JNC     ??dmp_read_fifo_4
   1316                      /* Quaternion is outside of the acceptable threshold. */
   1317                      mpu_reset_fifo();
   \   0002DC                ; Setup parameters for call to function mpu_reset_fifo
   \   0002DC   12....       LCALL   ??mpu_reset_fifo?relay
   1318                      sensors[0] = 0;
   \   0002DF   7455         MOV     A,#0x55
   \   0002E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E4   12....       LCALL   ?Subroutine21 & 0xFFFF
   1319                      return -1;
   \                     ??CrossCallReturnLabel_29:
   \   0002E7   02....       LJMP    ??dmp_read_fifo_1 & 0xFFFF
   1320                  }
   1321                  sensors[0] |= INV_WXYZ_QUAT;
   \                     ??dmp_read_fifo_4:
   \   0002EA   7455         MOV     A,#0x55
   \   0002EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002EF   12....       LCALL   ?Subroutine23 & 0xFFFF
   1322          #endif
   1323              }
   \                     ??CrossCallReturnLabel_126:
   \   0002F2   A3           INC     DPTR
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   4401         ORL     A,#0x1
   \   0002F6   F0           MOVX    @DPTR,A
   1324          
   1325              if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
   \                     ??dmp_read_fifo_3:
   \   0002F7   EE           MOV     A,R6
   \   0002F8   5440         ANL     A,#0x40
   \   0002FA   6032         JZ      ??dmp_read_fifo_5
   1326                  accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
   \   0002FC   85..82       MOV     DPL,?XSP + 0
   \   0002FF   85..83       MOV     DPH,?XSP + 1
   \   000302   E0           MOVX    A,@DPTR
   \   000303   F8           MOV     R0,A
   \   000304   7409         MOV     A,#0x9
   \   000306   12....       LCALL   ?XSTACK_DISP0_8
   \   000309   12....       LCALL   ?Subroutine8 & 0xFFFF
   1327                  accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
   1328                  accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
   1329                  ii += 6;
   1330                  sensors[0] |= INV_XYZ_ACCEL;
   1331              }
   \                     ??CrossCallReturnLabel_0:
   \   00030C   7401         MOV     A,#0x1
   \   00030E   12....       LCALL   ?XSTACK_DISP0_8
   \   000311   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000314   7401         MOV     A,#0x1
   \   000316   12....       LCALL   ?XSTACK_DISP0_8
   \   000319   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00031C   7401         MOV     A,#0x1
   \   00031E   12....       LCALL   ?XSTACK_DISP0_8
   \   000321   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000324   12....       LCALL   ?XSTACK_DISP0_8
   \   000327   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00032A   E0           MOVX    A,@DPTR
   \   00032B   4408         ORL     A,#0x8
   \   00032D   F0           MOVX    @DPTR,A
   1332          
   1333              if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
   \                     ??dmp_read_fifo_5:
   \   00032E   EE           MOV     A,R6
   \   00032F   5480         ANL     A,#0x80
   \   000331   F8           MOV     R0,A
   \   000332   EF           MOV     A,R7
   \   000333   5401         ANL     A,#0x1
   \   000335   F9           MOV     R1,A
   \   000336   E8           MOV     A,R0
   \   000337   49           ORL     A,R1
   \   000338   6032         JZ      ??dmp_read_fifo_6
   1334                  gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
   \   00033A   85..82       MOV     DPL,?XSP + 0
   \   00033D   85..83       MOV     DPH,?XSP + 1
   \   000340   E0           MOVX    A,@DPTR
   \   000341   F8           MOV     R0,A
   \   000342   7409         MOV     A,#0x9
   \   000344   12....       LCALL   ?XSTACK_DISP0_8
   \   000347   12....       LCALL   ?Subroutine8 & 0xFFFF
   1335                  gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
   1336                  gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
   1337                  ii += 6;
   1338                  sensors[0] |= INV_XYZ_GYRO;
   1339              }
   \                     ??CrossCallReturnLabel_1:
   \   00034A   7403         MOV     A,#0x3
   \   00034C   12....       LCALL   ?XSTACK_DISP0_8
   \   00034F   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000352   7403         MOV     A,#0x3
   \   000354   12....       LCALL   ?XSTACK_DISP0_8
   \   000357   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00035A   7403         MOV     A,#0x3
   \   00035C   12....       LCALL   ?XSTACK_DISP0_8
   \   00035F   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000362   12....       LCALL   ?XSTACK_DISP0_8
   \   000365   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000368   E0           MOVX    A,@DPTR
   \   000369   4470         ORL     A,#0x70
   \   00036B   F0           MOVX    @DPTR,A
   1340          
   1341              /* Gesture data is at the end of the DMP packet. Parse it and call
   1342               * the gesture callbacks (if registered).
   1343               */
   1344              if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
   \                     ??dmp_read_fifo_6:
   \   00036C   EE           MOV     A,R6
   \   00036D   5403         ANL     A,#0x3
   \   00036F   6071         JZ      ??dmp_read_fifo_7
   1345                  decode_gesture(fifo_data + ii);
   \   000371   85..82       MOV     DPL,?XSP + 0
   \   000374   85..83       MOV     DPH,?XSP + 1
   \   000377   E0           MOVX    A,@DPTR
   \   000378   F8           MOV     R0,A
   \   000379   7409         MOV     A,#0x9
   \   00037B   12....       LCALL   ?XSTACK_DISP0_8
   \   00037E   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000381   A3           INC     DPTR
   \   000382   A3           INC     DPTR
   \   000383   A3           INC     DPTR
   \   000384   E0           MOVX    A,@DPTR
   \   000385   FA           MOV     R2,A
   \   000386   74C0         MOV     A,#-0x40
   \   000388   5A           ANL     A,R2
   \   000389   F5..         MOV     ?V0 + 0,A
   \   00038B   743F         MOV     A,#0x3f
   \   00038D   5A           ANL     A,R2
   \   00038E   FB           MOV     R3,A
   \   00038F   8882         MOV     DPL,R0
   \   000391   8983         MOV     DPH,R1
   \   000393   A3           INC     DPTR
   \   000394   AE82         MOV     R6,DPL
   \   000396   AF83         MOV     R7,DPH
   \   000398   E0           MOVX    A,@DPTR
   \   000399   A2E0         MOV     C,0xE0 /* A   */.0
   \   00039B   501F         JNC     ??dmp_read_fifo_8
   \   00039D   90....       MOV     DPTR,#dmp
   \   0003A0   E0           MOVX    A,@DPTR
   \   0003A1   F8           MOV     R0,A
   \   0003A2   A3           INC     DPTR
   \   0003A3   E0           MOVX    A,@DPTR
   \   0003A4   F9           MOV     R1,A
   \   0003A5   E8           MOV     A,R0
   \   0003A6   49           ORL     A,R1
   \   0003A7   6013         JZ      ??dmp_read_fifo_8
   \   0003A9                ; Setup parameters for indirect call
   \   0003A9   7407         MOV     A,#0x7
   \   0003AB   5B           ANL     A,R3
   \   0003AC   2401         ADD     A,#0x1
   \   0003AE   FA           MOV     R2,A
   \   0003AF   EB           MOV     A,R3
   \   0003B0   13           RRC     A
   \   0003B1   13           RRC     A
   \   0003B2   13           RRC     A
   \   0003B3   541F         ANL     A,#0x1f
   \   0003B5   F9           MOV     R1,A
   \   0003B6   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0003B9   12....       LCALL   ?CALL_IND
   \                     ??dmp_read_fifo_8:
   \   0003BC   8E82         MOV     DPL,R6
   \   0003BE   8F83         MOV     DPH,R7
   \   0003C0   E0           MOVX    A,@DPTR
   \   0003C1   A2E3         MOV     C,0xE0 /* A   */.3
   \   0003C3   501D         JNC     ??dmp_read_fifo_7
   \   0003C5   90....       MOV     DPTR,#dmp + 2
   \   0003C8   E0           MOVX    A,@DPTR
   \   0003C9   F8           MOV     R0,A
   \   0003CA   A3           INC     DPTR
   \   0003CB   E0           MOVX    A,@DPTR
   \   0003CC   F9           MOV     R1,A
   \   0003CD   8882         MOV     DPL,R0
   \   0003CF   8983         MOV     DPH,R1
   \   0003D1   E582         MOV     A,DPL
   \   0003D3   4583         ORL     A,DPH
   \   0003D5   600B         JZ      ??dmp_read_fifo_7
   \   0003D7                ; Setup parameters for indirect call
   \   0003D7   E5..         MOV     A,?V0 + 0
   \   0003D9   C4           SWAP    A
   \   0003DA   13           RRC     A
   \   0003DB   13           RRC     A
   \   0003DC   5403         ANL     A,#0x3
   \   0003DE   F9           MOV     R1,A
   \   0003DF   12....       LCALL   ?CALL_IND
   1346          
   1347          //    get_ms(timestamp);
   1348              return 0;
   \                     ??dmp_read_fifo_7:
   \   0003E2   7A00         MOV     R2,#0x0
   \   0003E4   7B00         MOV     R3,#0x0
   \                     ??dmp_read_fifo_2:
   \   0003E6   7439         MOV     A,#0x39
   \   0003E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003EB   7F10         MOV     R7,#0x10
   \   0003ED   02....       LJMP    ?BANKED_LEAVE_XDATA
   1349          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   E4           CLR     A
   \   000004   F5..         MOV     ?V0 + 1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   E4           CLR     A
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   7408         MOV     A,#0x8
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E8           MOV     A,R0
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   E9           MOV     A,R1
   \   000010   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000013   E0           MOVX    A,@DPTR
   \   000014   2406         ADD     A,#0x6
   \   000016   F0           MOVX    @DPTR,A
   \   000017   7455         MOV     A,#0x55
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000006   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FA           MOV     R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   EB           MOV     A,R3
   \   000012   F9           MOV     R1,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8C82         MOV     DPL,R4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FB           MOV     R3,A
   \   000002   8882         MOV     DPL,R0
   \   000004   8983         MOV     DPH,R1
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F8           MOV     R0,A
   \   000004   E583         MOV     A,DPH
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   22           RET
   1350          
   1351          /**
   1352           *  @brief      Register a function to be executed on a tap event.
   1353           *  The tap direction is represented by one of the following:
   1354           *  \n TAP_X_UP
   1355           *  \n TAP_X_DOWN
   1356           *  \n TAP_Y_UP
   1357           *  \n TAP_Y_DOWN
   1358           *  \n TAP_Z_UP
   1359           *  \n TAP_Z_DOWN
   1360           *  @param[in]  func    Callback function.
   1361           *  @return     0 if successful.
   1362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1363          int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
   \                     dmp_register_tap_cb:
   1364          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1365              dmp.tap_cb = func;
   \   000004   90....       MOV     DPTR,#dmp
   \   000007                REQUIRE ?Subroutine6
   \   000007                ; // Fall through to label ?Subroutine6
   1366              return 0;
   1367          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   80..         SJMP    ??Subroutine51_0
   1368          
   1369          /**
   1370           *  @brief      Register a function to be executed on a android orientation event.
   1371           *  @param[in]  func    Callback function.
   1372           *  @return     0 if successful.
   1373           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1374          int dmp_register_android_orient_cb(void (*func)(unsigned char))
   \                     dmp_register_android_orient_cb:
   1375          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1376              dmp.android_orient_cb = func;
   \   000004   90....       MOV     DPTR,#dmp + 2
   \   000007   80..         SJMP    ?Subroutine6
   1377              return 0;
   1378          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_load_motion_driver_firmware?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_load_motion_driver_firmware

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_orientation?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_orientation

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_gyro_bias?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_gyro_bias

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_accel_bias?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_accel_bias

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_fifo_rate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_fifo_rate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_get_fifo_rate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_get_fifo_rate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_tap_thresh?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_tap_thresh

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_tap_axes?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_tap_axes

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_tap_count?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_tap_count

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_tap_time?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_tap_time

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_tap_time_multi?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_tap_time_multi

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_shake_reject_thresh?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_shake_reject_thresh

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_shake_reject_time?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_shake_reject_time

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_shake_reject_timeout?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_shake_reject_timeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_get_pedometer_step_count?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_get_pedometer_step_count

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_pedometer_step_count?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_pedometer_step_count

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_get_pedometer_walk_time?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_get_pedometer_walk_time

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_pedometer_walk_time?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_pedometer_walk_time

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_enable_feature?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_enable_feature

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_get_enabled_features?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_get_enabled_features

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_enable_gyro_cal?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_enable_gyro_cal

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_enable_lp_quat?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_enable_lp_quat

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_enable_6x_lp_quat?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_enable_6x_lp_quat

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_set_interrupt_mode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_set_interrupt_mode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_read_fifo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_read_fifo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_register_tap_cb?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_register_tap_cb

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dmp_register_android_orient_cb?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dmp_register_android_orient_cb

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {76, 205, 108}>`:
   \   000000   4C           DB 76
   \   000001   CD           DB 205
   \   000002   6C           DB 108

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {12, 201, 44}>`:
   \   000000   0C           DB 12
   \   000001   C9           DB 201
   \   000002   2C           DB 44

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {54, 86, 118}>`:
   \   000000   36           DB 54
   \   000001   56           DB 86
   \   000002   76           DB 118

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {38, 70, 102}>`:
   \   000000   26           DB 38
   \   000001   46           DB 70
   \   000002   66           DB 102

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {254, 242, 171, 196, 170, 241, 223,`:
   \   000000   FE           DB 254
   \   000001   F2           DB 242
   \   000002   AB           DB 171
   \   000003   C4           DB 196
   \   000004   AA           DB 170
   \   000005   F1           DB 241
   \   000006   DF           DB 223
   \   000007   DF           DB 223
   \   000008   BB           DB 187
   \   000009   AF           DB 175
   \   00000A   DF           DB 223
   \   00000B   DF           DB 223

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {184, 170, 179, 141, 180, 152, 13, `:
   \   000000   B8           DB 184
   \   000001   AA           DB 170
   \   000002   B3           DB 179
   \   000003   8D           DB 141
   \   000004   B4           DB 180
   \   000005   98           DB 152
   \   000006   0D           DB 13
   \   000007   35           DB 53
   \   000008   5D           DB 93

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {184, 170, 170, 170, 176, 136, 195,`:
   \   000000   B8           DB 184
   \   000001   AA           DB 170
   \   000002   AA           DB 170
   \   000003   AA           DB 170
   \   000004   B0           DB 176
   \   000005   88           DB 136
   \   000006   C3           DB 195
   \   000007   C5           DB 197
   \   000008   C7           DB 199

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {216, 177, 185, 243, 139, 163, 145,`:
   \   000000   D8           DB 216
   \   000001   B1           DB 177
   \   000002   B9           DB 185
   \   000003   F3           DB 243
   \   000004   8B           DB 139
   \   000005   A3           DB 163
   \   000006   91           DB 145
   \   000007   B6           DB 182
   \   000008   09           DB 9
   \   000009   B4           DB 180
   \   00000A   D9           DB 217

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {218, 177, 185, 243, 139, 163, 145,`:
   \   000000   DA           DB 218
   \   000001   B1           DB 177
   \   000002   B9           DB 185
   \   000003   F3           DB 243
   \   000004   8B           DB 139
   \   000005   A3           DB 163
   \   000006   91           DB 145
   \   000007   B6           DB 182
   \   000008   DA           DB 218
   \   000009   B4           DB 180
   \   00000A   DA           DB 218

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3b86e0:
   \   000000   E0863B00     DD 3901152

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_43480000:
   \   000000   00004843     DD 43480000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_46800000:
   \   000000   00008046     DD 46800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_46400000:
   \   000000   00004046     DD 46400000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_46000000:
   \   000000   00000046     DD 46000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_45c00000:
   \   000000   0000C045     DD 45C00000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_45800000:
   \   000000   00008045     DD 45800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_45400000:
   \   000000   00004045     DD 45400000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_45000000:
   \   000000   00000045     DD 45000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_44c00000:
   \   000000   0000C044     DD 44C00000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_14:
   \   000000   14000000     DD 20

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_f1000000:
   \   000000   000000F1     DD 4043309056

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2000001:
   \   000000   01000002     DD 33554433
   1379          
   1380          /**
   1381           *  @}
   1382           */
   1383          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     dmp_enable_6x_lp_quat              0      0     40
       -> memset                        0      0     32
       -> mpu_write_mem                 0      0     32
       -> mpu_reset_fifo                0      0     28
     dmp_enable_feature                 0      0     26
       -> mpu_write_mem                 0      0     52
       -> mpu_write_mem                 0      0     52
       -> mpu_write_mem                 0      0     52
       -> dmp_enable_gyro_cal           0      0     48
       -> dmp_enable_gyro_cal           0      0     48
       -> mpu_write_mem                 0      0     52
       -> mpu_write_mem                 0      0     52
       -> dmp_set_tap_thresh            0      0     48
       -> dmp_set_tap_axes              0      0     48
       -> dmp_set_tap_count             0      0     48
       -> dmp_set_tap_time              0      0     48
       -> dmp_set_tap_time_multi        0      0     48
       -> dmp_set_shake_reject_thresh
                                        0      0     52
       -> dmp_set_shake_reject_time     0      0     48
       -> dmp_set_shake_reject_timeout
                                        0      0     48
       -> mpu_write_mem                 0      0     52
       -> mpu_write_mem                 0      0     52
       -> dmp_enable_lp_quat            0      0     48
       -> dmp_enable_lp_quat            0      0     48
       -> dmp_enable_6x_lp_quat         0      0     48
       -> dmp_enable_6x_lp_quat         0      0     48
       -> mpu_reset_fifo                0      0     48
     dmp_enable_gyro_cal                2      0     45
       -> mpu_write_mem                 0      0     42
       -> mpu_write_mem                 0      0     42
     dmp_enable_lp_quat                 0      0     40
       -> memset                        0      0     32
       -> mpu_write_mem                 0      0     32
       -> mpu_reset_fifo                0      0     28
     dmp_get_enabled_features           2      0      0
     dmp_get_fifo_rate                  2      0      0
     dmp_get_pedometer_step_count       0      0     22
       -> mpu_read_mem                  0      0     44
     dmp_get_pedometer_walk_time        0      0     22
       -> mpu_read_mem                  0      0     44
     dmp_load_motion_driver_firmware
                                        0      0     14
       -> mpu_load_firmware             0      0     28
     dmp_read_fifo                      0      0     91
       -> mpu_read_fifo_stream          0      0    166
       -> mpu_reset_fifo                0      0    162
     dmp_register_android_orient_cb     2      0      0
     dmp_register_tap_cb                2      0      0
     dmp_set_accel_bias                 1      0     48
       -> mpu_get_accel_sens            0      0     92
       -> mpu_write_mem                 0      0     96
     dmp_set_fifo_rate                  2      0     32
       -> mpu_write_mem                 0      0     64
       -> mpu_write_mem                 0      0     64
     dmp_set_gyro_bias                  1      0     38
       -> mpu_write_mem                 0      0     76
       -> mpu_write_mem                 0      0     76
       -> mpu_write_mem                 0      0     76
     dmp_set_interrupt_mode             2      0     34
       -> mpu_write_mem                 0      0     68
       -> mpu_write_mem                 0      0     68
     dmp_set_orientation                2      0     30
       -> mpu_write_mem                 0      0     60
       -> mpu_write_mem                 0      0     60
       -> memcpy                        0      0     60
       -> memcpy                        0      0     60
       -> mpu_write_mem                 0      0     60
       -> mpu_write_mem                 0      0     60
     dmp_set_pedometer_step_count       1      0     22
       -> mpu_write_mem                 0      0     44
     dmp_set_pedometer_walk_time        1      0     22
       -> mpu_write_mem                 0      0     44
     dmp_set_shake_reject_thresh        1      0     52
       -> mpu_write_mem                 0      0     52
     dmp_set_shake_reject_time          1      0     38
       -> mpu_write_mem                 0      0     28
     dmp_set_shake_reject_timeout       1      0     38
       -> mpu_write_mem                 0      0     28
     dmp_set_tap_axes                   0      0     37
       -> mpu_write_mem                 0      0     26
     dmp_set_tap_count                  1      0     37
       -> mpu_write_mem                 0      0     26
     dmp_set_tap_thresh                 1      0     51
       -> mpu_get_accel_fsr             0      0     50
       -> mpu_write_mem                 0      0     54
       -> mpu_write_mem                 0      0     54
       -> mpu_write_mem                 0      0     54
       -> mpu_write_mem                 0      0     54
       -> mpu_write_mem                 0      0     54
       -> mpu_write_mem                 0      0     54
     dmp_set_tap_time                   1      0     38
       -> mpu_write_mem                 0      0     28
     dmp_set_tap_time_multi             1      0     38
       -> mpu_write_mem                 0      0     28


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     dmp_memory                                     3062
     dmp                                              11
     dmp_load_motion_driver_firmware
                                                      41
     ??Subroutine44_0                                  2
     ??Subroutine45_0                                  8
     dmp_set_orientation                             537
     ?Subroutine24                                     5
     ?Subroutine7                                      3
     ??Subroutine41_0                                 10
     ?Subroutine31                                    10
     ??Subroutine49_0                                  6
     dmp_set_gyro_bias                               564
     ?Subroutine29                                    14
     ?Subroutine26                                     8
     ?Subroutine33                                    16
     ?Subroutine11                                    10
     ??Subroutine42_0                                  4
     ??Subroutine43_0                                  5
     ?Subroutine10                                    15
     ?Subroutine9                                     21
     ?Subroutine1                                      8
     ?Subroutine30                                    14
     ?Subroutine27                                    11
     ?Subroutine25                                     2
     ??Subroutine46_0                                 12
     ?Subroutine36                                    19
     ?Subroutine34                                     8
     dmp_set_accel_bias                              526
     ?Subroutine28                                    16
     dmp_set_fifo_rate                               151
     dmp_get_fifo_rate                                10
     ?Subroutine2                                     13
     ??Subroutine51_0                                 12
     dmp_set_tap_thresh                              560
     ?Subroutine32                                     2
     dmp_set_tap_axes                                 63
     ?Subroutine4                                     10
     dmp_set_tap_count                                54
     dmp_set_tap_time                                 50
     ?Subroutine5                                     11
     dmp_set_tap_time_multi                           50
     dmp_set_shake_reject_thresh                     128
     dmp_set_shake_reject_time                        47
     dmp_set_shake_reject_timeout                     49
     dmp_get_pedometer_step_count                    131
     ?Subroutine16                                     6
     ??Subroutine47_0                                 15
     ??Subroutine48_0                                 10
     ?Subroutine18                                    11
     ?Subroutine17                                    11
     ?Subroutine15                                    15
     ?Subroutine3                                      8
     dmp_set_pedometer_step_count                     66
     dmp_get_pedometer_walk_time                     147
     dmp_set_pedometer_walk_time                     106
     dmp_enable_feature                              659
     dmp_get_enabled_features                         10
     dmp_enable_gyro_cal                              78
     ?Subroutine0                                     11
     dmp_enable_lp_quat                              106
     dmp_enable_6x_lp_quat                           106
     dmp_set_interrupt_mode                          109
     dmp_read_fifo                                  1008
     ?Subroutine23                                     3
     ??Subroutine50_0                                  6
     ?Subroutine22                                     8
     ?Subroutine21                                     8
     ?Subroutine39                                     9
     ?Subroutine20                                     7
     ?Subroutine19                                    11
     ?Subroutine14                                    26
     ?Subroutine13                                    12
     ?Subroutine12                                    20
     ?Subroutine40                                     9
     ?Subroutine38                                    10
     ?Subroutine35                                    12
     ?Subroutine8                                      9
     ?Subroutine37                                    14
     dmp_register_tap_cb                               7
     ?Subroutine6                                      6
     dmp_register_android_orient_cb                    9
     ??dmp_load_motion_driver_firmware?relay           6
     ??dmp_set_orientation?relay                       6
     ??dmp_set_gyro_bias?relay                         6
     ??dmp_set_accel_bias?relay                        6
     ??dmp_set_fifo_rate?relay                         6
     ??dmp_get_fifo_rate?relay                         6
     ??dmp_set_tap_thresh?relay                        6
     ??dmp_set_tap_axes?relay                          6
     ??dmp_set_tap_count?relay                         6
     ??dmp_set_tap_time?relay                          6
     ??dmp_set_tap_time_multi?relay                    6
     ??dmp_set_shake_reject_thresh?relay               6
     ??dmp_set_shake_reject_time?relay                 6
     ??dmp_set_shake_reject_timeout?relay              6
     ??dmp_get_pedometer_step_count?relay              6
     ??dmp_set_pedometer_step_count?relay              6
     ??dmp_get_pedometer_walk_time?relay               6
     ??dmp_set_pedometer_walk_time?relay               6
     ??dmp_enable_feature?relay                        6
     ??dmp_get_enabled_features?relay                  6
     ??dmp_enable_gyro_cal?relay                       6
     ??dmp_enable_lp_quat?relay                        6
     ??dmp_enable_6x_lp_quat?relay                     6
     ??dmp_set_interrupt_mode?relay                    6
     ??dmp_read_fifo?relay                             6
     ??dmp_register_tap_cb?relay                       6
     ??dmp_register_android_orient_cb?relay            6
     ?<Constant {76, 205, 108}>                        3
     ?<Constant {12, 201, 44}>                         3
     ?<Constant {54, 86, 118}>                         3
     ?<Constant {38, 70, 102}>                         3
     ?<Constant {254, 242, 171, 196, 170, 241, 223,   12
     ?<Constant {184, 170, 179, 141, 180, 152, 13,     9
     ?<Constant {184, 170, 170, 170, 176, 136, 195,    9
     ?<Constant {216, 177, 185, 243, 139, 163, 145,   11
     ?<Constant {218, 177, 185, 243, 139, 163, 145,   11
     __Constant_3b86e0                                 4
     __Constant_43480000                               4
     __Constant_46800000                               4
     __Constant_46400000                               4
     __Constant_46000000                               4
     __Constant_45c00000                               4
     __Constant_45800000                               4
     __Constant_45400000                               4
     __Constant_45000000                               4
     __Constant_44c00000                               4
     __Constant_3e8                                    4
     __Constant_14                                     4
     __Constant_f1000000                               4
     __Constant_2000001                                4

 
 5 904 bytes in segment BANKED_CODE
   162 bytes in segment BANK_RELAYS
 3 182 bytes in segment XDATA_ROM_C
    11 bytes in segment XDATA_Z
 
 6 066 bytes of CODE  memory
 3 126 bytes of CONST memory (+ 56 bytes shared)
    11 bytes of XDATA memory

Errors: none
Warnings: 8
