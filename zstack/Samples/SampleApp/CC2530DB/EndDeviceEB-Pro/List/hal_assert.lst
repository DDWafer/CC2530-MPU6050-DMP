###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/Nov/2018  11:35:36 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Components\hal\common\hal_asser #
#                          t.c                                                #
#    Command line       =  -f F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú #
#                          \ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cf #
#                          g (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f  #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg  #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Components\hal\common\hal_asser #
#                          t.c -D ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D   #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC F:\key_pro\AAAAAgraduation #
#                          _project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pr #
#                          o\List\ -lA F:\key_pro\AAAAAgraduation_project\Ωªª #
#                          •œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\EndDeviceEB-Pro\List\      #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\EndDeviceEB-Pro\Obj\ -e --debug        #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I F:\key_pro\AAAAAgraduation #
#                          _project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\ -I            #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\SOURCE\ -I                          #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I            #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I       #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ #
#                           -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– #
#                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530EB\ -I F:\key_pro\AAAAAgraduation_project #
#                          \Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\OSAL\MCU\CCSOC\ -I F:\key_pro\AAAAAgraduation_ #
#                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\OSAL\INCLUDE\ -I                        #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\    #
#                          -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú #
#                          \ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK #
#                          \ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã #
#                          –Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S #
#                          EC\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥ #
#                          ≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK #
#                          \SAPI\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œ #
#                          µÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ST #
#                          ACK\SYS\ -I F:\key_pro\AAAAAgraduation_project\Ωªª #
#                          •œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\ZDO\ -I F:\key_pro\AAAAAgraduation_project\Ω #
#                          ªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\ -I F:\key_pro\AAAAAgraduation_project\ #
#                          Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\ZMAC\ -I F:\key_pro\AAAAAgraduation_project\Ωªª #
#                          •œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          SERVICES\SADDR\ -I F:\key_pro\AAAAAgraduation_proj #
#                          ect\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\ -I                          #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ #
#                           -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– #
#                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\ -I F:\key_pro\AAAAAgraduation_project\Ωªª• #
#                          œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\M #
#                          AC\LOW_LEVEL\srf04\ -I F:\key_pro\AAAAAgraduation_ #
#                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I     #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\..\..\..\ -Ohz          #
#    List file          =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\EndDeviceEB-Pro\List\hal_assert.lst    #
#    Object file        =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\EndDeviceEB-Pro\Obj\hal_assert.r51     #
#                                                                             #
#                                                                             #
###############################################################################

F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Components\hal\common\hal_assert.c
      1          /**************************************************************************************************
      2            Filename:       hal_assert.c
      3            Revised:        $Date: 2010-01-07 10:10:43 -0800 (Thu, 07 Jan 2010) $
      4            Revision:       $Revision: 21451 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /* ------------------------------------------------------------------------------------------------
     42           *                                          Includes
     43           * ------------------------------------------------------------------------------------------------
     44           */
     45          #include "hal_assert.h"
     46          #include "hal_types.h"
     47          #include "hal_board.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     48          #include "hal_defs.h"
     49          #include "hal_mcu.h"
     50          
     51          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || \
     52            (defined HAL_MCU_CC2533) || (defined HAL_MCU_MSP430)
     53            /* for access to debug data */
     54            #include "mac_rx.h"
     55            #include "mac_tx.h"
     56          #endif
     57          
     58          /* ------------------------------------------------------------------------------------------------
     59           *                                       Local Prototypes
     60           * ------------------------------------------------------------------------------------------------
     61           */
     62          void halAssertHazardLights(void);
     63          
     64          
     65          /**************************************************************************************************
     66           * @fn          halAssertHandler
     67           *
     68           * @brief       Logic to handle an assert.
     69           *
     70           * @param       none
     71           *
     72           * @return      none
     73           **************************************************************************************************
     74           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     75          void halAssertHandler(void)
   \                     halAssertHandler:
     76          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     77            /* execute code that handles asserts */
     78          #ifdef ASSERT_RESET
     79            HAL_SYSTEM_RESET();
     80          #else
     81            halAssertHazardLights();
   \   000004                ; Setup parameters for call to function halAssertHazardLights
   \   000004   12....       LCALL   ??halAssertHazardLights?relay
     82          #endif
     83          
     84          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
     85          
     86          
     87          /**************************************************************************************************
     88           * @fn          halAssertHazardLights
     89           *
     90           * @brief       Blink LEDs to indicate an error.
     91           *
     92           * @param       none
     93           *
     94           * @return      none
     95           **************************************************************************************************
     96           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     97          void halAssertHazardLights(void)
   \                     halAssertHazardLights:
     98          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
     99            enum
    100            {
    101              DEBUG_DATA_RSTACK_HIGH_OFS,
    102              DEBUG_DATA_RSTACK_LOW_OFS,
    103              DEBUG_DATA_TX_ACTIVE_OFS,
    104              DEBUG_DATA_RX_ACTIVE_OFS,
    105          
    106          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430)
    107              DEBUG_DATA_INT_MASK_OFS,
    108          #elif (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
    109              DEBUG_DATA_INT_MASK0_OFS,
    110              DEBUG_DATA_INT_MASK1_OFS,
    111          #endif
    112          
    113              DEBUG_DATA_SIZE
    114            };
    115          
    116            uint8 buttonHeld;
    117            uint8 debugData[DEBUG_DATA_SIZE];
    118          
    119            /* disable all interrupts before anything else */
    120            HAL_DISABLE_INTERRUPTS();
   \   00000A   C2AF         CLR     0xa8.7
    121          
    122            /*-------------------------------------------------------------------------------
    123             *  Initialize LEDs and turn them off.
    124             */
    125            HAL_BOARD_INIT();
   \   00000C   53BEFB       ANL     0xbe,#0xfb
   \                     ??halAssertHazardLights_0:
   \   00000F   E59D         MOV     A,0x9d
   \   000011   A2E6         MOV     C,0xE0 /* A   */.6
   \   000013   50FA         JNC     ??halAssertHazardLights_0
   \   000015   00           NOP
   \   000016   78F8         MOV     R0,#-0x8
   \   000018   7901         MOV     R1,#0x1
   \                     ??halAssertHazardLights_1:
   \   00001A   00           NOP
   \   00001B   E8           MOV     A,R0
   \   00001C   24FF         ADD     A,#-0x1
   \   00001E   18           DEC     R0
   \   00001F   E9           MOV     A,R1
   \   000020   34FF         ADDC    A,#-0x1
   \   000022   F9           MOV     R1,A
   \   000023   E8           MOV     A,R0
   \   000024   49           ORL     A,R1
   \   000025   70F3         JNZ     ??halAssertHazardLights_1
   \   000027   75C600       MOV     0xc6,#0x0
   \                     ??halAssertHazardLights_2:
   \   00002A   E59E         MOV     A,0x9e
   \   00002C   70FC         JNZ     ??halAssertHazardLights_2
   \   00002E   43BE04       ORL     0xbe,#0x4
   \   000031   906270       MOV     DPTR,#0x6270
   \   000034   7408         MOV     A,#0x8
   \   000036   F0           MOVX    @DPTR,A
   \   000037   43FE01       ORL     0xfe,#0x1
   \   00003A   43FE02       ORL     0xfe,#0x2
   \   00003D   43FD10       ORL     0xfd,#0x10
    126          
    127            HAL_TURN_OFF_LED1();
   \   000040   C290         CLR     0x90.0
    128            HAL_TURN_OFF_LED2();
   \   000042   C291         CLR     0x90.1
    129            HAL_TURN_OFF_LED3();
   \   000044   C284         CLR     0x80.4
    130            HAL_TURN_OFF_LED4();
   \   000046   8017         SJMP    ??halAssertHazardLights_3
    131          
    132            /*-------------------------------------------------------------------------------
    133             *  Master infinite loop.
    134             */
    135            for (;;)
    136            {
    137              buttonHeld = 0;
    138          
    139              /*-------------------------------------------------------------------------------
    140               *  "Hazard lights" loop.  A held keypress will exit this loop.
    141               */
    142              do
    143              {
    144                HAL_LED_BLINK_DELAY();
    145          
    146                /* toggle LEDS, the #ifdefs are in case HAL has logically remapped non-existent LEDs */
    147          #if (HAL_NUM_LEDS >= 1)
    148                HAL_TOGGLE_LED1();
    149          #if (HAL_NUM_LEDS >= 2)
    150                HAL_TOGGLE_LED2();
    151          #if (HAL_NUM_LEDS >= 3)
    152                HAL_TOGGLE_LED3();
    153          #if (HAL_NUM_LEDS >= 4)
    154                HAL_TOGGLE_LED4();
    155          #endif
    156          #endif
    157          #endif
    158          #endif
    159          
    160                /* escape hatch to continue execution, set escape to '1' to continue execution */
    161                {
    162                  static uint8 escape = 0;
    163                  if (escape)
    164                  {
    165                    escape = 0;
    166                    return;
    167                  }
    168                }
    169          
    170                /* break out of loop if button is held long enough */
    171                if (HAL_PUSH_BUTTON1())
    172                {
    173                  buttonHeld++;
    174                }
    175                else
    176                {
    177                  buttonHeld = 0;
    178                }
    179              }
    180              while (buttonHeld != 10);  /* loop until button is held specified number of loops */
    181          
    182              /*-------------------------------------------------------------------------------
    183               *  Just exited from "hazard lights" loop.
    184               */
    185          
    186              /* turn off all LEDs */
    187              HAL_TURN_OFF_LED1();
    188              HAL_TURN_OFF_LED2();
    189              HAL_TURN_OFF_LED3();
    190              HAL_TURN_OFF_LED4();
    191          
    192              /* wait for button release */
    193              HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
    194          
    195              /*-------------------------------------------------------------------------------
    196               *  Load debug data into memory.
    197               */
    198          #ifdef HAL_MCU_AVR
    199              {
    200                uint8 * pStack;
    201                pStack = (uint8 *) SP;
    202                pStack++; /* point to return address on stack */
    203                debugData[DEBUG_DATA_RSTACK_HIGH_OFS] = *pStack;
    204                pStack++;
    205                debugData[DEBUG_DATA_RSTACK_LOW_OFS] = *pStack;
    206              }
    207              debugData[DEBUG_DATA_INT_MASK_OFS] = EIMSK;
    208          #endif
    209          
    210          #if (defined HAL_MCU_CC2430)
    211              debugData[DEBUG_DATA_INT_MASK_OFS] = RFIM;
    212          #elif (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
    213              debugData[DEBUG_DATA_INT_MASK0_OFS] = RFIRQM0;
    214              debugData[DEBUG_DATA_INT_MASK1_OFS] = RFIRQM1;
    215          #endif
    216          
    217          
    218          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || \
    219            (defined HAL_MCU_CC2533) || (defined HAL_MCU_MSP430)
    220              debugData[DEBUG_DATA_TX_ACTIVE_OFS] = macTxActive;
    221              debugData[DEBUG_DATA_RX_ACTIVE_OFS] = macRxActive;
    222          #endif
    223          
    224             /* initialize for data dump loop */
    225              {
    226                uint8 iBit;
    227                uint8 iByte;
    228          
    229                iBit  = 0;
    230                iByte = 0;
    231          
    232                /*-------------------------------------------------------------------------------
    233                 *  Data dump loop.  A button press cycles data bits to an LED.
    234                 */
    235                while (iByte < DEBUG_DATA_SIZE)
    236                {
    237                  /* wait for key press */
    238                  while(!HAL_PUSH_BUTTON1());
    239          
    240                  /* turn on all LEDs for first bit of byte, turn on three LEDs if not first bit */
    241                  HAL_TURN_ON_LED1();
    242                  HAL_TURN_ON_LED2();
    243                  HAL_TURN_ON_LED3();
    244                  if (iBit == 0)
    245                  {
    246                    HAL_TURN_ON_LED4();
    247                  }
    248                  else
    249                  {
    250                    HAL_TURN_OFF_LED4();
    251                  }
    252          
    253                  /* wait for debounced key release */
    254                  HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
    255          
    256                  /* turn off all LEDs */
    257                  HAL_TURN_OFF_LED1();
    258                  HAL_TURN_OFF_LED2();
    259                  HAL_TURN_OFF_LED3();
    260                  HAL_TURN_OFF_LED4();
    261          
    262                  /* output value of data bit to LED1 */
    263                  if (debugData[iByte] & (1 << (7 - iBit)))
    264                  {
    265                    HAL_TURN_ON_LED1();
    266                  }
    267                  else
    268                  {
    269                    HAL_TURN_OFF_LED1();
   \                     ??halAssertHazardLights_4:
   \   000048   C290         CLR     0x90.0
    270                  }
    271          
    272                  /* advance to next bit */
    273                  iBit++;
   \                     ??halAssertHazardLights_5:
   \   00004A   0B           INC     R3
    274                  if (iBit == 8)
   \   00004B   7408         MOV     A,#0x8
   \   00004D   6B           XRL     A,R3
   \   00004E   6003         JZ      $+5
   \   000050   02....       LJMP    ??halAssertHazardLights_6 & 0xFFFF
    275                  {
    276                    iBit = 0;
   \   000053   7B00         MOV     R3,#0x0
    277                    iByte++;
   \   000055   0A           INC     R2
    278                  }
   \   000056   EA           MOV     A,R2
   \   000057   C3           CLR     C
   \   000058   9406         SUBB    A,#0x6
   \   00005A   5003         JNC     $+5
   \   00005C   02....       LJMP    ??halAssertHazardLights_6 & 0xFFFF
    279                }
    280              }
    281          
    282              /*
    283               *  About to enter "hazard lights" loop again.  Turn off LED1 in case the last bit
    284               *  displayed happened to be one.  This guarantees all LEDs are off at the start of
    285               *  the flashing loop which uses a toggle operation to change LED states.
    286               */
    287              HAL_TURN_OFF_LED1();
   \                     ??halAssertHazardLights_3:
   \   00005F   C290         CLR     0x90.0
   \                     ??halAssertHazardLights_7:
   \   000061   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_8:
   \   000063   90....       MOV     DPTR,#__Constant_0
   \   000066   12....       LCALL   ?XLOAD_R2345
   \   000069   7406         MOV     A,#0x6
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   12....       LCALL   ?XSTORE_R2345
   \   000071   8012         SJMP    ??halAssertHazardLights_9
   \                     ??halAssertHazardLights_10:
   \   000073   90....       MOV     DPTR,#__Constant_1
   \   000076   78..         MOV     R0,#?V0 + 0
   \   000078   12....       LCALL   ?L_MOV_X
   \   00007B   7406         MOV     A,#0x6
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   78..         MOV     R0,#?V0 + 0
   \   000082   12....       LCALL   ?L_ADD_TO_X
   \                     ??halAssertHazardLights_9:
   \   000085   7406         MOV     A,#0x6
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   C082         PUSH    DPL
   \   00008C   C083         PUSH    DPH
   \   00008E   90....       MOV     DPTR,#__Constant_5800
   \   000091   78..         MOV     R0,#?V0 + 0
   \   000093   12....       LCALL   ?L_MOV_X
   \   000096   D083         POP     DPH
   \   000098   D082         POP     DPL
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?UL_GT_X
   \   00009F   40D2         JC      ??halAssertHazardLights_10
   \   0000A1   A290         MOV     C,0x90.0
   \   0000A3   5004         JNC     ??halAssertHazardLights_11
   \   0000A5   C290         CLR     0x90.0
   \   0000A7   8002         SJMP    ??halAssertHazardLights_12
   \                     ??halAssertHazardLights_11:
   \   0000A9   D290         SETB    0x90.0
   \                     ??halAssertHazardLights_12:
   \   0000AB   A291         MOV     C,0x90.1
   \   0000AD   5004         JNC     ??halAssertHazardLights_13
   \   0000AF   C291         CLR     0x90.1
   \   0000B1   8002         SJMP    ??halAssertHazardLights_14
   \                     ??halAssertHazardLights_13:
   \   0000B3   D291         SETB    0x90.1
   \                     ??halAssertHazardLights_14:
   \   0000B5   A284         MOV     C,0x80.4
   \   0000B7   5004         JNC     ??halAssertHazardLights_15
   \   0000B9   C284         CLR     0x80.4
   \   0000BB   8002         SJMP    ??halAssertHazardLights_16
   \                     ??halAssertHazardLights_15:
   \   0000BD   D284         SETB    0x80.4
   \                     ??halAssertHazardLights_16:
   \   0000BF   90....       MOV     DPTR,#??escape
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   600C         JZ      ??halAssertHazardLights_17
   \   0000C5   E4           CLR     A
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   740A         MOV     A,#0xa
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CC   7F04         MOV     R7,#0x4
   \   0000CE   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??halAssertHazardLights_17:
   \   0000D1   A281         MOV     C,0x80.1
   \   0000D3   508C         JNC     ??halAssertHazardLights_7
   \   0000D5   09           INC     R1
   \   0000D6   740A         MOV     A,#0xa
   \   0000D8   69           XRL     A,R1
   \   0000D9   7088         JNZ     ??halAssertHazardLights_8
   \   0000DB   C290         CLR     0x90.0
   \   0000DD   C291         CLR     0x90.1
   \   0000DF   C284         CLR     0x80.4
   \   0000E1   C290         CLR     0x90.0
   \   0000E3   7800         MOV     R0,#0x0
   \   0000E5   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_18:
   \   0000E7   A281         MOV     C,0x80.1
   \   0000E9   5004         JNC     ??halAssertHazardLights_19
   \   0000EB   7800         MOV     R0,#0x0
   \   0000ED   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_19:
   \   0000EF   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000F2   40F3         JC      ??halAssertHazardLights_18
   \   0000F4   9061A3       MOV     DPTR,#0x61a3
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   C0E0         PUSH    A
   \   0000FA   7404         MOV     A,#0x4
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   D0E0         POP     A
   \   000101   F0           MOVX    @DPTR,A
   \   000102   9061A4       MOV     DPTR,#0x61a4
   \   000105   E0           MOVX    A,@DPTR
   \   000106   C0E0         PUSH    A
   \   000108   7405         MOV     A,#0x5
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   D0E0         POP     A
   \   00010F   F0           MOVX    @DPTR,A
   \   000110   90....       MOV     DPTR,#macTxActive
   \   000113   E0           MOVX    A,@DPTR
   \   000114   C0E0         PUSH    A
   \   000116   7402         MOV     A,#0x2
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   D0E0         POP     A
   \   00011D   F0           MOVX    @DPTR,A
   \   00011E   90....       MOV     DPTR,#macRxActive
   \   000121   E0           MOVX    A,@DPTR
   \   000122   C0E0         PUSH    A
   \   000124   7403         MOV     A,#0x3
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   D0E0         POP     A
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   7B00         MOV     R3,#0x0
   \   00012E   7A00         MOV     R2,#0x0
   \                     ??halAssertHazardLights_6:
   \   000130   A281         MOV     C,0x80.1
   \   000132   50FC         JNC     ??halAssertHazardLights_6
   \   000134   D290         SETB    0x90.0
   \   000136   D291         SETB    0x90.1
   \   000138   D284         SETB    0x80.4
   \   00013A   EB           MOV     A,R3
   \   00013B   7004         JNZ     ??halAssertHazardLights_20
   \   00013D   D290         SETB    0x90.0
   \   00013F   8002         SJMP    ??halAssertHazardLights_21
   \                     ??halAssertHazardLights_20:
   \   000141   C290         CLR     0x90.0
   \                     ??halAssertHazardLights_21:
   \   000143   7800         MOV     R0,#0x0
   \   000145   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_22:
   \   000147   A281         MOV     C,0x80.1
   \   000149   5004         JNC     ??halAssertHazardLights_23
   \   00014B   7800         MOV     R0,#0x0
   \   00014D   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_23:
   \   00014F   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000152   40F3         JC      ??halAssertHazardLights_22
   \   000154   C290         CLR     0x90.0
   \   000156   C291         CLR     0x90.1
   \   000158   C284         CLR     0x80.4
   \   00015A   C290         CLR     0x90.0
   \   00015C   75..01       MOV     ?V0 + 0,#0x1
   \   00015F   75..00       MOV     ?V0 + 1,#0x0
   \   000162   7407         MOV     A,#0x7
   \   000164   C3           CLR     C
   \   000165   9B           SUBB    A,R3
   \   000166   78..         MOV     R0,#?V0 + 0
   \   000168   12....       LCALL   ?S_SHL
   \   00016B   8A..         MOV     ?V0 + 2,R2
   \   00016D   85..82       MOV     DPL,?XSP + 0
   \   000170   85..83       MOV     DPH,?XSP + 1
   \   000173   E582         MOV     A,DPL
   \   000175   25..         ADD     A,?V0 + 2
   \   000177   F582         MOV     DPL,A
   \   000179   E583         MOV     A,DPH
   \   00017B   3400         ADDC    A,#0x0
   \   00017D   F583         MOV     DPH,A
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   55..         ANL     A,?V0 + 0
   \   000182   7003         JNZ     $+5
   \   000184   02....       LJMP    ??halAssertHazardLights_4 & 0xFFFF
   \   000187   D290         SETB    0x90.0
   \   000189   02....       LJMP    ??halAssertHazardLights_5 & 0xFFFF
   \   00018C                REQUIRE _A_IEN0
   \   00018C                REQUIRE SLEEPCMD
   \   00018C                REQUIRE SLEEPSTA
   \   00018C                REQUIRE CLKCONCMD
   \   00018C                REQUIRE CLKCONSTA
   \   00018C                REQUIRE P1DIR
   \   00018C                REQUIRE P0DIR
   \   00018C                REQUIRE _A_P1
   \   00018C                REQUIRE _A_P0
    288            }
    289          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E8           MOV     A,R0
   \   000001   2401         ADD     A,#0x1
   \   000003   08           INC     R0
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   C3           CLR     C
   \   000009   E8           MOV     A,R0
   \   00000A   94F4         SUBB    A,#-0xc
   \   00000C   E9           MOV     A,R1
   \   00000D   9401         SUBB    A,#0x1
   \   00000F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000011   65D0         XRL     A,PSW
   \   000013   33           RLC     A
   \   000014   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??escape:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5800:
   \   000000   00580000     DD 22528

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halAssertHandler?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halAssertHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halAssertHazardLights?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halAssertHazardLights
    290          
    291          
    292          /* ------------------------------------------------------------------------------------------------
    293           *                                    Compile Time Assertions
    294           * ------------------------------------------------------------------------------------------------
    295           */
    296          
    297          /* integrity check of type sizes */
    298          HAL_ASSERT_SIZE(  int8, 1);
    299          HAL_ASSERT_SIZE( uint8, 1);
    300          HAL_ASSERT_SIZE( int16, 2);
    301          HAL_ASSERT_SIZE(uint16, 2);
    302          HAL_ASSERT_SIZE( int32, 4);
    303          HAL_ASSERT_SIZE(uint32, 4);
    304          
    305          
    306          /**************************************************************************************************
    307          */

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     halAssertHandler               2      0      0
       -> halAssertHazardLights     4      0      0
     halAssertHazardLights          2      0     22


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     _A_P0                            1
     _A_P1                            1
     SLEEPSTA                         1
     CLKCONSTA                        1
     _A_IEN0                          1
     SLEEPCMD                         1
     CLKCONCMD                        1
     P0DIR                            1
     P1DIR                            1
     halAssertHandler                14
     halAssertHazardLights          396
     ?Subroutine0                    21
     escape                           1
     __Constant_0                     4
     __Constant_1                     4
     __Constant_5800                  4
     ??halAssertHandler?relay         6
     ??halAssertHazardLights?relay    6

 
 431 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   9 bytes in segment SFR_AN
  12 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
 443 bytes of CODE  memory
   0 bytes of CONST memory (+ 12 bytes shared)
   0 bytes of DATA  memory (+  9 bytes shared)
   1 byte  of XDATA memory

Errors: none
Warnings: none
