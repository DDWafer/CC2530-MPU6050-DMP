###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         25/Dec/2018  16:44:01 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\Source\SampleApp.c                              #
#    Command line       =  -f F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú #
#                          \ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.c #
#                          fg (-DCPU32MHZ -DROOT=__near_func                  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK         #
#                          -DBLINK_LEDS) -f F:\key_pro\AAAAAgraduation_projec #
#                          t\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530 #
#                          DB\f8wConfig.cfg (-DSECURE=0                       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\Source\SampleApp.c -D ZIGBEEPRO -D ZTOOL_P1 -D  #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -D STM32F10X_MD -D             #
#                          USE_STDPERIPH_DRIVER -lC                           #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\RouterEB-Pro\List\ -lA                 #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\RouterEB-Pro\List\ --diag_suppress     #
#                          Pe001,Pa010 -o F:\key_pro\AAAAAgraduation_project\ #
#                          Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\ -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú #
#                          \ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\ -I F:\key_pro\AAAAAgraduation_proj #
#                          ect\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\SOURCE\ -I       #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I            #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I       #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ #
#                           -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– #
#                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530EB\ -I F:\key_pro\AAAAAgraduation_project #
#                          \Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\OSAL\MCU\CCSOC\ -I F:\key_pro\AAAAAgraduation_ #
#                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\OSAL\INCLUDE\ -I                        #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\    #
#                          -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú #
#                          \ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK #
#                          \ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã #
#                          –Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S #
#                          EC\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥ #
#                          ≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK #
#                          \SAPI\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œ #
#                          µÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ST #
#                          ACK\SYS\ -I F:\key_pro\AAAAAgraduation_project\Ωªª #
#                          •œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\ZDO\ -I F:\key_pro\AAAAAgraduation_project\Ω #
#                          ªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\ -I F:\key_pro\AAAAAgraduation_project\ #
#                          Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\ZMAC\ -I F:\key_pro\AAAAAgraduation_project\Ωªª #
#                          •œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          SERVICES\SADDR\ -I F:\key_pro\AAAAAgraduation_proj #
#                          ect\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\ -I                          #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ #
#                           -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– #
#                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\ -I F:\key_pro\AAAAAgraduation_project\Ωªª• #
#                          œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\M #
#                          AC\LOW_LEVEL\srf04\ -I F:\key_pro\AAAAAgraduation_ #
#                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I     #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\..\..\..\ -Ohz          #
#    List file          =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\RouterEB-Pro\List\SampleApp.lst        #
#    Object file        =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\RouterEB-Pro\Obj\SampleApp.r51         #
#                                                                             #
#                                                                             #
###############################################################################

F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          #include "stdio.h"
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc1
   \   unsigned char volatile __sfr U0DBUF
   \                     U0DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1
     69          /*MPU6050*/
     70          #include <inv_mpu.h>
     71          #include <inv_mpu_dmp_motion_driver.h>
     72          /* HAL */
     73          #include "hal_lcd.h"
     74          #include "hal_sleep.h"
     75          #include "hal_led.h"
     76          #include "hal_key.h"
     77          #include "MT_UART.h"
     78          
     79          /*********************************************************************
     80           * MACROS
     81           */
     82          
     83          /*********************************************************************
     84           * CONSTANTS
     85           */
     86          
     87          /*********************************************************************
     88           * TYPEDEFS
     89           */
     90          #define Sensor P0_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     91          __near_func int putchar(int c)
   \                     putchar:
     92          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     93              UTX0IF = 0;
   \   000000   C2E9         CLR     0xe8.1
     94              U0DBUF = (char)c;
   \   000002   EA           MOV     A,R2
   \   000003   F5C1         MOV     0xc1,A
     95              while(UTX0IF == 0);
   \                     ??putchar_0:
   \   000005   A2E9         MOV     C,0xe8.1
   \   000007   50FC         JNC     ??putchar_0
     96              return(c);
   \   000009   22           RET
   \   00000A                REQUIRE _A_IRCON2
   \   00000A                REQUIRE U0DBUF
     97          }
     98          /*********************************************************************
     99           * GLOBAL VARIABLES
    100           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          uint8 led_flag=0;
   \                     led_flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint8 count_open=0;
   \                     count_open:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 count_close=0;
   \                     count_close:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint8 LedState = 0;
   \                     LedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          uint8 end_flag = 0;
   \                     end_flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          uint16 end_count = 0;
   \                     end_count:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    108          extern uint16 count;             //”√”⁄∂® ±∆˜º∆ ˝
    109          extern uint8 timesleep_count;
    110          extern uint8 LedState;
    111          extern uint8 open_flag;  //ø™ª˙–≈∫≈ 
    112          extern uint8 close_flag;  //πÿª˙–≈∫≈
    113          extern uint8 timesleep;   //∂® ±–›√ﬂ 
    114          extern uint8 untimesleep;//Œﬁ–›÷π–›√ﬂ
    115          extern uint8 timesleep_test;
    116          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    117          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    118          {
    119            SAMPLEAPP_PERIODIC_CLUSTERID,
    120            SAMPLEAPP_FLASH_CLUSTERID
    121          };
    122          

   \                                 In  segment XDATA_ROM_C, align 1
    123          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    124          {
    125            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    126            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    127            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    128            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    129            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    130            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    131            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    132            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    133            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    134          };
    135          
    136          // This is the Endpoint/Interface description.  It is defined here, but
    137          // filled-in in SampleApp_Init().  Another way to go would be to fill
    138          // in the structure here and make it a "const" (in code space).  The
    139          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    141          
    142          /*********************************************************************
    143           * EXTERNAL VARIABLES
    144           */
    145          
    146          /*********************************************************************
    147           * EXTERNAL FUNCTIONS
    148           */
    149          
    150          /*********************************************************************
    151           * LOCAL VARIABLES
    152           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint8 send_flag=0;//”√”⁄◊‘∂Ø∑¢ÀÕπÿ±’–≈∫≈∫Ûµƒ—” ±
   \                     send_flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    155                                    // This variable will be received when
    156                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    158          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    160          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    163          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    165          
    166          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    169          
    170          /*********************************************************************
    171           * LOCAL FUNCTIONS
    172           */
    173          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    174          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    175          void SampleApp_SendPeriodicMessage( void );
    176          void SampleApp_SendFlashMessage( uint16 flashTime );
    177          
    178          /*********************************************************************
    179           * NETWORK LAYER CALLBACKS
    180           */
    181          
    182          /*********************************************************************
    183           * PUBLIC FUNCTIONS
    184           */
    185          
    186          /*********************************************************************
    187           * @fn      SampleApp_Init
    188           *
    189           * @brief   Initialization function for the Generic App Task.
    190           *          This is called during initialization and should contain
    191           *          any application specific initialization (ie. hardware
    192           *          initialization/setup, table initialization, power up
    193           *          notificaiton ... ).
    194           *
    195           * @param   task_id - the ID assigned by OSAL.  This ID should be
    196           *                    used to send messages and set timers.
    197           *
    198           * @return  none
    199           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    200          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    201          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    202            SampleApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    203            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    204            SampleApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    205            
    206             
    207            //MT_UartInit();                  //¥Æø⁄≥ı ºªØ
    208            //MT_UartRegisterTaskID(task_id); //◊¢≤·¥Æø⁄»ŒŒÒ
    209            //HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n"));//Ã· æ–≈œ¢
    210            // Device hardware initialization can be added here or in main() (Zmain.c).
    211            // If the hardware is application specific - add it here.
    212            // If the hardware is other parts of the device add it in main().
    213          
    214           #if defined ( BUILD_ALL_DEVICES )
    215            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    216            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    217            // together - if they are - we will start up a coordinator. Otherwise,
    218            // the device will start as a router.
    219            if ( readCoordinatorJumper() )
    220              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    221            else
    222              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    223          #endif // BUILD_ALL_DEVICES
    224          
    225          #if defined ( HOLD_AUTO_START )
    226            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    227            //  from starting the device and wait for the application to
    228            //  start the device.
    229            ZDOInitDevice(0);
    230          #endif
    231          
    232            // Setup for the periodic message's destination address
    233            // Broadcast to everyone
    234            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000015   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000018   740F         MOV     A,#0xf
   \   00001A   F0           MOVX    @DPTR,A
    235            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00001B   A3           INC     DPTR
   \   00001C   7414         MOV     A,#0x14
   \   00001E   F0           MOVX    @DPTR,A
    236            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00001F   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000022   74FF         MOV     A,#-0x1
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   F0           MOVX    @DPTR,A
    237          
    238            // Setup for the flash command's destination address - Group 1
    239            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000027   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00002A   7401         MOV     A,#0x1
   \   00002C   F0           MOVX    @DPTR,A
    240            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002D   A3           INC     DPTR
   \   00002E   7414         MOV     A,#0x14
   \   000030   F0           MOVX    @DPTR,A
    241            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP; //◊È∫≈1
   \   000031   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000034   7401         MOV     A,#0x1
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    242            //SampleApp_Flash_DstAddr.addr.shortAddr = 0x0002;                //◊È∫≈2
    243            
    244            // Fill out the endpoint description.
    245            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003A   90....       MOV     DPTR,#SampleApp_epDesc
   \   00003D   7414         MOV     A,#0x14
   \   00003F   F0           MOVX    @DPTR,A
    246            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000040   A3           INC     DPTR
   \   000041   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000047   F0           MOVX    @DPTR,A
    247            SampleApp_epDesc.simpleDesc
    248                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000048   A3           INC     DPTR
   \   000049   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00004F   F0           MOVX    @DPTR,A
    249            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000050   A3           INC     DPTR
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    250          
    251            // Register the endpoint description with the AF
    252            afRegister( &SampleApp_epDesc );
   \   000053                ; Setup parameters for call to function afRegister
   \   000053   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000055   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000057   12....       LCALL   ??afRegister?relay
    253          
    254            // Register for all key events - This app will handle all key events
    255            RegisterForKeys( SampleApp_TaskID );
   \   00005A                ; Setup parameters for call to function RegisterForKeys
   \   00005A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   12....       LCALL   ??RegisterForKeys?relay
    256          
    257            // By default, all devices start out in Group 1
    258            SampleApp_Group.ID = 0x0001;
   \   000062   90....       MOV     DPTR,#SampleApp_Group
   \   000065   7401         MOV     A,#0x1
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
    259            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00006E   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000071   F5..         MOV     ?V0 + 2,A
   \   000073   78..         MOV     R0,#?V0 + 0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000078   7C07         MOV     R4,#0x7
   \   00007A   7D00         MOV     R5,#0x0
   \   00007C   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00007E   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000080   12....       LCALL   ??osal_memcpy?relay
   \   000083   7403         MOV     A,#0x3
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
    260            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000088                ; Setup parameters for call to function aps_AddGroup
   \   000088   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   00008A   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   00008C   7914         MOV     R1,#0x14
   \   00008E   12....       LCALL   ??aps_AddGroup?relay
    261          
    262          #if defined ( LCD_SUPPORTED )
    263            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   000091                ; Setup parameters for call to function HalLcdWriteString
   \   000091   7901         MOV     R1,#0x1
   \   000093   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   000095   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   000097   12....       LCALL   ??HalLcdWriteString?relay
    264          #endif
    265          }
   \   00009A   7F03         MOV     R7,#0x3
   \   00009C   02....       LJMP    ?BANKED_LEAVE_XDATA
    266          
    267          /*********************************************************************
    268           * @fn      SampleApp_ProcessEvent
    269           *
    270           * @brief   Generic Application Task event processor.  This function
    271           *          is called to process all events for the task.  Events
    272           *          include timers, messages and any other user defined events.
    273           *
    274           * @param   task_id  - The OSAL assigned task ID.
    275           * @param   events - events to process.  This is a bit map and can
    276           *                   contain more than one event.
    277           *
    278           * @return  none
    279           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    280          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    281          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    282            afIncomingMSGPacket_t *MSGpkt;
    283            (void)task_id;  // Intentionally unreferenced parameter
    284          
    285            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6079         JZ      ??SampleApp_ProcessEvent_0
    286            {
    287              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   802B         SJMP    ??SampleApp_ProcessEvent_1
    288              while ( MSGpkt )
    289              {
    290                switch ( MSGpkt->hdr.event )
    291                {
    292                  // Received when a key is pressed
    293                  case KEY_CHANGE:
    294                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    295                    break;
    296          
    297                  // Received when a messages is received (OTA) for this endpoint
    298                  case AF_INCOMING_MSG_CMD:
    299                    SampleApp_MessageMSGCB( MSGpkt );
    300                    break;
    301          
    302                  // Received whenever the device changes state in the network
    303                  case ZDO_STATE_CHANGE:
    304                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    305                    if ( (SampleApp_NwkState == DEV_ZB_COORD) ||
    306                           (SampleApp_NwkState == DEV_ROUTER)
    307                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6409         XRL     A,#0x9
   \   000017   600A         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6407         XRL     A,#0x7
   \   00001C   6005         JZ      ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6406         XRL     A,#0x6
   \   000021   7010         JNZ     ??SampleApp_ProcessEvent_4
    308                    {
    309                      // Start sending the periodic message in a regular interval.
    310                      osal_start_timerEx( SampleApp_TaskID,
    311                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    312                                       SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000023                ; Setup parameters for call to function osal_start_timerEx
   \   000023   7CE8         MOV     R4,#-0x18
   \   000025   7D03         MOV     R5,#0x3
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   ??osal_start_timerEx?relay
    313                    }
    314                    else
    315                    {
    316                      // Device is no longer in the network
    317                    }
    318                    break;
    319          
    320                  default:
    321                    break;
    322                }
    323          
    324                // Release the memory
    325                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000033                ; Setup parameters for call to function osal_msg_deallocate
   \   000033   AA..         MOV     R2,?V0 + 0
   \   000035   AB..         MOV     R3,?V0 + 1
   \   000037   12....       LCALL   ??osal_msg_deallocate?relay
    326          
    327                // Next - if one is available
    328                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003A                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   ??osal_msg_receive?relay
   \   000042   8A..         MOV     ?V0 + 0,R2
   \   000044   8B..         MOV     ?V0 + 1,R3
   \   000046   E5..         MOV     A,?V0 + 0
   \   000048   45..         ORL     A,?V0 + 1
   \   00004A   6032         JZ      ??SampleApp_ProcessEvent_5
   \   00004C   85..82       MOV     DPL,?V0 + 0
   \   00004F   85..83       MOV     DPH,?V0 + 1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   24E6         ADD     A,#-0x1a
   \   000055   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000057   245A         ADD     A,#0x5a
   \   000059   6006         JZ      ??SampleApp_ProcessEvent_7
   \   00005B   24EF         ADD     A,#-0x11
   \   00005D   60B0         JZ      ??SampleApp_ProcessEvent_2
   \   00005F   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000061                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FA           MOV     R2,A
   \   000066   85..82       MOV     DPL,?V0 + 0
   \   000069   85..83       MOV     DPH,?V0 + 1
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000073   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000075                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000075   AA..         MOV     R2,?V0 + 0
   \   000077   AB..         MOV     R3,?V0 + 1
   \   000079   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00007C   80B5         SJMP    ??SampleApp_ProcessEvent_4
    329              }
    330          
    331              // return unprocessed events
    332              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   000083   FB           MOV     R3,A
   \   000084   802A         SJMP    ??SampleApp_ProcessEvent_9
    333            }
    334          
    335            // Send a message out - This event is generated by a timer
    336            //  (setup in SampleApp_Init()).
    337            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000086   EE           MOV     A,R6
   \   000087   A2E0         MOV     C,0xE0 /* A   */.0
   \   000089   5021         JNC     ??SampleApp_ProcessEvent_10
    338            {
    339              // Send the periodic message
    340              SampleApp_SendPeriodicMessage();
   \   00008B                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00008B   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    341          
    342              // Setup to send message again in normal period (+ a little jitter)
    343              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    344                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00008E                ; Setup parameters for call to function osal_rand
   \   00008E   12....       LCALL   ??osal_rand?relay
   \   000091                ; Setup parameters for call to function osal_start_timerEx
   \   000091   EA           MOV     A,R2
   \   000092   24E8         ADD     A,#-0x18
   \   000094   FC           MOV     R4,A
   \   000095   E4           CLR     A
   \   000096   3403         ADDC    A,#0x3
   \   000098   FD           MOV     R5,A
   \   000099   7A01         MOV     R2,#0x1
   \   00009B   7B00         MOV     R3,#0x0
   \   00009D   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   12....       LCALL   ??osal_start_timerEx?relay
    345          
    346              // return unprocessed events
    347              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A5   EE           MOV     A,R6
   \   0000A6   6401         XRL     A,#0x1
   \   0000A8   FA           MOV     R2,A
   \   0000A9   EF           MOV     A,R7
   \   0000AA   80D7         SJMP    ??SampleApp_ProcessEvent_8
    348            }
    349          
    350            // Discard unknown events
    351            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000AC   7A00         MOV     R2,#0x0
   \   0000AE   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000B0                REQUIRE ?Subroutine0
   \   0000B0                ; // Fall through to label ?Subroutine0
    352          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    353          
    354          /*********************************************************************
    355           * Event Generation Functions
    356           */
    357          /*********************************************************************
    358           * @fn      SampleApp_HandleKeys
    359           *
    360           * @brief   Handles all key events for this device.
    361           *
    362           * @param   shift - true if in shift/alt.
    363           * @param   keys - bit field for key events. Valid entries:
    364           *                 HAL_KEY_SW_2
    365           *                 HAL_KEY_SW_1
    366           *
    367           * @return  none
    368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    370          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    371            (void)shift;  // Intentionally unreferenced parameter
    372            
    373            if ( keys & HAL_KEY_SW_6 )
   \   000007   A2E5         MOV     C,0xE0 /* A   */.5
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    374            {
    375              #if defined(ZDO_COORDINATOR)      //–≠µ˜∆˜÷ªΩ” ’ ˝æ›
    376              
    377              #else                             //¬∑”…∆˜∫Õ÷’∂À≤≈∑¢ÀÕ ˝æ›
    378                SampleApp_SendFlashMessage(0);  //“‘◊È≤•∑Ω Ω∑¢ ˝æ›
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7A00         MOV     R2,#0x0
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    379              #endif
    380            }
    381          
    382            if ( keys & HAL_KEY_SW_1 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E0         MOV     C,0xE0 /* A   */.0
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    383            {
    384              /* The Flashr Command is sent to Group 1.
    385               * This key toggles this device in and out of group 1.
    386               * If this device doesn't belong to group 1, this application
    387               * will not receive the Flash command sent to group 1.
    388               */
    389              aps_Group_t *grp;
    390              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    391              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    392              {
    393                // Remove from the group
    394                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    395              }
    396              else
    397              {
    398                // Add to the flash group
    399                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    400              }
    401            }
    402          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B                REQUIRE ?Subroutine1
   \   00003B                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    403          
    404          /*********************************************************************
    405           * LOCAL FUNCTIONS
    406           */
    407          
    408          /*********************************************************************
    409           * @fn      SampleApp_MessageMSGCB
    410           *
    411           * @brief   Data message processor callback.  This function processes
    412           *          any incoming data - probably from other devices.  So, based
    413           *          on cluster ID, perform the intended action.
    414           *
    415           * @param   none
    416           *
    417           * @return  none
    418           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    419          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    420          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    421            uint8 data;
    422          
    423            switch ( pkt->clusterId )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000013   7020         JNZ     ??SampleApp_MessageMSGCB_1
    424            {    
    425              case SAMPLEAPP_PERIODIC_CLUSTERID:
    426                  break;
    427          
    428              case SAMPLEAPP_FLASH_CLUSTERID:
    429                  data = (uint8)pkt->cmd.Data[0];
    430                  if(data == 0) 
   \   000015   EA           MOV     A,R2
   \   000016   2421         ADD     A,#0x21
   \   000018   F582         MOV     DPL,A
   \   00001A   EB           MOV     A,R3
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F583         MOV     DPH,A
   \   000025   8882         MOV     DPL,R0
   \   000027   E0           MOVX    A,@DPTR
   \   000028   7004         JNZ     ??SampleApp_MessageMSGCB_2
    431                  HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF);  
   \   00002A                ; Setup parameters for call to function HalLedSet
   \   00002A   7A00         MOV     R2,#0x0
   \   00002C   8002         SJMP    ??SampleApp_MessageMSGCB_3
    432                  else
    433                  HalLedSet(HAL_LED_2, HAL_LED_MODE_ON); 
   \                     ??SampleApp_MessageMSGCB_2:
   \   00002E                ; Setup parameters for call to function HalLedSet
   \   00002E   7A01         MOV     R2,#0x1
   \                     ??SampleApp_MessageMSGCB_3:
   \   000030   7902         MOV     R1,#0x2
   \   000032   12....       LCALL   ??HalLedSet?relay
    434                  break;
    435            }
    436          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000035   D083         POP     DPH
   \   000037   D082         POP     DPL
   \   000039   02....       LJMP    ?BRET
    437          
    438          /*********************************************************************
    439           * @fn      SampleApp_SendPeriodicMessage
    440           *
    441           * @brief   Send the periodic message.
    442           *
    443           * @param   none
    444           *
    445           * @return  none
    446           */
    447          extern void ADXL345_WR_Reg(unsigned char addr, unsigned char val);//º”ÀŸ∂»¥´∏–∆˜–¥∫Ø ˝
    448          extern unsigned char ADXL345_RD_Reg(unsigned char addr);//º”ÀŸ∂»¥´∏–∆˜∂¡∫Ø ˝
    449          extern float Pitch;
    450          extern float Roll;
    451          extern float Yaw;

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    452          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    453          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    454          
    455           ////////////////////////////////// 
    456            unsigned char temp[10] = {0x21,0};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {33, 0}>` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {33, 0}>` & 0xff
   \   00001A   740A         MOV     A,#0xa
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    457          //  temp[0] = ADXL345_RD_Reg(0x00);
    458          //  ADXL345_WR_Reg(0x1e, 0x45);
    459          //  temp[1] = ADXL345_RD_Reg(0x1e);
    460          //  ADXL345_WR_Reg(0x1f, 0x1f);
    461          //  temp[2] = ADXL345_RD_Reg(0x1f);
    462          //  ADXL345_WR_Reg(0x20, 0x20);
    463          //  temp[3] = ADXL345_RD_Reg(0x20);
    464            temp[0]=(unsigned char)Pitch;
   \   00001F   90....       MOV     DPTR,#Pitch
   \   000022   12....       LCALL   ?XLOAD_R2345
   \   000025   12....       LCALL   ?R2345_FLT_TO_L
   \   000028   85..82       MOV     DPL,?XSP + 0
   \   00002B   85..83       MOV     DPH,?XSP + 1
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   F0           MOVX    @DPTR,A
    465            temp[1]=(unsigned char)Roll;
   \   000031   90....       MOV     DPTR,#Roll
   \   000034   12....       LCALL   ?XLOAD_R2345
   \   000037   12....       LCALL   ?R2345_FLT_TO_L
   \   00003A   7401         MOV     A,#0x1
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E5..         MOV     A,?V0 + 0
   \   000041   F0           MOVX    @DPTR,A
    466            temp[2]=(unsigned char)Yaw;
   \   000042   90....       MOV     DPTR,#Yaw
   \   000045   12....       LCALL   ?XLOAD_R2345
   \   000048   12....       LCALL   ?R2345_FLT_TO_L
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   E5..         MOV     A,?V0 + 0
   \   000052   F0           MOVX    @DPTR,A
    467          
    468            //HalUARTWrite(0,"picth\n", sizeof("picth\n"));//Ã· æ–≈œ¢
    469            //HalUARTWrite(0,&temp[0], sizeof(temp[0]));//Ã· æ–≈œ¢
    470            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    471                                   SAMPLEAPP_PERIODIC_CLUSTERID,
    472                                   3,
    473                                   temp,
    474                                   &SampleApp_TransID,
    475                                   AF_DISCV_ROUTE,
    476                                   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000053                ; Setup parameters for call to function AF_DataRequest
   \   000053   75..1E       MOV     ?V0 + 0,#0x1e
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005B   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00005E   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   7403         MOV     A,#0x3
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   8582..       MOV     ?V0 + 0,DPL
   \   00006E   8583..       MOV     ?V0 + 1,DPH
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   75..03       MOV     ?V0 + 0,#0x3
   \   000079   75..00       MOV     ?V0 + 1,#0x0
   \   00007C   78..         MOV     R0,#?V0 + 0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   75..01       MOV     ?V0 + 0,#0x1
   \   000084   78..         MOV     R0,#?V0 + 0
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000089   7920         MOV     R1,#0x20
   \   00008B   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00008D   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00008F   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000091   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000093   12....       LCALL   ??AF_DataRequest?relay
   \   000096   7409         MOV     A,#0x9
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
    477            {
    478          
    479           //  SysPowerMode(3);
    480            }
    481            else
    482            {
    483              ;
    484              }
    485          
    486          }
   \   00009B   740A         MOV     A,#0xa
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   02....       LJMP    ?Subroutine0 & 0xFFFF
    487          extern void RF_off(void);
    488          extern void RF_on(void);
    489          extern int m_state;
    490          extern void MPU6050_Pose(void);
    491          extern int I2C_Read(unsigned char addr, unsigned char reg, unsigned char len, unsigned char *buf);
    492          #pragma vector = T1_VECTOR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    493           __interrupt void T1_ISR(void)
   \                     T1_ISR:
    494           {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    495              IRCON&=0xFD;
   \   000007   C2C1         CLR     0xc0.1
    496              count++;
   \   000009   90....       MOV     DPTR,#count
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   2401         ADD     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   3400         ADDC    A,#0x0
   \   000014   F0           MOVX    @DPTR,A
    497              MPU6050_Pose();
   \   000015                ; Setup parameters for call to function MPU6050_Pose
   \   000015   12....       LCALL   ??MPU6050_Pose?relay
    498          /////////≤‚ ‘¥´∏–∆˜//////
    499          //    unsigned char test_data[6];
    500          //    I2C_Read(0xd0,0x3B, 1, &test_data[0]);
    501          //    I2C_Read(0xd0,0x3C, 1, &test_data[1]);
    502          //    I2C_Read(0xd0,0x3D, 1, &test_data[2]);
    503          //    I2C_Read(0xd0,0x3E, 1, &test_data[3]);
    504          //    I2C_Read(0xd0,0x3F, 1, &test_data[4]);
    505          //    I2C_Read(0xd0,0x40, 1, &test_data[5]);
    506          
    507               // printf("hello");
    508              //int p=(int)Pitch;
    509              //unsigned char temp_p=(unsigned char)(p;
    510              //int r=(int)Roll;
    511              //unsigned char temp_r=(unsigned char)(r;
    512              //int y=(int)Yaw;
    513              //unsigned char temp_y=(unsigned char)(y;
    514              if(count==2)
   \   000018   90....       MOV     DPTR,#count
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6402         XRL     A,#0x2
   \   00001E   7002         JNZ     ??T1_ISR_0
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \                     ??T1_ISR_0:
   \   000022   7025         JNZ     ??T1_ISR_1
    515              {
    516                //HalUARTWrite(0,&(temp_p), sizeof(temp_p));//Ã· æ–≈œ¢
    517                //HalUARTWrite(0,&(temp_r), sizeof(temp_p));//Ã· æ–≈œ¢
    518                //HalUARTWrite(0,&(temp_y), sizeof(temp_p));//Ã· æ–≈œ¢
    519                //HalUARTWrite(0,test_data, sizeof(test_data));
    520                printf("%f,%f,%f\r\n",Pitch,Roll,Yaw);
   \   000024                ; Setup parameters for call to function printf
   \   000024   90....       MOV     DPTR,#Yaw
   \   000027   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00002A   90....       MOV     DPTR,#Roll
   \   00002D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000030   90....       MOV     DPTR,#Pitch
   \   000033   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000036   7A..         MOV     R2,#`?<Constant "%f,%f,%f\\r\\n">` & 0xff
   \   000038   7B..         MOV     R3,#(`?<Constant "%f,%f,%f\\r\\n">` >> 8) & 0xff
   \   00003A   12....       LCALL   ??printf?relay
   \   00003D   740C         MOV     A,#0xc
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
    521                count=0;
   \   000042   90....       MOV     DPTR,#count
   \   000045   E4           CLR     A
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   F0           MOVX    @DPTR,A
    522              }
    523          /////////////////////////
    524          //    if(count==4)//2√Î∫Ûπÿ±’
    525          //    {
    526          //      RF_on();
    527          //    }else if(count == 8)
    528          //    {
    529          //      RF_off();
    530          //      LED1=0;
    531          //      m_state=0;
    532          //    }
    533           }
   \                     ??T1_ISR_1:
   \   000049   7F01         MOV     R7,#0x1
   \   00004B   02....       LJMP    ?INTERRUPT_LEAVE_XSP
   \   00004E                REQUIRE _A_IRCON
    534          /*********************************************************************
    535           * @fn      SampleApp_SendFlashMessage
    536           *
    537           * @brief   Send the flash message to group 1.
    538           *
    539           * @param   flashTime - in milliseconds
    540           *
    541           * @return  none
    542           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    543          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    544          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    545            LedState = ~LedState;
   \   000005   90....       MOV     DPTR,#LedState
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F4           CPL     A
   \   00000A   F0           MOVX    @DPTR,A
    546            
    547            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    548                                 SAMPLEAPP_FLASH_CLUSTERID,
    549                                 1,
    550                                 &LedState,
    551                                 &SampleApp_TransID,
    552                                 AF_DISCV_ROUTE,
    553                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00000B                ; Setup parameters for call to function AF_DataRequest
   \   00000B   75..1E       MOV     ?V0 + 0,#0x1e
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000013   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000016   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75....       MOV     ?V0 + 0,#LedState & 0xff
   \   000021   75....       MOV     ?V0 + 1,#(LedState >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   75..01       MOV     ?V0 + 0,#0x1
   \   00002C   75..00       MOV     ?V0 + 1,#0x0
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   75..02       MOV     ?V0 + 0,#0x2
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7920         MOV     R1,#0x20
   \   00003E   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000040   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000042   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000044   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000046   12....       LCALL   ??AF_DataRequest?relay
   \   000049   7409         MOV     A,#0x9
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004E   E9           MOV     A,R1
   \   00004F   7011         JNZ     ??SampleApp_SendFlashMessage_0
    554            {
    555              if(LedState == 0)
   \   000051   90....       MOV     DPTR,#LedState
   \   000054   E0           MOVX    A,@DPTR
   \   000055   7004         JNZ     ??SampleApp_SendFlashMessage_1
    556                HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);  
   \   000057                ; Setup parameters for call to function HalLedSet
   \   000057   7A01         MOV     R2,#0x1
   \   000059   8002         SJMP    ??SampleApp_SendFlashMessage_2
    557              else
    558                HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF); 
   \                     ??SampleApp_SendFlashMessage_1:
   \   00005B                ; Setup parameters for call to function HalLedSet
   \   00005B   7A00         MOV     R2,#0x0
   \                     ??SampleApp_SendFlashMessage_2:
   \   00005D   7901         MOV     R1,#0x1
   \   00005F   12....       LCALL   ??HalLedSet?relay
    559            }
    560            else
    561            {
    562              // Error occurred in request to send.
    563            }
    564          }
   \                     ??SampleApp_SendFlashMessage_0:
   \   000062   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment INTVEC, offset 0x4b, root
   \                     `??T1_ISR??INTVEC 75`:
   \   00004B   02....       LJMP       (T1_ISR)

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {33, 0}>`:
   \   000000   21           DB 33
   \   000001   00           DB 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%f,%f,%f\\r\\n">`:
   \   000000   25662C25     DB "%f,%f,%f\015\012"
   \            662C2566
   \            0D0A00  
    565          
    566          /*********************************************************************
    567          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             2      0     12
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         0      0     29
       -> AF_DataRequest                0      0     38
       -> HalLedSet                     0      0     20
       -> HalLedSet                     0      0     20
     SampleApp_SendPeriodicMessage      2      0     43
       -> AF_DataRequest                0      0     62
     T1_ISR                             0      0     26
       -> MPU6050_Pose                  0      0     28
       -> printf                        0      0     52
     putchar                            0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_IRCON                                 1
     U0DBUF                                   1
     _A_IRCON2                                1
     putchar                                 10
     led_flag                                 1
     count_open                               1
     count_close                              1
     LedState                                 1
     end_flag                                 1
     end_count                                2
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     send_flag                                1
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         159
     SampleApp_ProcessEvent                 176
     ?Subroutine0                             5
     SampleApp_HandleKeys                    59
     ?Subroutine1                             5
     SampleApp_MessageMSGCB                  60
     SampleApp_SendPeriodicMessage          163
     T1_ISR                                  78
     SampleApp_SendFlashMessage             101
     ??T1_ISR??INTVEC 75                      3
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant {33, 0}>                     10
     ?<Constant "%f,%f,%f\r\n">              11

 
 728 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   3 bytes in segment INTVEC
  88 bytes in segment NEAR_CODE
   3 bytes in segment SFR_AN
  55 bytes in segment XDATA_ROM_C
  61 bytes in segment XDATA_Z
 
 852 bytes of CODE  memory (+ 3 bytes shared)
  55 bytes of CONST memory
   0 bytes of DATA  memory (+ 3 bytes shared)
  61 bytes of XDATA memory

Errors: none
Warnings: none
