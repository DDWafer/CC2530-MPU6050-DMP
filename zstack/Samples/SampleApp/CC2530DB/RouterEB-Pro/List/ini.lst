###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         25/Dec/2018  16:43:59 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\Source\ini.c                                    #
#    Command line       =  -f F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú #
#                          \ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.c #
#                          fg (-DCPU32MHZ -DROOT=__near_func                  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK         #
#                          -DBLINK_LEDS) -f F:\key_pro\AAAAAgraduation_projec #
#                          t\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530 #
#                          DB\f8wConfig.cfg (-DSECURE=0                       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\Source\ini.c -D ZIGBEEPRO -D ZTOOL_P1 -D        #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -D STM32F10X_MD -D             #
#                          USE_STDPERIPH_DRIVER -lC                           #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\RouterEB-Pro\List\ -lA                 #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\RouterEB-Pro\List\ --diag_suppress     #
#                          Pe001,Pa010 -o F:\key_pro\AAAAAgraduation_project\ #
#                          Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\ -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú #
#                          \ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\ -I F:\key_pro\AAAAAgraduation_proj #
#                          ect\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\SOURCE\ -I       #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I            #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I       #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ #
#                           -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– #
#                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530EB\ -I F:\key_pro\AAAAAgraduation_project #
#                          \Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\OSAL\MCU\CCSOC\ -I F:\key_pro\AAAAAgraduation_ #
#                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\OSAL\INCLUDE\ -I                        #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\    #
#                          -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú #
#                          \ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK #
#                          \ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã #
#                          –Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S #
#                          EC\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥ #
#                          ≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK #
#                          \SAPI\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œ #
#                          µÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ST #
#                          ACK\SYS\ -I F:\key_pro\AAAAAgraduation_project\Ωªª #
#                          •œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\ZDO\ -I F:\key_pro\AAAAAgraduation_project\Ω #
#                          ªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\ -I F:\key_pro\AAAAAgraduation_project\ #
#                          Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\ZMAC\ -I F:\key_pro\AAAAAgraduation_project\Ωªª #
#                          •œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          SERVICES\SADDR\ -I F:\key_pro\AAAAAgraduation_proj #
#                          ect\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\ -I                          #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ #
#                           -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– #
#                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\ -I F:\key_pro\AAAAAgraduation_project\Ωªª• #
#                          œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\M #
#                          AC\LOW_LEVEL\srf04\ -I F:\key_pro\AAAAAgraduation_ #
#                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I     #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\..\..\..\ -Ohz          #
#    List file          =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\RouterEB-Pro\List\ini.lst              #
#    Object file        =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\RouterEB-Pro\Obj\ini.r51               #
#                                                                             #
#                                                                             #
###############################################################################

F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleApp\Source\ini.c
      1          /*************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2009-09-17 20:35:33 -0700 (Thu, 17 Sep 2009) $
      4            Revision:       $Revision: 20782 $
      5          
      6            Description:    Startup and shutdown code for ZStack
      7            Notes:          This version targets the Chipcon CC2530
      8          
      9          
     10            Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ini.h"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   uint8 open_flag
   \                     open_flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   uint8 close_flag
   \                     close_flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   uint8 timesleep
   \                     timesleep:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   uint8 untimesleep
   \                     untimesleep:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   uint8 timesleep_count
   \                     timesleep_count:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   uint8 timesleep_test
   \                     timesleep_test:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   uint16 count
   \                     count:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   int m_state
   \                     m_state:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     45          #include "ZComDef.h"

  typedef unsigned char   uint8;
                          ^
"F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\COMPONENTS\HAL\TARGET\CC2530EB\hal_types.h",50  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned short  uint16;
                          ^
"F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\COMPONENTS\HAL\TARGET\CC2530EB\hal_types.h",53  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned char   bool;
                          ^
"F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\COMPONENTS\HAL\TARGET\CC2530EB\hal_types.h",58  Warning[Pe301]: 
          typedef name has already been declared (with same type)
     46          #include "OSAL.h"
     47          #include "OSAL_Nv.h"
     48          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x8a
   \   unsigned char volatile __sfr P1IFG
   \                     P1IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8d
   \   unsigned char volatile __sfr P1IEN
   \                     P1IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xaf
   \   unsigned char volatile __sfr T1STAT
   \                     T1STAT:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe4
   \   unsigned char volatile __sfr T1CTL
   \                     T1CTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf6
   \   unsigned char volatile __sfr P1INP
   \                     P1INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     49          #include "ZMAC.h"
     50          
     51          #ifndef NONWK
     52            #include "AF.h"
     53          #endif
     54          
     55          /* Hal */
     56          #include "hal_lcd.h"
     57          #include "hal_led.h"
     58          #include "hal_adc.h"
     59          #include "hal_sleep.h"
     60          #include "hal_drivers.h"
     61          #include "hal_assert.h"
     62          #include "hal_flash.h"
     63          extern unsigned char ADXL345_Init(void);
     64          extern void MPU6050_Init(void);
     65          extern unsigned char ADXL345_RD_Reg(unsigned char addr);
     66          extern void ADXL345_read(void);
     67          extern void RF_on(void);    //ø™∆Ù∫ÏÕ‚
     68          extern void RF_off(void);  //πÿ±’∫ÏÕ‚
     69          extern void Usart0_Init(void);
     70          extern unsigned char ADXL345_sleep(void);
     71          extern void delay_ms(unsigned int t);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          void ini( void ){
   \                     ini:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     73           // Turn off interrupts
     74            osal_int_disable( INTS_ALL );
   \   000004                ; Setup parameters for call to function osal_int_disable
   \   000004   79FF         MOV     R1,#-0x1
   \   000006   12....       LCALL   ??osal_int_disable?relay
     75          
     76            // Initialization for board related stuff such as LEDs
     77            HAL_BOARD_INIT();
   \   000009   53BEFB       ANL     0xbe,#0xfb
   \                     ??ini_0:
   \   00000C   E59D         MOV     A,0x9d
   \   00000E   A2E6         MOV     C,0xE0 /* A   */.6
   \   000010   50FA         JNC     ??ini_0
   \   000012   00           NOP
   \   000013   78F8         MOV     R0,#-0x8
   \   000015   7901         MOV     R1,#0x1
   \                     ??ini_1:
   \   000017   00           NOP
   \   000018   E8           MOV     A,R0
   \   000019   24FF         ADD     A,#-0x1
   \   00001B   18           DEC     R0
   \   00001C   E9           MOV     A,R1
   \   00001D   34FF         ADDC    A,#-0x1
   \   00001F   F9           MOV     R1,A
   \   000020   E8           MOV     A,R0
   \   000021   49           ORL     A,R1
   \   000022   70F3         JNZ     ??ini_1
   \   000024   75C600       MOV     0xc6,#0x0
   \                     ??ini_2:
   \   000027   E59E         MOV     A,0x9e
   \   000029   70FC         JNZ     ??ini_2
   \   00002B   43BE04       ORL     0xbe,#0x4
   \   00002E   906270       MOV     DPTR,#0x6270
   \   000031   7408         MOV     A,#0x8
   \   000033   F0           MOVX    @DPTR,A
   \   000034   43FE01       ORL     0xfe,#0x1
   \   000037   43FE02       ORL     0xfe,#0x2
   \   00003A   43FD10       ORL     0xfd,#0x10
     78          
     79            
     80            // Make sure supply voltage is high enough to run
     81            zmain_vdd_check();
   \   00003D                ; Setup parameters for call to function zmain_vdd_check
   \   00003D   12....       LCALL   ??zmain_vdd_check?relay
     82          
     83            // Initialize board I/O
     84            InitBoard( OB_COLD );
   \   000040                ; Setup parameters for call to function InitBoard
   \   000040   7900         MOV     R1,#0x0
   \   000042   12....       LCALL   ??InitBoard?relay
     85          
     86            // Initialze HAL drivers
     87            HalDriverInit();
   \   000045                ; Setup parameters for call to function HalDriverInit
   \   000045   12....       LCALL   ??HalDriverInit?relay
     88            
     89          ////////////////////////////////////////////////////////
     90            
     91            
     92            // Initialize NV System
     93            osal_nv_init( NULL );
   \   000048                ; Setup parameters for call to function osal_nv_init
   \   000048   7A00         MOV     R2,#0x0
   \   00004A   7B00         MOV     R3,#0x0
   \   00004C   12....       LCALL   ??osal_nv_init?relay
     94          
     95            // Initialize the MAC
     96            ZMacInit();
   \   00004F                ; Setup parameters for call to function ZMacInit
   \   00004F   12....       LCALL   ??ZMacInit?relay
     97          
     98            // Determine the extended address
     99            zmain_ext_addr();
   \   000052                ; Setup parameters for call to function zmain_ext_addr
   \   000052   12....       LCALL   ??zmain_ext_addr?relay
    100          
    101            // Initialize basic NV items
    102            zgInit(); 
   \   000055                ; Setup parameters for call to function zgInit
   \   000055   12....       LCALL   ??zgInit?relay
    103          
    104          #ifndef NONWK
    105            // Since the AF isn't a task, call it's initialization routine
    106            afInit();
   \   000058                ; Setup parameters for call to function afInit
   \   000058   12....       LCALL   ??afInit?relay
    107          #endif
    108          
    109            // Initialize the operating system
    110            osal_init_system();
   \   00005B                ; Setup parameters for call to function osal_init_system
   \   00005B   12....       LCALL   ??osal_init_system?relay
    111          
    112            // Allow interrupts
    113            osal_int_enable( INTS_ALL );
   \   00005E                ; Setup parameters for call to function osal_int_enable
   \   00005E   79FF         MOV     R1,#-0x1
   \   000060   12....       LCALL   ??osal_int_enable?relay
    114          
    115            // Final board initialization
    116            InitBoard( OB_READY );
   \   000063                ; Setup parameters for call to function InitBoard
   \   000063   7902         MOV     R1,#0x2
   \   000065   12....       LCALL   ??InitBoard?relay
    117          
    118            // Display information about this device
    119            zmain_dev_info();
   \   000068                ; Setup parameters for call to function zmain_dev_info
   \   000068   12....       LCALL   ??zmain_dev_info?relay
    120          
    121            /* Display the device info on the LCD */
    122          //#ifdef LCD_SUPPORTED
    123          //  zmain_lcd_init();
    124          //#endif
    125          
    126          #ifdef WDT_IN_PM1
    127            /* If WDT is used, this is a good place to enable it. */
    128            WatchDogEnable( WDTIMX );
    129          #endif
    130          //////////////////////////////////////////////
    131            //InitSleepTimer();
    132            delay_ms(1000);
   \   00006B                ; Setup parameters for call to function delay_ms
   \   00006B   7AE8         MOV     R2,#-0x18
   \   00006D   7B03         MOV     R3,#0x3
   \   00006F   12....       LCALL   ??delay_ms?relay
    133            //ADXL345_Init();//≥ı ºªØADXL354
    134            MPU6050_Init();
   \   000072                ; Setup parameters for call to function MPU6050_Init
   \   000072   12....       LCALL   ??MPU6050_Init?relay
    135            Usart0_Init();
   \   000075                ; Setup parameters for call to function Usart0_Init
   \   000075   12....       LCALL   ??Usart0_Init?relay
    136            //RF_on();
    137            P1INP = 0X00; //…Ë÷√P1ø⁄ ‰»ÎµÁ¬∑ƒ£ ΩŒ™…œ¿≠/œ¬¿≠
   \   000078   75F600       MOV     0xf6,#0x0
    138            P1IEN |= 0X20; //P15…Ë÷√Œ™÷–∂œ∑Ω Ω
   \   00007B   438D20       ORL     0x8d,#0x20
    139            PICTL &= ~0X04; //…œ…˝—ÿ¥•∑¢
   \   00007E   538CFB       ANL     0x8c,#0xfb
    140            EA = 1;
   \   000081   D2AF         SETB    0xa8.7
    141          //  //IEN1 |= 0X20; // ø™P0ø⁄◊‹÷–∂œ
    142            IEN2 |=0x10;    //ø™P1◊‹÷–∂œ
   \   000083   439A10       ORL     0x9a,#0x10
    143            P1IFG |= 0x00; //«Â÷–∂œ±Í÷æ
   \   000086   858A8A       MOV     0x8a,0x8a
    144            
    145            P2DIR |= 0x01; //P2.0∂®“ÂŒ™ ‰≥ˆø⁄
   \   000089   43FF01       ORL     0xff,#0x1
    146            RF_off();
   \   00008C                ; Setup parameters for call to function RF_off
   \   00008C   12....       LCALL   ??RF_off?relay
    147           // ADXL345_sleep();
    148          //  P1DIR |= 0X03;
    149          //  P1_0=0;
    150          //  P1_1=0;
    151            LED1=0;
   \   00008F   C2A0         CLR     0xa0.0
    152          //∂® ±∆˜1¥Úø™
    153            T1CTL  = 0x0d;   // ∂® ±∆˜1øÿ÷∆ºƒ¥Ê∆˜ µ⁄2-3ŒªŒ™∑÷∆µ£¨01±Ì æ∆µ¬ Œ™/8£¨µ⁄0-1ŒªŒ™ƒ£ Ω£¨01±Ì æ16Œªº∆ ˝∆˜¥”0000-FFFFº∆ ˝
   \   000091   75E40D       MOV     0xe4,#0xd
    154             //T1CTL=0x02;     //T1CTL  = 0x09;
    155            T1STAT = 0x21;   // ∂® ±∆˜1◊¥Ã¨ºƒ¥Ê∆˜ µ⁄0ŒªŒ™∂® ±∆˜0Õ®µ¿4÷–∂œ±Í÷æ£¨µ⁄4Œ™Œ™∂® ±∆˜1Õ®µ¿4÷–∂œ±Í÷æ
   \   000094   75AF21       MOV     0xaf,#0x21
    156            T1IE=1;          // ∂® ±∆˜1÷–∂œ πƒ‹£¨IEN1÷–∂œ πƒ‹ºƒ¥Ê∆˜÷–µƒ√˚≥∆£¨Œ™1Œª
   \   000097   D2B9         SETB    0xb8.1
    157          
    158            //Delay_MS(500);  // ø™ª˙µ∆ …¡“ªœ¬ Õ¨ ±—” ±“ªœ¬
    159            //LED_Flick();
    160           // T1CTL&=0x0C;  //Õ£÷π∂® ±∆˜1
    161            count=0;
   \   000099   90....       MOV     DPTR,#count
   \   00009C   E4           CLR     A
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   F0           MOVX    @DPTR,A
    162            SysPowerMode(4);  //ø™ª˙Ω¯»Î…Ó∂»ÀØ√ﬂ µ»¥˝∞¥º¸ªΩ–—
   \   0000A0                ; Setup parameters for call to function SysPowerMode
   \   0000A0   7904         MOV     R1,#0x4
   \   0000A2   12....       LCALL   ??SysPowerMode?relay
    163            
    164            //LED_Flick();
    165           
    166            //////////////////////////////////////////////////////////
    167          
    168          }
   \   0000A5   D083         POP     DPH
   \   0000A7   D082         POP     DPL
   \   0000A9   02....       LJMP    ?BRET
   \   0000AC                REQUIRE SLEEPCMD
   \   0000AC                REQUIRE SLEEPSTA
   \   0000AC                REQUIRE CLKCONCMD
   \   0000AC                REQUIRE CLKCONSTA
   \   0000AC                REQUIRE P1DIR
   \   0000AC                REQUIRE P0DIR
   \   0000AC                REQUIRE P1INP
   \   0000AC                REQUIRE P1IEN
   \   0000AC                REQUIRE PICTL
   \   0000AC                REQUIRE _A_IEN0
   \   0000AC                REQUIRE IEN2
   \   0000AC                REQUIRE P1IFG
   \   0000AC                REQUIRE P2DIR
   \   0000AC                REQUIRE _A_P2
   \   0000AC                REQUIRE T1CTL
   \   0000AC                REQUIRE T1STAT
   \   0000AC                REQUIRE _A_IEN1
    169          
    170          
    171          #pragma vector = ST_VECTOR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    172          __interrupt void ST_ISR(void)
   \                     ST_ISR:
    173          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    174            STIF = 0; //«Â±Í÷æŒª
   \   000007   C2C7         CLR     0xc0.7
    175            SysPowerMode(4); //Ω¯»Î’˝≥£π§◊˜ƒ£ Ω
   \   000009                ; Setup parameters for call to function SysPowerMode
   \   000009   7904         MOV     R1,#0x4
   \   00000B   12....       LCALL   ??SysPowerMode?relay
    176          }
   \   00000E   7F01         MOV     R7,#0x1
   \   000010   02....       LJMP    ?INTERRUPT_LEAVE_XSP
   \   000013                REQUIRE _A_IRCON
    177          //uint16 count=0; //∞¥º¸»∑»œº∆ ±
    178          #pragma vector = P1INT_VECTOR   //P0ø⁄÷–∂œ∫Ø ˝

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    179          __interrupt void P1_ISR(void)
   \                     P1_ISR:
    180          {
   \   000000   C0E0         PUSH    A
   \   000002   C0D0         PUSH    PSW
   \   000004   E8           MOV     A,R0
   \   000005   C0E0         PUSH    A
   \   000007   E9           MOV     A,R1
   \   000008   C0E0         PUSH    A
   \   00000A   C082         PUSH    DPL
   \   00000C   C083         PUSH    DPH
   \   00000E                ; Saved register size: 6
   \   00000E                ; Auto size: 0
    181            if(P1IFG>0)
   \   00000E   E58A         MOV     A,0x8a
   \   000010   6003         JZ      ??P1_ISR_0
    182            {
    183              P1IFG = 0;
   \   000012   758A00       MOV     0x8a,#0x0
    184            }
    185            count=0;
   \                     ??P1_ISR_0:
   \   000015   90....       MOV     DPTR,#count
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
    186            LED1=1;
   \   00001C   D2A0         SETB    0xa0.0
    187            (m_state-2)&&(m_state++);  //»Ùm_state≤ªµ»”⁄2£¨m_state++
   \   00001E   90....       MOV     DPTR,#m_state
   \   000021   E0           MOVX    A,@DPTR
   \   000022   24FE         ADD     A,#-0x2
   \   000024   F8           MOV     R0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   34FF         ADDC    A,#-0x1
   \   000029   F9           MOV     R1,A
   \   00002A   E8           MOV     A,R0
   \   00002B   49           ORL     A,R1
   \   00002C   600C         JZ      ??P1_ISR_1
   \   00002E   90....       MOV     DPTR,#m_state
   \   000031   E0           MOVX    A,@DPTR
   \   000032   2401         ADD     A,#0x1
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   3400         ADDC    A,#0x0
   \   000039   F0           MOVX    @DPTR,A
    188            //RF_on();
    189            T1CTL  = 0x0d;   // ∂® ±∆˜1øÿ÷∆ºƒ¥Ê∆˜ ∆µ¬ Œ™1/128£¨6Œªº∆ ˝∆˜¥”0000-FFFFº∆ ˝,128/16M *65535°÷0.5s
   \                     ??P1_ISR_1:
   \   00003A   75E40D       MOV     0xe4,#0xd
    190            T1STAT = 0x21;   // ∂® ±∆˜1◊¥Ã¨ºƒ¥Ê∆˜ µ⁄0ŒªŒ™∂® ±∆˜0Õ®µ¿4÷–∂œ±Í÷æ£¨µ⁄4Œ™Œ™∂® ±∆˜1Õ®µ¿4÷–∂œ±Í÷æ
   \   00003D   75AF21       MOV     0xaf,#0x21
    191            T1IE=1;
   \   000040   D2B9         SETB    0xb8.1
    192            P1IF = 0; 
   \   000042   C2EB         CLR     0xe8.3
    193          }
   \   000044   D083         POP     DPH
   \   000046   D082         POP     DPL
   \   000048   D0E0         POP     A
   \   00004A   F9           MOV     R1,A
   \   00004B   D0E0         POP     A
   \   00004D   F8           MOV     R0,A
   \   00004E   D0D0         POP     PSW
   \   000050   D0E0         POP     A
   \   000052   32           RETI
   \   000053                REQUIRE P1IFG
   \   000053                REQUIRE _A_P2
   \   000053                REQUIRE T1CTL
   \   000053                REQUIRE T1STAT
   \   000053                REQUIRE _A_IEN1
   \   000053                REQUIRE _A_IRCON2
    194          
    195          /*********************************************************************
    196           * @fn      zmain_vdd_check
    197           * @brief   Check if the Vdd is OK to run the processor.
    198           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    199           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    200          static void zmain_vdd_check( void )
   \                     zmain_vdd_check:
    201          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    202            uint8 vdd_passed_count = 0;
   \   000005   7E00         MOV     R6,#0x0
    203            bool toggle = 0;
   \   000007   7F00         MOV     R7,#0x0
    204          
    205            // Repeat getting the sample until number of failures or successes hits MAX
    206            // then based on the count value, determine if the device is ready or not
    207            while ( vdd_passed_count < MAX_VDD_SAMPLES )
    208            {
    209              if ( HalAdcCheckVdd (ZMAIN_VDD_LIMIT) )
   \                     ??zmain_vdd_check_0:
   \   000009                ; Setup parameters for call to function HalAdcCheckVdd
   \   000009   7904         MOV     R1,#0x4
   \   00000B   12....       LCALL   ??HalAdcCheckVdd?relay
   \   00000E   E9           MOV     A,R1
   \   00000F   6019         JZ      ??zmain_vdd_check_1
    210              {
    211                vdd_passed_count++;    // Keep track # times Vdd passes in a row
   \   000011   0E           INC     R6
    212                MicroWait (10000);     // Wait 10ms to try again
   \   000012                ; Setup parameters for call to function Onboard_wait
   \   000012   7A10         MOV     R2,#0x10
   \   000014   7B27         MOV     R3,#0x27
   \   000016   12....       LCALL   ??Onboard_wait?relay
    213              }
    214              else
    215              {
    216                vdd_passed_count = 0;  // Reset passed counter
    217                MicroWait (50000);     // Wait 50ms
    218                MicroWait (50000);     // Wait another 50ms to try again
    219              }
    220          
    221              /* toggle LED1 and LED2 */
    222              if (vdd_passed_count == 0)
   \   000019   EE           MOV     A,R6
   \   00001A   601E         JZ      ??zmain_vdd_check_2
   \   00001C   C3           CLR     C
   \   00001D   9403         SUBB    A,#0x3
   \   00001F   40E8         JC      ??zmain_vdd_check_0
    223              {
    224                if ((toggle = !(toggle)))
    225                  HAL_TOGGLE_LED1();
    226                else
    227                  HAL_TOGGLE_LED2();
    228              }
    229            }
    230          
    231            /* turn off LED1 */
    232            HAL_TURN_OFF_LED1();
   \   000021   C290         CLR     0x90.0
    233            HAL_TURN_OFF_LED2();
   \   000023   C291         CLR     0x90.1
    234          }
   \   000025   7F01         MOV     R7,#0x1
   \   000027   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_vdd_check_1:
   \   00002A   7E00         MOV     R6,#0x0
   \   00002C                ; Setup parameters for call to function Onboard_wait
   \   00002C   7A50         MOV     R2,#0x50
   \   00002E   7BC3         MOV     R3,#-0x3d
   \   000030   12....       LCALL   ??Onboard_wait?relay
   \   000033                ; Setup parameters for call to function Onboard_wait
   \   000033   7A50         MOV     R2,#0x50
   \   000035   7BC3         MOV     R3,#-0x3d
   \   000037   12....       LCALL   ??Onboard_wait?relay
   \                     ??zmain_vdd_check_2:
   \   00003A   EF           MOV     A,R7
   \   00003B   700A         JNZ     ??zmain_vdd_check_3
   \   00003D   7F01         MOV     R7,#0x1
   \   00003F   A290         MOV     C,0x90.0
   \   000041   400E         JC      ??zmain_vdd_check_4
   \   000043   D290         SETB    0x90.0
   \   000045   80C2         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_3:
   \   000047   7F00         MOV     R7,#0x0
   \   000049   A291         MOV     C,0x90.1
   \   00004B   4008         JC      ??zmain_vdd_check_5
   \   00004D   D291         SETB    0x90.1
   \   00004F   80B8         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_4:
   \   000051   C290         CLR     0x90.0
   \   000053   80B4         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_5:
   \   000055   C291         CLR     0x90.1
   \   000057   80B0         SJMP    ??zmain_vdd_check_0
   \   000059                REQUIRE _A_P1
    235          
    236          /**************************************************************************************************
    237           * @fn          zmain_ext_addr
    238           *
    239           * @brief       Execute a prioritized search for a valid extended address and write the results
    240           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    241           *
    242           * input parameters
    243           *
    244           * None.
    245           *
    246           * output parameters
    247           *
    248           * None.
    249           *
    250           * @return      None.
    251           **************************************************************************************************
    252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    253          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    254          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    255            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {255, 255, 255, 255, 255, 255, 255,` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {255, 255, 255, 255, 255, 255, 255,` & 0xff
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    256            uint8 writeNV = TRUE;
    257          
    258            // First check whether a non-erased extended address exists in the OSAL NV.
    259            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    260                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    261                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   00001F   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   000022   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000025   F5..         MOV     ?V0 + 2,A
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   A982         MOV     R1,DPL
   \   00002F   AA83         MOV     R2,DPH
   \   000031   89..         MOV     ?V0 + 4,R1
   \   000033   8A..         MOV     ?V0 + 5,R2
   \   000035   F5..         MOV     ?V0 + 6,A
   \   000037                ; Setup parameters for call to function osal_nv_item_init
   \   000037   F5..         MOV     ?V0 + 8,A
   \   000039   F5..         MOV     ?V0 + 9,A
   \   00003B   78..         MOV     R0,#?V0 + 8
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   7C08         MOV     R4,#0x8
   \   000042   7D00         MOV     R5,#0x0
   \   000044   7A01         MOV     R2,#0x1
   \   000046   7B00         MOV     R3,#0x0
   \   000048   12....       LCALL   ??osal_nv_item_init?relay
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000050   E9           MOV     A,R1
   \   000051   7046         JNZ     ??zmain_ext_addr_0
   \   000053                ; Setup parameters for call to function osal_nv_read
   \   000053   75....       MOV     ?V0 + 8,#aExtendedAddress & 0xff
   \   000056   75....       MOV     ?V0 + 9,#(aExtendedAddress >> 8) & 0xff
   \   000059   78..         MOV     R0,#?V0 + 8
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   75..08       MOV     ?V0 + 8,#0x8
   \   000061   75..00       MOV     ?V0 + 9,#0x0
   \   000064   78..         MOV     R0,#?V0 + 8
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   7C00         MOV     R4,#0x0
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   7A01         MOV     R2,#0x1
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   12....       LCALL   ??osal_nv_read?relay
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   E9           MOV     A,R1
   \   00007A   701D         JNZ     ??zmain_ext_addr_0
   \   00007C                ; Setup parameters for call to function osal_memcmp
   \   00007C   78..         MOV     R0,#?V0 + 4
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000081   7C08         MOV     R4,#0x8
   \   000083   7D00         MOV     R5,#0x0
   \   000085   A9..         MOV     R1,?V0 + 0
   \   000087   AA..         MOV     R2,?V0 + 1
   \   000089   AB..         MOV     R3,?V0 + 2
   \   00008B   12....       LCALL   ??osal_memcmp?relay
   \   00008E   7403         MOV     A,#0x3
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093   E9           MOV     A,R1
   \   000094   7003         JNZ     $+5
   \   000096   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    262            {
    263              // Attempt to read the extended address from the location on the lock bits page
    264              // where the programming tools know to reserve it.
    265              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000099                ; Setup parameters for call to function HalFlashRead
   \   000099   75..08       MOV     ?V0 + 8,#0x8
   \   00009C   78..         MOV     R0,#?V0 + 8
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   0000A3   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   0000A5   7AE8         MOV     R2,#-0x18
   \   0000A7   7B07         MOV     R3,#0x7
   \   0000A9   797F         MOV     R1,#0x7f
   \   0000AB   12....       LCALL   ??HalFlashRead?relay
   \   0000AE   7402         MOV     A,#0x2
   \   0000B0   12....       LCALL   ?DEALLOC_XSTACK8
    266          
    267              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000B3                ; Setup parameters for call to function osal_memcmp
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B8   7C08         MOV     R4,#0x8
   \   0000BA   7D00         MOV     R5,#0x0
   \   0000BC   A9..         MOV     R1,?V0 + 0
   \   0000BE   AA..         MOV     R2,?V0 + 1
   \   0000C0   AB..         MOV     R3,?V0 + 2
   \   0000C2   12....       LCALL   ??osal_memcmp?relay
   \   0000C5   7403         MOV     A,#0x3
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CA   E9           MOV     A,R1
   \   0000CB   6035         JZ      ??zmain_ext_addr_2
    268              {
    269                // Attempt to read the extended address from the designated location in the Info Page.
    270                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000CD                ; Setup parameters for call to function osal_memcmp
   \   0000CD   78..         MOV     R0,#?V0 + 4
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D2   7C08         MOV     R4,#0x8
   \   0000D4   7D00         MOV     R5,#0x0
   \   0000D6   790C         MOV     R1,#0xc
   \   0000D8   7A78         MOV     R2,#0x78
   \   0000DA   7B00         MOV     R3,#0x0
   \   0000DC   12....       LCALL   ??osal_memcmp?relay
   \   0000DF   7403         MOV     A,#0x3
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E4   E9           MOV     A,R1
   \   0000E5   7054         JNZ     ??zmain_ext_addr_3
    271                {
    272                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000E7                ; Setup parameters for call to function osal_memcpy
   \   0000E7   75..0C       MOV     ?V0 + 0,#0xc
   \   0000EA   75..78       MOV     ?V0 + 1,#0x78
   \   0000ED   78..         MOV     R0,#?V0 + 0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F2   7C08         MOV     R4,#0x8
   \   0000F4   7D00         MOV     R5,#0x0
   \   0000F6   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   0000F8   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   0000FA   12....       LCALL   ??osal_memcpy?relay
   \   0000FD   7403         MOV     A,#0x3
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
    273                }
    274                else  // No valid extended address was found.
    275                {
    276                  uint8 idx;
    277                  
    278          #if !defined ( NV_RESTORE )
    279                  writeNV = FALSE;  // Make this a temporary IEEE address
    280          #endif
    281          
    282                  /* Attempt to create a sufficiently random extended address for expediency.
    283                   * Note: this is only valid/legal in a test environment and
    284                   *       must never be used for a commercial product.
    285                   */
    286                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
    287                  {
    288                    uint16 randy = osal_rand();
    289                    aExtendedAddress[idx++] = LO_UINT16(randy);
    290                    aExtendedAddress[idx++] = HI_UINT16(randy);
    291                  }
    292                  // Next-to-MSB identifies ZigBee devicetype.
    293          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    294                  aExtendedAddress[idx++] = 0x10;
    295          #elif ZG_BUILD_RTRONLY_TYPE
    296                  aExtendedAddress[idx++] = 0x20;
    297          #else
    298                  aExtendedAddress[idx++] = 0x30;
    299          #endif
    300                  // MSB has historical signficance.
    301                  aExtendedAddress[idx] = 0xF8;
    302                }
    303              }
    304          
    305              if (writeNV)
    306              {
    307                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   000102                ; Setup parameters for call to function osal_nv_write
   \   000102   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   000105   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000108   78..         MOV     R0,#?V0 + 0
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010D   75..08       MOV     ?V0 + 0,#0x8
   \   000110   75..00       MOV     ?V0 + 1,#0x0
   \   000113   78..         MOV     R0,#?V0 + 0
   \   000115   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000118   7C00         MOV     R4,#0x0
   \   00011A   7D00         MOV     R5,#0x0
   \   00011C   7A01         MOV     R2,#0x1
   \   00011E   7B00         MOV     R3,#0x0
   \   000120   12....       LCALL   ??osal_nv_write?relay
   \   000123   7404         MOV     A,#0x4
   \   000125   12....       LCALL   ?DEALLOC_XSTACK8
    308              }
    309            }
    310          
    311            // Set the MAC PIB extended address according to results from above.
    312            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000128                ; Setup parameters for call to function ZMacSetReq
   \   000128   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   00012A   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   00012C   79E2         MOV     R1,#-0x1e
   \   00012E   12....       LCALL   ??ZMacSetReq?relay
    313          }
   \   000131   7408         MOV     A,#0x8
   \   000133   12....       LCALL   ?DEALLOC_XSTACK8
   \   000136   7F0A         MOV     R7,#0xa
   \   000138   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_ext_addr_3:
   \   00013B   7E00         MOV     R6,#0x0
   \                     ??zmain_ext_addr_4:
   \   00013D                ; Setup parameters for call to function osal_rand
   \   00013D   12....       LCALL   ??osal_rand?relay
   \   000140   8A..         MOV     ?V0 + 0,R2
   \   000142   A8..         MOV     R0,?V0 + 0
   \   000144   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000147   E8           MOV     A,R0
   \   000148   F0           MOVX    @DPTR,A
   \   000149   0E           INC     R6
   \   00014A   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00014D   EB           MOV     A,R3
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   0E           INC     R6
   \   000150   EE           MOV     A,R6
   \   000151   C3           CLR     C
   \   000152   9406         SUBB    A,#0x6
   \   000154   40E7         JC      ??zmain_ext_addr_4
   \   000156   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000159   7420         MOV     A,#0x20
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C   7401         MOV     A,#0x1
   \   00015E   2E           ADD     A,R6
   \   00015F   F8           MOV     R0,A
   \   000160   74..         MOV     A,#aExtendedAddress & 0xff
   \   000162   28           ADD     A,R0
   \   000163   F582         MOV     DPL,A
   \   000165   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   000167   3400         ADDC    A,#0x0
   \   000169   F583         MOV     DPH,A
   \   00016B   74F8         MOV     A,#-0x8
   \   00016D   F0           MOVX    @DPTR,A
   \   00016E   80B8         SJMP    ??zmain_ext_addr_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8E..         MOV     ?V0 + 0,R6
   \   000002   74..         MOV     A,#aExtendedAddress & 0xff
   \   000004   25..         ADD     A,?V0 + 0
   \   000006   F582         MOV     DPL,A
   \   000008   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
    314          
    315          /**************************************************************************************************
    316           * @fn          zmain_dev_info
    317           *
    318           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    319           *
    320           * input parameters
    321           *
    322           * None.
    323           *
    324           * output parameters
    325           *
    326           * None.
    327           *
    328           * @return      None.
    329           **************************************************************************************************
    330           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    331          static void zmain_dev_info(void)
   \                     zmain_dev_info:
    332          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    333          #ifdef LCD_SUPPORTED
    334            uint8 i;
    335            uint8 *xad;
    336            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    337          
    338            // Display the extended address.
    339            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
   \   00000A   78..         MOV     R0,#(aExtendedAddress + 7) & 0xff
   \   00000C   79..         MOV     R1,#((aExtendedAddress + 7) >> 8) & 0xff
    340          
    341            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
   \   00000E   7C00         MOV     R4,#0x0
    342            {
    343              uint8 ch;
    344              ch = (*xad >> 4) & 0x0F;
   \                     ??zmain_dev_info_0:
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   E0           MOVX    A,@DPTR
   \   000015   C4           SWAP    A
   \   000016   540F         ANL     A,#0xf
   \   000018   FD           MOV     R5,A
    345              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   000019   EC           MOV     A,R4
   \   00001A   FE           MOV     R6,A
   \   00001B   0C           INC     R4
   \   00001C   ED           MOV     A,R5
   \   00001D   C3           CLR     C
   \   00001E   940A         SUBB    A,#0xa
   \   000020   5004         JNC     ??zmain_dev_info_1
   \   000022   7A30         MOV     R2,#0x30
   \   000024   8002         SJMP    ??zmain_dev_info_2
   \                     ??zmain_dev_info_1:
   \   000026   7A37         MOV     R2,#0x37
   \                     ??zmain_dev_info_2:
   \   000028   EA           MOV     A,R2
   \   000029   2D           ADD     A,R5
   \   00002A   C0E0         PUSH    A
   \   00002C   8E..         MOV     ?V0 + 0,R6
   \   00002E   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000031   D0E0         POP     A
   \   000033   F0           MOVX    @DPTR,A
    346              ch = *xad & 0x0F;
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   540F         ANL     A,#0xf
   \   00003B   FD           MOV     R5,A
    347              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   00003C   EC           MOV     A,R4
   \   00003D   FF           MOV     R7,A
   \   00003E   0C           INC     R4
   \   00003F   ED           MOV     A,R5
   \   000040   C3           CLR     C
   \   000041   940A         SUBB    A,#0xa
   \   000043   5004         JNC     ??zmain_dev_info_3
   \   000045   7A30         MOV     R2,#0x30
   \   000047   8002         SJMP    ??zmain_dev_info_4
   \                     ??zmain_dev_info_3:
   \   000049   7A37         MOV     R2,#0x37
   \                     ??zmain_dev_info_4:
   \   00004B   EA           MOV     A,R2
   \   00004C   2D           ADD     A,R5
   \   00004D   C0E0         PUSH    A
   \   00004F   8F..         MOV     ?V0 + 0,R7
   \   000051   12....       LCALL   ?Subroutine1 & 0xFFFF
    348            }
   \                     ??CrossCallReturnLabel_4:
   \   000054   D0E0         POP     A
   \   000056   F0           MOVX    @DPTR,A
   \   000057   E8           MOV     A,R0
   \   000058   24FF         ADD     A,#-0x1
   \   00005A   18           DEC     R0
   \   00005B   E9           MOV     A,R1
   \   00005C   34FF         ADDC    A,#-0x1
   \   00005E   F9           MOV     R1,A
   \   00005F   EC           MOV     A,R4
   \   000060   C3           CLR     C
   \   000061   9410         SUBB    A,#0x10
   \   000063   40AB         JC      ??zmain_dev_info_0
    349            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
   \   000065   7410         MOV     A,#0x10
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E4           CLR     A
   \   00006B   F0           MOVX    @DPTR,A
    350            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
   \   00006C                ; Setup parameters for call to function HalLcdWriteString
   \   00006C   7901         MOV     R1,#0x1
   \   00006E   7A..         MOV     R2,#`?<Constant "IEEE: ">` & 0xff
   \   000070   7B..         MOV     R3,#(`?<Constant "IEEE: ">` >> 8) & 0xff
   \   000072   12....       LCALL   ??HalLcdWriteString?relay
    351            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
   \   000075                ; Setup parameters for call to function HalLcdWriteString
   \   000075   7902         MOV     R1,#0x2
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   AA82         MOV     R2,DPL
   \   00007F   AB83         MOV     R3,DPH
   \   000081   12....       LCALL   ??HalLcdWriteString?relay
    352          #endif
    353          }
   \   000084   7411         MOV     A,#0x11
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \   000089   7F02         MOV     R7,#0x2
   \   00008B   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 0
   \   00000A   F582         MOV     DPL,A
   \   00000C   E583         MOV     A,DPH
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET

   \                                 In  segment INTVEC, offset 0x2b, root
   \                     `??ST_ISR??INTVEC 43`:
   \   00002B   02....       LJMP       (ST_ISR)

   \                                 In  segment INTVEC, offset 0x7b, root
   \                     `??P1_ISR??INTVEC 123`:
   \   00007B   02....       LJMP       (P1_ISR)

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ini?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ini

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_vdd_check?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_vdd_check

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_ext_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_dev_info?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_dev_info

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IEEE: ">`:
   \   000000   49454545     DB "IEEE: "
   \            3A2000  
    354          
    355          #ifdef LCD_SUPPORTED
    356          /*********************************************************************
    357           * @fn      zmain_lcd_init
    358           * @brief   Initialize LCD at start up.
    359           * @return  none
    360           *********************************************************************/
    361          static void zmain_lcd_init ( void )
                             ^
Warning[Pe177]: function "zmain_lcd_init" was declared but never referenced
    362          {
    363          #ifdef SERIAL_DEBUG_SUPPORTED
    364            {
    365              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    366          
    367          #if defined( MT_MAC_FUNC )
    368          #if defined( ZDO_COORDINATOR )
    369                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    370          #else
    371                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    372          #endif // ZDO
    373          #elif defined( MT_NWK_FUNC )
    374          #if defined( ZDO_COORDINATOR )
    375                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    376          #else
    377                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    378          #endif // ZDO
    379          #endif // MT_FUNC
    380            }
    381          #endif // SERIAL_DEBUG_SUPPORTED
    382          }
    383          #endif
    384          
    385          /*********************************************************************
    386          *********************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     P1_ISR                     6      0      0
     ST_ISR                     0      0     14
       -> SysPowerMode          0      0     28
     ini                        2      0      0
       -> osal_int_disable      4      0      0
       -> zmain_vdd_check       4      0      0
       -> InitBoard             4      0      0
       -> HalDriverInit         4      0      0
       -> osal_nv_init          4      0      0
       -> ZMacInit              4      0      0
       -> zmain_ext_addr        4      0      0
       -> zgInit                4      0      0
       -> afInit                4      0      0
       -> osal_init_system      4      0      0
       -> osal_int_enable       4      0      0
       -> InitBoard             4      0      0
       -> zmain_dev_info        4      0      0
       -> delay_ms              4      0      0
       -> MPU6050_Init          4      0      0
       -> Usart0_Init           4      0      0
       -> RF_off                4      0      0
       -> SysPowerMode          4      0      0
     zmain_dev_info             1      0     27
       -> HalLcdWriteString     0      0     54
       -> HalLcdWriteString     0      0     54
     zmain_ext_addr             2      0     30
       -> osal_nv_item_init     0      0     56
       -> osal_nv_read          0      0     60
       -> osal_memcmp           0      0     58
       -> HalFlashRead          0      0     56
       -> osal_memcmp           0      0     58
       -> osal_memcmp           0      0     58
       -> osal_memcpy           0      0     58
       -> osal_nv_write         0      0     60
       -> ZMacSetReq            0      0     52
       -> osal_rand             0      0     52
     zmain_vdd_check            0      0      9
       -> HalAdcCheckVdd        0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     open_flag                                         1
     close_flag                                        1
     timesleep                                         1
     untimesleep                                       1
     timesleep_count                                   1
     timesleep_test                                    1
     count                                             2
     m_state                                           2
     P1IFG                                             1
     PICTL                                             1
     P1IEN                                             1
     _A_P1                                             1
     IEN2                                              1
     SLEEPSTA                                          1
     CLKCONSTA                                         1
     _A_P2                                             1
     _A_IEN0                                           1
     T1STAT                                            1
     _A_IEN1                                           1
     SLEEPCMD                                          1
     _A_IRCON                                          1
     CLKCONCMD                                         1
     T1CTL                                             1
     _A_IRCON2                                         1
     P1INP                                             1
     P0DIR                                             1
     P1DIR                                             1
     P2DIR                                             1
     ini                                             172
     ST_ISR                                           19
     P1_ISR                                           83
     zmain_vdd_check                                  89
     zmain_ext_addr                                  368
     ?Subroutine0                                     15
     zmain_dev_info                                  142
     ?Subroutine1                                     19
     ??ST_ISR??INTVEC 43                               3
     ??P1_ISR??INTVEC 123                              3
     ??ini?relay                                       6
     ??zmain_vdd_check?relay                           6
     ??zmain_ext_addr?relay                            6
     ??zmain_dev_info?relay                            6
     ?<Constant {255, 255, 255, 255, 255, 255, 255,    8
     ?<Constant "IEEE: ">                              7

 
 805 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
 102 bytes in segment NEAR_CODE
  20 bytes in segment SFR_AN
  15 bytes in segment XDATA_ROM_C
  10 bytes in segment XDATA_Z
 
 931 bytes of CODE  memory (+  6 bytes shared)
  15 bytes of CONST memory
   0 bytes of DATA  memory (+ 20 bytes shared)
  10 bytes of XDATA memory

Errors: none
Warnings: 4
