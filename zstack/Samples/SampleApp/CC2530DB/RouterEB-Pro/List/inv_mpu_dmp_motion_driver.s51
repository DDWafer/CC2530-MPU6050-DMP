///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        25/Dec/2018  16:52:15 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\Source\MPU6050_DMP\inv_mpu_dmp_motion_driver /
//                          .c                                                /
//    Command line       =  -f F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– /
//                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRoute /
//                          r.cfg (-DCPU32MHZ -DROOT=__near_func              /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f F:\key_pro\AAAAAgraduation_proje /
//                          ct\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wConfig.cfg (-DSECURE=0                   /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\key_pro\AAAAAgraduation /
//                          _project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projec /
//                          ts\zstack\Samples\SampleApp\Source\MPU6050_DMP\in /
//                          v_mpu_dmp_motion_driver.c -D ZIGBEEPRO -D         /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D             /
//                          STM32F10X_MD -D USE_STDPERIPH_DRIVER -lC          /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\RouterEB-Pro\List\ -lA              /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\RouterEB-Pro\List\ --diag_suppress  /
//                          Pe001,Pa010 -o F:\key_pro\AAAAAgraduation_project /
//                          \Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\    /
//                          -e --debug --core=plain --dptr=16,1               /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– /
//                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2530DB\ -I F:\key_pro\AAAAAgraduation_p /
//                          roject\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ -I  /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I         /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I    /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLU /
//                          DE\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ /
//                          ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HA /
//                          L\TARGET\CC2530EB\ -I F:\key_pro\AAAAAgraduation_ /
//                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\OSAL\MCU\CCSOC\ -I                   /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCL /
//                          UDE\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµ /
//                          Õ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sampl /
//                          es\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\S /
//                          TACK\AF\ -I F:\key_pro\AAAAAgraduation_project\Ωª /
//                          ª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN /
//                          TS\STACK\NWK\ -I F:\key_pro\AAAAAgraduation_proje /
//                          ct\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\SEC\ -I F:\key_pro\AAAAAgraduation_ /
//                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SAPI\ -I                       /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS /
//                          \ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥ /
//                          Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STAC /
//                          K\ZDO\ -I F:\key_pro\AAAAAgraduation_project\Ωªª• /
//                          œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS /
//                          \ZMAC\F8W\ -I F:\key_pro\AAAAAgraduation_project\ /
//                          Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\ZMAC\ -I F:\key_pro\AAAAAgraduation_project\ /
//                          Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\SERVICES\SADDR\ -I                           /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\ /
//                          SDATA\ -I F:\key_pro\AAAAAgraduation_project\Ωªª• /
//                          œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS /
//                          \MAC\INCLUDE\ -I F:\key_pro\AAAAAgraduation_proje /
//                          ct\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\MAC\HIGH_LEVEL\ -I                        /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_L /
//                          EVEL\srf04\ -I F:\key_pro\AAAAAgraduation_project /
//                          \Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I         /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\..\..\..\ -Ohz       /
//    List file          =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\RouterEB-Pro\List\inv_mpu_dmp_motio /
//                          n_driver.s51                                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME inv_mpu_dmp_motion_driver

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_ADD
        EXTERN ?L_ADD_X
        EXTERN ?L_IOR
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?L_NEG
        EXTERN ?L_SHL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SL_SHR
        EXTERN ?SS_SHR
        EXTERN ?S_SHL
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_GE_X
        EXTERN ?UL_SHR
        EXTERN ?UL_TO_FLT
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        PUBLIC ??dmp_enable_6x_lp_quat?relay
        FUNCTION ??dmp_enable_6x_lp_quat?relay,0203H
        PUBLIC ??dmp_enable_feature?relay
        FUNCTION ??dmp_enable_feature?relay,0203H
        PUBLIC ??dmp_enable_gyro_cal?relay
        FUNCTION ??dmp_enable_gyro_cal?relay,0203H
        PUBLIC ??dmp_enable_lp_quat?relay
        FUNCTION ??dmp_enable_lp_quat?relay,0203H
        PUBLIC ??dmp_get_enabled_features?relay
        FUNCTION ??dmp_get_enabled_features?relay,0203H
        PUBLIC ??dmp_get_fifo_rate?relay
        FUNCTION ??dmp_get_fifo_rate?relay,0203H
        PUBLIC ??dmp_get_pedometer_step_count?relay
        FUNCTION ??dmp_get_pedometer_step_count?relay,0203H
        PUBLIC ??dmp_get_pedometer_walk_time?relay
        FUNCTION ??dmp_get_pedometer_walk_time?relay,0203H
        PUBLIC ??dmp_load_motion_driver_firmware?relay
        FUNCTION ??dmp_load_motion_driver_firmware?relay,0203H
        PUBLIC ??dmp_read_fifo?relay
        FUNCTION ??dmp_read_fifo?relay,0203H
        PUBLIC ??dmp_register_android_orient_cb?relay
        FUNCTION ??dmp_register_android_orient_cb?relay,0203H
        PUBLIC ??dmp_register_tap_cb?relay
        FUNCTION ??dmp_register_tap_cb?relay,0203H
        PUBLIC ??dmp_set_accel_bias?relay
        FUNCTION ??dmp_set_accel_bias?relay,0203H
        PUBLIC ??dmp_set_fifo_rate?relay
        FUNCTION ??dmp_set_fifo_rate?relay,0203H
        PUBLIC ??dmp_set_gyro_bias?relay
        FUNCTION ??dmp_set_gyro_bias?relay,0203H
        PUBLIC ??dmp_set_interrupt_mode?relay
        FUNCTION ??dmp_set_interrupt_mode?relay,0203H
        PUBLIC ??dmp_set_orientation?relay
        FUNCTION ??dmp_set_orientation?relay,0203H
        PUBLIC ??dmp_set_pedometer_step_count?relay
        FUNCTION ??dmp_set_pedometer_step_count?relay,0203H
        PUBLIC ??dmp_set_pedometer_walk_time?relay
        FUNCTION ??dmp_set_pedometer_walk_time?relay,0203H
        PUBLIC ??dmp_set_shake_reject_thresh?relay
        FUNCTION ??dmp_set_shake_reject_thresh?relay,0203H
        PUBLIC ??dmp_set_shake_reject_time?relay
        FUNCTION ??dmp_set_shake_reject_time?relay,0203H
        PUBLIC ??dmp_set_shake_reject_timeout?relay
        FUNCTION ??dmp_set_shake_reject_timeout?relay,0203H
        PUBLIC ??dmp_set_tap_axes?relay
        FUNCTION ??dmp_set_tap_axes?relay,0203H
        PUBLIC ??dmp_set_tap_count?relay
        FUNCTION ??dmp_set_tap_count?relay,0203H
        PUBLIC ??dmp_set_tap_thresh?relay
        FUNCTION ??dmp_set_tap_thresh?relay,0203H
        PUBLIC ??dmp_set_tap_time?relay
        FUNCTION ??dmp_set_tap_time?relay,0203H
        PUBLIC ??dmp_set_tap_time_multi?relay
        FUNCTION ??dmp_set_tap_time_multi?relay,0203H
        PUBWEAK __Constant_14
        PUBWEAK __Constant_2000001
        PUBWEAK __Constant_2cae309
        PUBWEAK __Constant_43480000
        PUBWEAK __Constant_44c00000
        PUBWEAK __Constant_45000000
        PUBWEAK __Constant_45400000
        PUBWEAK __Constant_45800000
        PUBWEAK __Constant_45c00000
        PUBWEAK __Constant_46000000
        PUBWEAK __Constant_46400000
        PUBWEAK __Constant_46800000
        PUBWEAK __Constant_f1000000
        PUBLIC dmp_enable_6x_lp_quat
        FUNCTION dmp_enable_6x_lp_quat,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC dmp_enable_feature
        FUNCTION dmp_enable_feature,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC dmp_enable_gyro_cal
        FUNCTION dmp_enable_gyro_cal,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC dmp_enable_lp_quat
        FUNCTION dmp_enable_lp_quat,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC dmp_get_enabled_features
        FUNCTION dmp_get_enabled_features,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC dmp_get_fifo_rate
        FUNCTION dmp_get_fifo_rate,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC dmp_get_pedometer_step_count
        FUNCTION dmp_get_pedometer_step_count,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC dmp_get_pedometer_walk_time
        FUNCTION dmp_get_pedometer_walk_time,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC dmp_load_motion_driver_firmware
        FUNCTION dmp_load_motion_driver_firmware,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC dmp_read_fifo
        FUNCTION dmp_read_fifo,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME XSTACK, 83, STACK
        PUBLIC dmp_register_android_orient_cb
        FUNCTION dmp_register_android_orient_cb,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC dmp_register_tap_cb
        FUNCTION dmp_register_tap_cb,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC dmp_set_accel_bias
        FUNCTION dmp_set_accel_bias,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 48, STACK
        PUBLIC dmp_set_fifo_rate
        FUNCTION dmp_set_fifo_rate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC dmp_set_gyro_bias
        FUNCTION dmp_set_gyro_bias,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC dmp_set_interrupt_mode
        FUNCTION dmp_set_interrupt_mode,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC dmp_set_orientation
        FUNCTION dmp_set_orientation,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC dmp_set_pedometer_step_count
        FUNCTION dmp_set_pedometer_step_count,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC dmp_set_pedometer_walk_time
        FUNCTION dmp_set_pedometer_walk_time,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC dmp_set_shake_reject_thresh
        FUNCTION dmp_set_shake_reject_thresh,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC dmp_set_shake_reject_time
        FUNCTION dmp_set_shake_reject_time,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC dmp_set_shake_reject_timeout
        FUNCTION dmp_set_shake_reject_timeout,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC dmp_set_tap_axes
        FUNCTION dmp_set_tap_axes,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC dmp_set_tap_count
        FUNCTION dmp_set_tap_count,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC dmp_set_tap_thresh
        FUNCTION dmp_set_tap_thresh,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC dmp_set_tap_time
        FUNCTION dmp_set_tap_time,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC dmp_set_tap_time_multi
        FUNCTION dmp_set_tap_time_multi,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
mpu_load_firmware   SYMBOL "mpu_load_firmware"
mpu_write_mem       SYMBOL "mpu_write_mem"
memcpy              SYMBOL "memcpy"
printf              SYMBOL "printf"
mpu_get_accel_sens  SYMBOL "mpu_get_accel_sens"
mpu_get_accel_fsr   SYMBOL "mpu_get_accel_fsr"
mpu_read_mem        SYMBOL "mpu_read_mem"
mpu_reset_fifo      SYMBOL "mpu_reset_fifo"
memset              SYMBOL "memset"
mpu_read_fifo_stream SYMBOL "mpu_read_fifo_stream"
??memcpy?relay      SYMBOL "?relay", memcpy
??memset?relay      SYMBOL "?relay", memset
??mpu_get_accel_fsr?relay SYMBOL "?relay", mpu_get_accel_fsr
??mpu_get_accel_sens?relay SYMBOL "?relay", mpu_get_accel_sens
??mpu_load_firmware?relay SYMBOL "?relay", mpu_load_firmware
??mpu_read_fifo_stream?relay SYMBOL "?relay", mpu_read_fifo_stream
??mpu_read_mem?relay SYMBOL "?relay", mpu_read_mem
??mpu_reset_fifo?relay SYMBOL "?relay", mpu_reset_fifo
??mpu_write_mem?relay SYMBOL "?relay", mpu_write_mem
??printf?relay      SYMBOL "?relay", printf
dmp_enable_6x_lp_quat SYMBOL "dmp_enable_6x_lp_quat"
??dmp_enable_6x_lp_quat?relay SYMBOL "?relay", dmp_enable_6x_lp_quat
dmp_enable_feature  SYMBOL "dmp_enable_feature"
??dmp_enable_feature?relay SYMBOL "?relay", dmp_enable_feature
dmp_enable_gyro_cal SYMBOL "dmp_enable_gyro_cal"
??dmp_enable_gyro_cal?relay SYMBOL "?relay", dmp_enable_gyro_cal
dmp_enable_lp_quat  SYMBOL "dmp_enable_lp_quat"
??dmp_enable_lp_quat?relay SYMBOL "?relay", dmp_enable_lp_quat
dmp_get_enabled_features SYMBOL "dmp_get_enabled_features"
??dmp_get_enabled_features?relay SYMBOL "?relay", dmp_get_enabled_features
dmp_get_fifo_rate   SYMBOL "dmp_get_fifo_rate"
??dmp_get_fifo_rate?relay SYMBOL "?relay", dmp_get_fifo_rate
dmp_get_pedometer_step_count SYMBOL "dmp_get_pedometer_step_count"
??dmp_get_pedometer_step_count?relay SYMBOL "?relay", dmp_get_pedometer_step_count
dmp_get_pedometer_walk_time SYMBOL "dmp_get_pedometer_walk_time"
??dmp_get_pedometer_walk_time?relay SYMBOL "?relay", dmp_get_pedometer_walk_time
dmp_load_motion_driver_firmware SYMBOL "dmp_load_motion_driver_firmware"
??dmp_load_motion_driver_firmware?relay SYMBOL "?relay", dmp_load_motion_driver_firmware
dmp_read_fifo       SYMBOL "dmp_read_fifo"
??dmp_read_fifo?relay SYMBOL "?relay", dmp_read_fifo
dmp_register_android_orient_cb SYMBOL "dmp_register_android_orient_cb"
??dmp_register_android_orient_cb?relay SYMBOL "?relay", dmp_register_android_orient_cb
dmp_register_tap_cb SYMBOL "dmp_register_tap_cb"
??dmp_register_tap_cb?relay SYMBOL "?relay", dmp_register_tap_cb
dmp_set_accel_bias  SYMBOL "dmp_set_accel_bias"
??dmp_set_accel_bias?relay SYMBOL "?relay", dmp_set_accel_bias
dmp_set_fifo_rate   SYMBOL "dmp_set_fifo_rate"
??dmp_set_fifo_rate?relay SYMBOL "?relay", dmp_set_fifo_rate
dmp_set_gyro_bias   SYMBOL "dmp_set_gyro_bias"
??dmp_set_gyro_bias?relay SYMBOL "?relay", dmp_set_gyro_bias
dmp_set_interrupt_mode SYMBOL "dmp_set_interrupt_mode"
??dmp_set_interrupt_mode?relay SYMBOL "?relay", dmp_set_interrupt_mode
dmp_set_orientation SYMBOL "dmp_set_orientation"
??dmp_set_orientation?relay SYMBOL "?relay", dmp_set_orientation
dmp_set_pedometer_step_count SYMBOL "dmp_set_pedometer_step_count"
??dmp_set_pedometer_step_count?relay SYMBOL "?relay", dmp_set_pedometer_step_count
dmp_set_pedometer_walk_time SYMBOL "dmp_set_pedometer_walk_time"
??dmp_set_pedometer_walk_time?relay SYMBOL "?relay", dmp_set_pedometer_walk_time
dmp_set_shake_reject_thresh SYMBOL "dmp_set_shake_reject_thresh"
??dmp_set_shake_reject_thresh?relay SYMBOL "?relay", dmp_set_shake_reject_thresh
dmp_set_shake_reject_time SYMBOL "dmp_set_shake_reject_time"
??dmp_set_shake_reject_time?relay SYMBOL "?relay", dmp_set_shake_reject_time
dmp_set_shake_reject_timeout SYMBOL "dmp_set_shake_reject_timeout"
??dmp_set_shake_reject_timeout?relay SYMBOL "?relay", dmp_set_shake_reject_timeout
dmp_set_tap_axes    SYMBOL "dmp_set_tap_axes"
??dmp_set_tap_axes?relay SYMBOL "?relay", dmp_set_tap_axes
dmp_set_tap_count   SYMBOL "dmp_set_tap_count"
??dmp_set_tap_count?relay SYMBOL "?relay", dmp_set_tap_count
dmp_set_tap_thresh  SYMBOL "dmp_set_tap_thresh"
??dmp_set_tap_thresh?relay SYMBOL "?relay", dmp_set_tap_thresh
dmp_set_tap_time    SYMBOL "dmp_set_tap_time"
??dmp_set_tap_time?relay SYMBOL "?relay", dmp_set_tap_time
dmp_set_tap_time_multi SYMBOL "dmp_set_tap_time_multi"
??dmp_set_tap_time_multi?relay SYMBOL "?relay", dmp_set_tap_time_multi

        EXTERN mpu_load_firmware
        FUNCTION mpu_load_firmware,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_write_mem
        FUNCTION mpu_write_mem,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_get_accel_sens
        FUNCTION mpu_get_accel_sens,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_get_accel_fsr
        FUNCTION mpu_get_accel_fsr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_read_mem
        FUNCTION mpu_read_mem,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_reset_fifo
        FUNCTION mpu_reset_fifo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_read_fifo_stream
        FUNCTION mpu_read_fifo_stream,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??mpu_get_accel_fsr?relay
        FUNCTION ??mpu_get_accel_fsr?relay,00H
        EXTERN ??mpu_get_accel_sens?relay
        FUNCTION ??mpu_get_accel_sens?relay,00H
        EXTERN ??mpu_load_firmware?relay
        FUNCTION ??mpu_load_firmware?relay,00H
        EXTERN ??mpu_read_fifo_stream?relay
        FUNCTION ??mpu_read_fifo_stream?relay,00H
        EXTERN ??mpu_read_mem?relay
        FUNCTION ??mpu_read_mem?relay,00H
        EXTERN ??mpu_reset_fifo?relay
        FUNCTION ??mpu_reset_fifo?relay,00H
        EXTERN ??mpu_write_mem?relay
        FUNCTION ??mpu_write_mem?relay,00H
        EXTERN ??printf?relay
        FUNCTION ??printf?relay,00H

// F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleApp\Source\MPU6050_DMP\inv_mpu_dmp_motion_driver.c
//    1 /*
//    2  $License:
//    3     Copyright (C) 2011-2012 InvenSense Corporation, All Rights Reserved.
//    4     See included License.txt for License information.
//    5  $
//    6  */
//    7 /**
//    8  *  @addtogroup  DRIVERS Sensor Driver Layer
//    9  *  @brief       Hardware drivers to communicate with sensors via I2C.
//   10  *
//   11  *  @{
//   12  *      @file       inv_mpu_dmp_motion_driver.c
//   13  *      @brief      DMP image and interface functions.
//   14  *      @details    All functions are preceded by the dmp_ prefix to
//   15  *                  differentiate among MPL and general driver function calls.
//   16  */
//   17 #include <stdio.h>
//   18 #include <stdint.h>
//   19 #include <stdlib.h>
//   20 #include <string.h>
//   21 #include <math.h>
//   22 
//   23 #include "inv_mpu.h"
//   24 #include "inv_mpu_dmp_motion_driver.h"
//   25 #include "dmpKey.h"
//   26 #include "dmpmap.h"
//   27 #include "delay.h"
//   28 
//   29 //”≥…‰’‚¡Ω∏ˆ∫Ø ˝
//   30 //#define delay_ms    delay_ms
//   31 //#define get_ms      get_ms
//   32 
//   33 #define  MOTION_DRIVER_TARGET_MSP430
//   34 /* The following functions must be defined for this platform:
//   35  * i2c_write(unsigned char slave_addr, unsigned char reg_addr,
//   36  *      unsigned char length, unsigned char const *data)
//   37  * i2c_read(unsigned char slave_addr, unsigned char reg_addr,
//   38  *      unsigned char length, unsigned char *data)
//   39  * delay_ms(unsigned long num_ms)
//   40  * get_ms(unsigned long *count)
//   41  */
//   42 #if defined MOTION_DRIVER_TARGET_MSP430
//   43 //#include "msp430.h"
//   44 //#include "msp430_clock.h"
//   45 #define delay_ms    delay_ms
//   46 #define get_ms      get_ms
//   47 #define log_i(...)     do {} while (0)
//   48 #define log_e(...)     do {} while (0)
//   49 
//   50 #elif defined EMPL_TARGET_MSP430
//   51 #include "msp430.h"
//   52 #include "msp430_clock.h"
//   53 #include "log.h"
//   54 #define delay_ms    msp430_delay_ms
//   55 #define get_ms      msp430_get_clock_ms
//   56 #define log_i       MPL_LOGI
//   57 #define log_e       MPL_LOGE
//   58 
//   59 #elif defined EMPL_TARGET_UC3L0
//   60 /* Instead of using the standard TWI driver from the ASF library, we're using
//   61  * a TWI driver that follows the slave address + register address convention.
//   62  */
//   63 #include "delay.h"
//   64 #include "sysclk.h"
//   65 #include "log.h"
//   66 #include "uc3l0_clock.h"
//   67 /* delay_ms is a function already defined in ASF. */
//   68 #define get_ms  uc3l0_get_clock_ms
//   69 #define log_i       MPL_LOGI
//   70 #define log_e       MPL_LOGE
//   71 
//   72 #else
//   73 //#error  Gyro driver is missing the system layer implementations.
//   74 #endif
//   75 
//   76 /* These defines are copied from dmpDefaultMPU6050.c in the general MPL
//   77  * releases. These defines may change for each DMP image, so be sure to modify
//   78  * these values when switching to a new image.
//   79  */
//   80 #define CFG_LP_QUAT             (2712)
//   81 #define END_ORIENT_TEMP         (1866)
//   82 #define CFG_27                  (2742)
//   83 #define CFG_20                  (2224)
//   84 #define CFG_23                  (2745)
//   85 #define CFG_FIFO_ON_EVENT       (2690)
//   86 #define END_PREDICTION_UPDATE   (1761)
//   87 #define CGNOTICE_INTR           (2620)
//   88 #define X_GRT_Y_TMP             (1358)
//   89 #define CFG_DR_INT              (1029)
//   90 #define CFG_AUTH                (1035)
//   91 #define UPDATE_PROP_ROT         (1835)
//   92 #define END_COMPARE_Y_X_TMP2    (1455)
//   93 #define SKIP_X_GRT_Y_TMP        (1359)
//   94 #define SKIP_END_COMPARE        (1435)
//   95 #define FCFG_3                  (1088)
//   96 #define FCFG_2                  (1066)
//   97 #define FCFG_1                  (1062)
//   98 #define END_COMPARE_Y_X_TMP3    (1434)
//   99 #define FCFG_7                  (1073)
//  100 #define FCFG_6                  (1106)
//  101 #define FLAT_STATE_END          (1713)
//  102 #define SWING_END_4             (1616)
//  103 #define SWING_END_2             (1565)
//  104 #define SWING_END_3             (1587)
//  105 #define SWING_END_1             (1550)
//  106 #define CFG_8                   (2718)
//  107 #define CFG_15                  (2727)
//  108 #define CFG_16                  (2746)
//  109 #define CFG_EXT_GYRO_BIAS       (1189)
//  110 #define END_COMPARE_Y_X_TMP     (1407)
//  111 #define DO_NOT_UPDATE_PROP_ROT  (1839)
//  112 #define CFG_7                   (1205)
//  113 #define FLAT_STATE_END_TEMP     (1683)
//  114 #define END_COMPARE_Y_X         (1484)
//  115 #define SKIP_SWING_END_1        (1551)
//  116 #define SKIP_SWING_END_3        (1588)
//  117 #define SKIP_SWING_END_2        (1566)
//  118 #define TILTG75_START           (1672)
//  119 #define CFG_6                   (2753)
//  120 #define TILTL75_END             (1669)
//  121 #define END_ORIENT              (1884)
//  122 #define CFG_FLICK_IN            (2573)
//  123 #define TILTL75_START           (1643)
//  124 #define CFG_MOTION_BIAS         (1208)
//  125 #define X_GRT_Y                 (1408)
//  126 #define TEMPLABEL               (2324)
//  127 #define CFG_ANDROID_ORIENT_INT  (1853)
//  128 #define CFG_GYRO_RAW_DATA       (2722)
//  129 #define X_GRT_Y_TMP2            (1379)
//  130 
//  131 #define D_0_22                  (22+512)
//  132 #define D_0_24                  (24+512)
//  133 
//  134 #define D_0_36                  (36)
//  135 #define D_0_52                  (52)
//  136 #define D_0_96                  (96)
//  137 #define D_0_104                 (104)
//  138 #define D_0_108                 (108)
//  139 #define D_0_163                 (163)
//  140 #define D_0_188                 (188)
//  141 #define D_0_192                 (192)
//  142 #define D_0_224                 (224)
//  143 #define D_0_228                 (228)
//  144 #define D_0_232                 (232)
//  145 #define D_0_236                 (236)
//  146 
//  147 #define D_1_2                   (256 + 2)
//  148 #define D_1_4                   (256 + 4)
//  149 #define D_1_8                   (256 + 8)
//  150 #define D_1_10                  (256 + 10)
//  151 #define D_1_24                  (256 + 24)
//  152 #define D_1_28                  (256 + 28)
//  153 #define D_1_36                  (256 + 36)
//  154 #define D_1_40                  (256 + 40)
//  155 #define D_1_44                  (256 + 44)
//  156 #define D_1_72                  (256 + 72)
//  157 #define D_1_74                  (256 + 74)
//  158 #define D_1_79                  (256 + 79)
//  159 #define D_1_88                  (256 + 88)
//  160 #define D_1_90                  (256 + 90)
//  161 #define D_1_92                  (256 + 92)
//  162 #define D_1_96                  (256 + 96)
//  163 #define D_1_98                  (256 + 98)
//  164 #define D_1_106                 (256 + 106)
//  165 #define D_1_108                 (256 + 108)
//  166 #define D_1_112                 (256 + 112)
//  167 #define D_1_128                 (256 + 144)
//  168 #define D_1_152                 (256 + 12)
//  169 #define D_1_160                 (256 + 160)
//  170 #define D_1_176                 (256 + 176)
//  171 #define D_1_178                 (256 + 178)
//  172 #define D_1_218                 (256 + 218)
//  173 #define D_1_232                 (256 + 232)
//  174 #define D_1_236                 (256 + 236)
//  175 #define D_1_240                 (256 + 240)
//  176 #define D_1_244                 (256 + 244)
//  177 #define D_1_250                 (256 + 250)
//  178 #define D_1_252                 (256 + 252)
//  179 #define D_2_12                  (512 + 12)
//  180 #define D_2_96                  (512 + 96)
//  181 #define D_2_108                 (512 + 108)
//  182 #define D_2_208                 (512 + 208)
//  183 #define D_2_224                 (512 + 224)
//  184 #define D_2_236                 (512 + 236)
//  185 #define D_2_244                 (512 + 244)
//  186 #define D_2_248                 (512 + 248)
//  187 #define D_2_252                 (512 + 252)
//  188 
//  189 #define CPASS_BIAS_X            (35 * 16 + 4)
//  190 #define CPASS_BIAS_Y            (35 * 16 + 8)
//  191 #define CPASS_BIAS_Z            (35 * 16 + 12)
//  192 #define CPASS_MTX_00            (36 * 16)
//  193 #define CPASS_MTX_01            (36 * 16 + 4)
//  194 #define CPASS_MTX_02            (36 * 16 + 8)
//  195 #define CPASS_MTX_10            (36 * 16 + 12)
//  196 #define CPASS_MTX_11            (37 * 16)
//  197 #define CPASS_MTX_12            (37 * 16 + 4)
//  198 #define CPASS_MTX_20            (37 * 16 + 8)
//  199 #define CPASS_MTX_21            (37 * 16 + 12)
//  200 #define CPASS_MTX_22            (43 * 16 + 12)
//  201 #define D_EXT_GYRO_BIAS_X       (61 * 16)
//  202 #define D_EXT_GYRO_BIAS_Y       (61 * 16) + 4
//  203 #define D_EXT_GYRO_BIAS_Z       (61 * 16) + 8
//  204 #define D_ACT0                  (40 * 16)
//  205 #define D_ACSX                  (40 * 16 + 4)
//  206 #define D_ACSY                  (40 * 16 + 8)
//  207 #define D_ACSZ                  (40 * 16 + 12)
//  208 
//  209 #define FLICK_MSG               (45 * 16 + 4)
//  210 #define FLICK_COUNTER           (45 * 16 + 8)
//  211 #define FLICK_LOWER             (45 * 16 + 12)
//  212 #define FLICK_UPPER             (46 * 16 + 12)
//  213 
//  214 #define D_AUTH_OUT              (992)
//  215 #define D_AUTH_IN               (996)
//  216 #define D_AUTH_A                (1000)
//  217 #define D_AUTH_B                (1004)
//  218 
//  219 #define D_PEDSTD_BP_B           (768 + 0x1C)
//  220 #define D_PEDSTD_HP_A           (768 + 0x78)
//  221 #define D_PEDSTD_HP_B           (768 + 0x7C)
//  222 #define D_PEDSTD_BP_A4          (768 + 0x40)
//  223 #define D_PEDSTD_BP_A3          (768 + 0x44)
//  224 #define D_PEDSTD_BP_A2          (768 + 0x48)
//  225 #define D_PEDSTD_BP_A1          (768 + 0x4C)
//  226 #define D_PEDSTD_INT_THRSH      (768 + 0x68)
//  227 #define D_PEDSTD_CLIP           (768 + 0x6C)
//  228 #define D_PEDSTD_SB             (768 + 0x28)
//  229 #define D_PEDSTD_SB_TIME        (768 + 0x2C)
//  230 #define D_PEDSTD_PEAKTHRSH      (768 + 0x98)
//  231 #define D_PEDSTD_TIML           (768 + 0x2A)
//  232 #define D_PEDSTD_TIMH           (768 + 0x2E)
//  233 #define D_PEDSTD_PEAK           (768 + 0X94)
//  234 #define D_PEDSTD_STEPCTR        (768 + 0x60)
//  235 #define D_PEDSTD_TIMECTR        (964)
//  236 #define D_PEDSTD_DECI           (768 + 0xA0)
//  237 
//  238 #define D_HOST_NO_MOT           (976)
//  239 #define D_ACCEL_BIAS            (660)
//  240 
//  241 #define D_ORIENT_GAP            (76)
//  242 
//  243 #define D_TILT0_H               (48)
//  244 #define D_TILT0_L               (50)
//  245 #define D_TILT1_H               (52)
//  246 #define D_TILT1_L               (54)
//  247 #define D_TILT2_H               (56)
//  248 #define D_TILT2_L               (58)
//  249 #define D_TILT3_H               (60)
//  250 #define D_TILT3_L               (62)
//  251 
//  252 #define DMP_CODE_SIZE           (3062)
//  253 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  254 static const unsigned char dmp_memory[DMP_CODE_SIZE] = {
dmp_memory:
        DB 0
        DB 0
        DB 112
        DB 0
        DB 0
        DB 0
        DB 0
        DB 36
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 101
        DB 0
        DB 84
        DB 255
        DB 239
        DB 0
        DB 0
        DB 250
        DB 128
        DB 0
        DB 11
        DB 18
        DB 130
        DB 0
        DB 1
        DB 3
        DB 12
        DB 48
        DB 195
        DB 14
        DB 140
        DB 140
        DB 233
        DB 20
        DB 213
        DB 64
        DB 2
        DB 19
        DB 113
        DB 15
        DB 142
        DB 56
        DB 131
        DB 248
        DB 131
        DB 48
        DB 0
        DB 248
        DB 131
        DB 37
        DB 142
        DB 248
        DB 131
        DB 48
        DB 0
        DB 248
        DB 131
        DB 255
        DB 255
        DB 255
        DB 255
        DB 15
        DB 254
        DB 169
        DB 214
        DB 36
        DB 0
        DB 4
        DB 0
        DB 26
        DB 130
        DB 121
        DB 161
        DB 0
        DB 0
        DB 0
        DB 60
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 16
        DB 0
        DB 0
        DB 56
        DB 131
        DB 111
        DB 162
        DB 0
        DB 62
        DB 3
        DB 48
        DB 64
        DB 0
        DB 0
        DB 0
        DB 2
        DB 202
        DB 227
        DB 9
        DB 62
        DB 128
        DB 0
        DB 0
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 0
        DB 0
        DB 0
        DB 96
        DB 0
        DB 0
        DB 0
        DB 0
        DB 12
        DB 0
        DB 0
        DB 0
        DB 12
        DB 24
        DB 110
        DB 0
        DB 0
        DB 6
        DB 146
        DB 10
        DB 22
        DB 192
        DB 223
        DB 255
        DB 255
        DB 2
        DB 86
        DB 253
        DB 140
        DB 211
        DB 119
        DB 255
        DB 225
        DB 196
        DB 150
        DB 224
        DB 197
        DB 190
        DB 170
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 255
        DB 11
        DB 43
        DB 0
        DB 0
        DB 22
        DB 87
        DB 0
        DB 0
        DB 3
        DB 89
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 29
        DB 250
        DB 0
        DB 2
        DB 108
        DB 29
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 255
        DB 223
        DB 235
        DB 0
        DB 62
        DB 179
        DB 182
        DB 0
        DB 13
        DB 34
        DB 120
        DB 0
        DB 0
        DB 47
        DB 60
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 25
        DB 66
        DB 181
        DB 0
        DB 0
        DB 57
        DB 162
        DB 0
        DB 0
        DB 179
        DB 101
        DB 217
        DB 14
        DB 159
        DB 201
        DB 29
        DB 207
        DB 76
        DB 52
        DB 48
        DB 0
        DB 0
        DB 0
        DB 80
        DB 0
        DB 0
        DB 0
        DB 59
        DB 182
        DB 122
        DB 232
        DB 0
        DB 100
        DB 0
        DB 0
        DB 0
        DB 200
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 16
        DB 0
        DB 0
        DB 0
        DB 16
        DB 0
        DB 250
        DB 146
        DB 16
        DB 0
        DB 34
        DB 94
        DB 0
        DB 13
        DB 34
        DB 159
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 50
        DB 0
        DB 0
        DB 255
        DB 70
        DB 0
        DB 0
        DB 99
        DB 212
        DB 0
        DB 0
        DB 16
        DB 0
        DB 0
        DB 0
        DB 4
        DB 214
        DB 0
        DB 0
        DB 4
        DB 204
        DB 0
        DB 0
        DB 4
        DB 204
        DB 0
        DB 0
        DB 0
        DB 0
        DB 16
        DB 114
        DB 0
        DB 0
        DB 0
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 6
        DB 0
        DB 2
        DB 0
        DB 5
        DB 0
        DB 7
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 100
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 5
        DB 0
        DB 5
        DB 0
        DB 100
        DB 0
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 0
        DB 50
        DB 248
        DB 152
        DB 0
        DB 0
        DB 255
        DB 101
        DB 0
        DB 0
        DB 131
        DB 15
        DB 0
        DB 0
        DB 255
        DB 155
        DB 252
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 16
        DB 0
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 6
        DB 0
        DB 0
        DB 178
        DB 106
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 251
        DB 131
        DB 0
        DB 104
        DB 0
        DB 0
        DB 0
        DB 217
        DB 252
        DB 0
        DB 124
        DB 241
        DB 255
        DB 131
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 101
        DB 0
        DB 0
        DB 0
        DB 100
        DB 3
        DB 232
        DB 0
        DB 100
        DB 0
        DB 40
        DB 0
        DB 0
        DB 0
        DB 37
        DB 0
        DB 0
        DB 0
        DB 0
        DB 22
        DB 160
        DB 0
        DB 0
        DB 0
        DB 0
        DB 16
        DB 0
        DB 0
        DB 0
        DB 16
        DB 0
        DB 0
        DB 47
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 244
        DB 0
        DB 0
        DB 16
        DB 0
        DB 0
        DB 40
        DB 0
        DB 0
        DB 255
        DB 255
        DB 69
        DB 129
        DB 255
        DB 255
        DB 250
        DB 114
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 68
        DB 0
        DB 5
        DB 0
        DB 5
        DB 186
        DB 198
        DB 0
        DB 71
        DB 120
        DB 162
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 6
        DB 0
        DB 0
        DB 0
        DB 0
        DB 20
        DB 0
        DB 0
        DB 37
        DB 77
        DB 0
        DB 47
        DB 112
        DB 109
        DB 0
        DB 0
        DB 5
        DB 174
        DB 0
        DB 12
        DB 2
        DB 208
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 27
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 100
        DB 0
        DB 0
        DB 0
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 27
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 14
        DB 0
        DB 14
        DB 0
        DB 0
        DB 10
        DB 199
        DB 0
        DB 4
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 50
        DB 255
        DB 255
        DB 255
        DB 156
        DB 0
        DB 0
        DB 11
        DB 43
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 100
        DB 255
        DB 229
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 128
        DB 0
        DB 0
        DB 1
        DB 128
        DB 0
        DB 0
        DB 1
        DB 128
        DB 0
        DB 0
        DB 36
        DB 38
        DB 211
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 6
        DB 0
        DB 16
        DB 0
        DB 150
        DB 0
        DB 60
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 12
        DB 10
        DB 78
        DB 104
        DB 205
        DB 207
        DB 119
        DB 9
        DB 80
        DB 22
        DB 103
        DB 89
        DB 198
        DB 25
        DB 206
        DB 130
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 23
        DB 215
        DB 132
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 199
        DB 147
        DB 143
        DB 157
        DB 30
        DB 27
        DB 28
        DB 25
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 2
        DB 3
        DB 24
        DB 133
        DB 0
        DB 0
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 103
        DB 125
        DB 223
        DB 126
        DB 114
        DB 144
        DB 46
        DB 85
        DB 76
        DB 246
        DB 230
        DB 136
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 216
        DB 220
        DB 180
        DB 184
        DB 176
        DB 216
        DB 185
        DB 171
        DB 243
        DB 248
        DB 250
        DB 179
        DB 183
        DB 187
        DB 142
        DB 158
        DB 174
        DB 241
        DB 50
        DB 245
        DB 27
        DB 241
        DB 180
        DB 184
        DB 176
        DB 128
        DB 151
        DB 241
        DB 169
        DB 223
        DB 223
        DB 223
        DB 170
        DB 223
        DB 223
        DB 223
        DB 242
        DB 170
        DB 197
        DB 205
        DB 199
        DB 169
        DB 12
        DB 201
        DB 44
        DB 151
        DB 241
        DB 169
        DB 137
        DB 38
        DB 70
        DB 102
        DB 178
        DB 137
        DB 153
        DB 169
        DB 45
        DB 85
        DB 125
        DB 176
        DB 176
        DB 138
        DB 168
        DB 150
        DB 54
        DB 86
        DB 118
        DB 241
        DB 186
        DB 163
        DB 180
        DB 178
        DB 128
        DB 192
        DB 184
        DB 168
        DB 151
        DB 17
        DB 178
        DB 131
        DB 152
        DB 186
        DB 163
        DB 240
        DB 36
        DB 8
        DB 68
        DB 16
        DB 100
        DB 24
        DB 178
        DB 185
        DB 180
        DB 152
        DB 131
        DB 241
        DB 163
        DB 41
        DB 85
        DB 125
        DB 186
        DB 181
        DB 177
        DB 163
        DB 131
        DB 147
        DB 240
        DB 0
        DB 40
        DB 80
        DB 245
        DB 178
        DB 182
        DB 170
        DB 131
        DB 147
        DB 40
        DB 84
        DB 124
        DB 241
        DB 185
        DB 163
        DB 130
        DB 147
        DB 97
        DB 186
        DB 162
        DB 218
        DB 222
        DB 223
        DB 219
        DB 129
        DB 154
        DB 185
        DB 174
        DB 245
        DB 96
        DB 104
        DB 112
        DB 241
        DB 218
        DB 186
        DB 162
        DB 223
        DB 217
        DB 186
        DB 162
        DB 250
        DB 185
        DB 163
        DB 130
        DB 146
        DB 219
        DB 49
        DB 186
        DB 162
        DB 217
        DB 186
        DB 162
        DB 248
        DB 223
        DB 133
        DB 164
        DB 208
        DB 193
        DB 187
        DB 173
        DB 131
        DB 194
        DB 197
        DB 199
        DB 184
        DB 162
        DB 223
        DB 223
        DB 223
        DB 186
        DB 160
        DB 223
        DB 223
        DB 223
        DB 216
        DB 216
        DB 241
        DB 184
        DB 170
        DB 179
        DB 141
        DB 180
        DB 152
        DB 13
        DB 53
        DB 93
        DB 178
        DB 182
        DB 186
        DB 175
        DB 140
        DB 150
        DB 25
        DB 143
        DB 159
        DB 167
        DB 14
        DB 22
        DB 30
        DB 180
        DB 154
        DB 184
        DB 170
        DB 135
        DB 44
        DB 84
        DB 124
        DB 186
        DB 164
        DB 176
        DB 138
        DB 182
        DB 145
        DB 50
        DB 86
        DB 118
        DB 178
        DB 132
        DB 148
        DB 164
        DB 200
        DB 8
        DB 205
        DB 216
        DB 184
        DB 180
        DB 176
        DB 241
        DB 153
        DB 130
        DB 168
        DB 45
        DB 85
        DB 125
        DB 152
        DB 168
        DB 14
        DB 22
        DB 30
        DB 162
        DB 44
        DB 84
        DB 124
        DB 146
        DB 164
        DB 240
        DB 44
        DB 80
        DB 120
        DB 241
        DB 132
        DB 168
        DB 152
        DB 196
        DB 205
        DB 252
        DB 216
        DB 13
        DB 219
        DB 168
        DB 252
        DB 45
        DB 243
        DB 217
        DB 186
        DB 166
        DB 248
        DB 218
        DB 186
        DB 166
        DB 222
        DB 216
        DB 186
        DB 178
        DB 182
        DB 134
        DB 150
        DB 166
        DB 208
        DB 243
        DB 200
        DB 65
        DB 218
        DB 166
        DB 200
        DB 248
        DB 216
        DB 176
        DB 180
        DB 184
        DB 130
        DB 168
        DB 146
        DB 245
        DB 44
        DB 84
        DB 136
        DB 152
        DB 241
        DB 53
        DB 217
        DB 244
        DB 24
        DB 216
        DB 241
        DB 162
        DB 208
        DB 248
        DB 249
        DB 168
        DB 132
        DB 217
        DB 199
        DB 223
        DB 248
        DB 248
        DB 131
        DB 197
        DB 218
        DB 223
        DB 105
        DB 223
        DB 131
        DB 193
        DB 216
        DB 244
        DB 1
        DB 20
        DB 241
        DB 168
        DB 130
        DB 78
        DB 168
        DB 132
        DB 243
        DB 17
        DB 209
        DB 130
        DB 245
        DB 217
        DB 146
        DB 40
        DB 151
        DB 136
        DB 241
        DB 9
        DB 244
        DB 28
        DB 28
        DB 216
        DB 132
        DB 168
        DB 243
        DB 192
        DB 249
        DB 209
        DB 217
        DB 151
        DB 130
        DB 241
        DB 41
        DB 244
        DB 13
        DB 216
        DB 243
        DB 249
        DB 249
        DB 209
        DB 217
        DB 130
        DB 244
        DB 194
        DB 3
        DB 216
        DB 222
        DB 223
        DB 26
        DB 216
        DB 241
        DB 162
        DB 250
        DB 249
        DB 168
        DB 132
        DB 152
        DB 217
        DB 199
        DB 223
        DB 248
        DB 248
        DB 248
        DB 131
        DB 199
        DB 218
        DB 223
        DB 105
        DB 223
        DB 248
        DB 131
        DB 195
        DB 216
        DB 244
        DB 1
        DB 20
        DB 241
        DB 152
        DB 168
        DB 130
        DB 46
        DB 168
        DB 132
        DB 243
        DB 17
        DB 209
        DB 130
        DB 245
        DB 217
        DB 146
        DB 80
        DB 151
        DB 136
        DB 241
        DB 9
        DB 244
        DB 28
        DB 216
        DB 132
        DB 168
        DB 243
        DB 192
        DB 248
        DB 249
        DB 209
        DB 217
        DB 151
        DB 130
        DB 241
        DB 73
        DB 244
        DB 13
        DB 216
        DB 243
        DB 249
        DB 249
        DB 209
        DB 217
        DB 130
        DB 244
        DB 196
        DB 3
        DB 216
        DB 222
        DB 223
        DB 216
        DB 241
        DB 173
        DB 136
        DB 152
        DB 204
        DB 168
        DB 9
        DB 249
        DB 217
        DB 130
        DB 146
        DB 168
        DB 245
        DB 124
        DB 241
        DB 136
        DB 58
        DB 207
        DB 148
        DB 74
        DB 110
        DB 152
        DB 219
        DB 105
        DB 49
        DB 218
        DB 173
        DB 242
        DB 222
        DB 249
        DB 216
        DB 135
        DB 149
        DB 168
        DB 242
        DB 33
        DB 209
        DB 218
        DB 165
        DB 249
        DB 244
        DB 23
        DB 217
        DB 241
        DB 174
        DB 142
        DB 208
        DB 192
        DB 195
        DB 174
        DB 130
        DB 198
        DB 132
        DB 195
        DB 168
        DB 133
        DB 149
        DB 200
        DB 165
        DB 136
        DB 242
        DB 192
        DB 241
        DB 244
        DB 1
        DB 14
        DB 241
        DB 142
        DB 158
        DB 168
        DB 198
        DB 62
        DB 86
        DB 245
        DB 84
        DB 241
        DB 136
        DB 114
        DB 244
        DB 1
        DB 21
        DB 241
        DB 152
        DB 69
        DB 133
        DB 110
        DB 245
        DB 142
        DB 158
        DB 4
        DB 136
        DB 241
        DB 66
        DB 152
        DB 90
        DB 142
        DB 158
        DB 6
        DB 136
        DB 105
        DB 244
        DB 1
        DB 28
        DB 241
        DB 152
        DB 30
        DB 17
        DB 8
        DB 208
        DB 245
        DB 4
        DB 241
        DB 30
        DB 151
        DB 2
        DB 2
        DB 152
        DB 54
        DB 37
        DB 219
        DB 249
        DB 217
        DB 133
        DB 165
        DB 243
        DB 193
        DB 218
        DB 133
        DB 165
        DB 243
        DB 223
        DB 216
        DB 133
        DB 149
        DB 168
        DB 243
        DB 9
        DB 218
        DB 165
        DB 250
        DB 216
        DB 130
        DB 146
        DB 168
        DB 245
        DB 120
        DB 241
        DB 136
        DB 26
        DB 132
        DB 159
        DB 38
        DB 136
        DB 152
        DB 33
        DB 218
        DB 244
        DB 29
        DB 243
        DB 216
        DB 135
        DB 159
        DB 57
        DB 209
        DB 175
        DB 217
        DB 223
        DB 223
        DB 251
        DB 249
        DB 244
        DB 12
        DB 243
        DB 216
        DB 250
        DB 208
        DB 248
        DB 218
        DB 249
        DB 249
        DB 208
        DB 223
        DB 217
        DB 249
        DB 216
        DB 244
        DB 11
        DB 216
        DB 243
        DB 135
        DB 159
        DB 57
        DB 209
        DB 175
        DB 217
        DB 223
        DB 223
        DB 244
        DB 29
        DB 243
        DB 216
        DB 250
        DB 252
        DB 168
        DB 105
        DB 249
        DB 249
        DB 175
        DB 208
        DB 218
        DB 222
        DB 250
        DB 217
        DB 248
        DB 143
        DB 159
        DB 168
        DB 241
        DB 204
        DB 243
        DB 152
        DB 219
        DB 69
        DB 217
        DB 175
        DB 223
        DB 208
        DB 248
        DB 216
        DB 241
        DB 143
        DB 159
        DB 168
        DB 202
        DB 243
        DB 136
        DB 9
        DB 218
        DB 175
        DB 143
        DB 203
        DB 248
        DB 216
        DB 242
        DB 173
        DB 151
        DB 141
        DB 12
        DB 217
        DB 165
        DB 223
        DB 249
        DB 186
        DB 166
        DB 243
        DB 250
        DB 244
        DB 18
        DB 242
        DB 216
        DB 149
        DB 13
        DB 209
        DB 217
        DB 186
        DB 166
        DB 243
        DB 250
        DB 218
        DB 165
        DB 242
        DB 193
        DB 186
        DB 166
        DB 243
        DB 223
        DB 216
        DB 241
        DB 186
        DB 178
        DB 182
        DB 134
        DB 150
        DB 166
        DB 208
        DB 202
        DB 243
        DB 73
        DB 218
        DB 166
        DB 203
        DB 248
        DB 216
        DB 176
        DB 180
        DB 184
        DB 216
        DB 173
        DB 132
        DB 242
        DB 192
        DB 223
        DB 241
        DB 143
        DB 203
        DB 195
        DB 168
        DB 178
        DB 182
        DB 134
        DB 150
        DB 200
        DB 193
        DB 203
        DB 195
        DB 243
        DB 176
        DB 180
        DB 136
        DB 152
        DB 168
        DB 33
        DB 219
        DB 113
        DB 141
        DB 157
        DB 113
        DB 133
        DB 149
        DB 33
        DB 217
        DB 173
        DB 242
        DB 250
        DB 216
        DB 133
        DB 151
        DB 168
        DB 40
        DB 217
        DB 244
        DB 8
        DB 216
        DB 242
        DB 141
        DB 41
        DB 218
        DB 244
        DB 5
        DB 217
        DB 242
        DB 133
        DB 164
        DB 194
        DB 242
        DB 216
        DB 168
        DB 141
        DB 148
        DB 1
        DB 209
        DB 217
        DB 244
        DB 17
        DB 242
        DB 216
        DB 135
        DB 33
        DB 216
        DB 244
        DB 10
        DB 216
        DB 242
        DB 132
        DB 152
        DB 168
        DB 200
        DB 1
        DB 209
        DB 217
        DB 244
        DB 17
        DB 216
        DB 243
        DB 164
        DB 200
        DB 187
        DB 175
        DB 208
        DB 242
        DB 222
        DB 248
        DB 248
        DB 248
        DB 248
        DB 248
        DB 248
        DB 248
        DB 248
        DB 216
        DB 241
        DB 184
        DB 246
        DB 181
        DB 185
        DB 176
        DB 138
        DB 149
        DB 163
        DB 222
        DB 60
        DB 163
        DB 217
        DB 248
        DB 216
        DB 92
        DB 163
        DB 217
        DB 248
        DB 216
        DB 124
        DB 163
        DB 217
        DB 248
        DB 216
        DB 248
        DB 249
        DB 209
        DB 165
        DB 217
        DB 223
        DB 218
        DB 250
        DB 216
        DB 177
        DB 133
        DB 48
        DB 247
        DB 217
        DB 222
        DB 216
        DB 248
        DB 48
        DB 173
        DB 218
        DB 222
        DB 216
        DB 242
        DB 180
        DB 140
        DB 153
        DB 163
        DB 45
        DB 85
        DB 125
        DB 160
        DB 131
        DB 223
        DB 223
        DB 223
        DB 181
        DB 145
        DB 160
        DB 246
        DB 41
        DB 217
        DB 251
        DB 216
        DB 160
        DB 252
        DB 41
        DB 217
        DB 250
        DB 216
        DB 160
        DB 208
        DB 81
        DB 217
        DB 248
        DB 216
        DB 252
        DB 81
        DB 217
        DB 249
        DB 216
        DB 121
        DB 217
        DB 251
        DB 216
        DB 160
        DB 208
        DB 252
        DB 121
        DB 217
        DB 250
        DB 216
        DB 161
        DB 249
        DB 249
        DB 249
        DB 249
        DB 249
        DB 160
        DB 218
        DB 223
        DB 223
        DB 223
        DB 216
        DB 161
        DB 248
        DB 248
        DB 248
        DB 248
        DB 248
        DB 172
        DB 222
        DB 248
        DB 173
        DB 222
        DB 131
        DB 147
        DB 172
        DB 44
        DB 84
        DB 124
        DB 241
        DB 168
        DB 223
        DB 223
        DB 223
        DB 246
        DB 157
        DB 44
        DB 218
        DB 160
        DB 223
        DB 217
        DB 250
        DB 219
        DB 45
        DB 248
        DB 216
        DB 168
        DB 80
        DB 218
        DB 160
        DB 208
        DB 222
        DB 217
        DB 208
        DB 248
        DB 248
        DB 248
        DB 219
        DB 85
        DB 248
        DB 216
        DB 168
        DB 120
        DB 218
        DB 160
        DB 208
        DB 223
        DB 217
        DB 208
        DB 250
        DB 248
        DB 248
        DB 248
        DB 248
        DB 219
        DB 125
        DB 248
        DB 216
        DB 156
        DB 168
        DB 140
        DB 245
        DB 48
        DB 219
        DB 56
        DB 217
        DB 208
        DB 222
        DB 223
        DB 160
        DB 208
        DB 222
        DB 223
        DB 216
        DB 168
        DB 72
        DB 219
        DB 88
        DB 217
        DB 223
        DB 208
        DB 222
        DB 160
        DB 223
        DB 208
        DB 222
        DB 216
        DB 168
        DB 104
        DB 219
        DB 112
        DB 217
        DB 223
        DB 223
        DB 160
        DB 223
        DB 223
        DB 216
        DB 241
        DB 168
        DB 136
        DB 144
        DB 44
        DB 84
        DB 124
        DB 152
        DB 168
        DB 208
        DB 92
        DB 56
        DB 209
        DB 218
        DB 242
        DB 174
        DB 140
        DB 223
        DB 249
        DB 216
        DB 176
        DB 135
        DB 168
        DB 193
        DB 193
        DB 177
        DB 136
        DB 168
        DB 198
        DB 249
        DB 249
        DB 218
        DB 54
        DB 216
        DB 168
        DB 249
        DB 218
        DB 54
        DB 216
        DB 168
        DB 249
        DB 218
        DB 54
        DB 216
        DB 168
        DB 249
        DB 218
        DB 54
        DB 216
        DB 168
        DB 249
        DB 218
        DB 54
        DB 216
        DB 247
        DB 141
        DB 157
        DB 173
        DB 248
        DB 24
        DB 218
        DB 242
        DB 174
        DB 223
        DB 216
        DB 247
        DB 173
        DB 250
        DB 48
        DB 217
        DB 164
        DB 222
        DB 249
        DB 216
        DB 242
        DB 174
        DB 222
        DB 250
        DB 249
        DB 131
        DB 167
        DB 217
        DB 195
        DB 197
        DB 199
        DB 241
        DB 136
        DB 155
        DB 167
        DB 122
        DB 173
        DB 247
        DB 222
        DB 223
        DB 164
        DB 248
        DB 132
        DB 148
        DB 8
        DB 167
        DB 151
        DB 243
        DB 0
        DB 174
        DB 242
        DB 152
        DB 25
        DB 164
        DB 136
        DB 198
        DB 163
        DB 148
        DB 136
        DB 246
        DB 50
        DB 223
        DB 242
        DB 131
        DB 147
        DB 219
        DB 9
        DB 217
        DB 242
        DB 170
        DB 223
        DB 216
        DB 216
        DB 174
        DB 248
        DB 249
        DB 209
        DB 218
        DB 243
        DB 164
        DB 222
        DB 167
        DB 241
        DB 136
        DB 155
        DB 122
        DB 216
        DB 243
        DB 132
        DB 148
        DB 174
        DB 25
        DB 249
        DB 218
        DB 170
        DB 241
        DB 223
        DB 216
        DB 168
        DB 129
        DB 192
        DB 195
        DB 197
        DB 199
        DB 163
        DB 146
        DB 131
        DB 246
        DB 40
        DB 173
        DB 222
        DB 217
        DB 248
        DB 216
        DB 163
        DB 80
        DB 173
        DB 217
        DB 248
        DB 216
        DB 163
        DB 120
        DB 173
        DB 217
        DB 248
        DB 216
        DB 248
        DB 249
        DB 209
        DB 161
        DB 218
        DB 222
        DB 195
        DB 197
        DB 199
        DB 216
        DB 161
        DB 129
        DB 148
        DB 248
        DB 24
        DB 242
        DB 176
        DB 137
        DB 172
        DB 195
        DB 197
        DB 199
        DB 241
        DB 216
        DB 184
        DB 180
        DB 176
        DB 151
        DB 134
        DB 168
        DB 49
        DB 155
        DB 6
        DB 153
        DB 7
        DB 171
        DB 151
        DB 40
        DB 136
        DB 155
        DB 240
        DB 12
        DB 32
        DB 20
        DB 64
        DB 176
        DB 180
        DB 184
        DB 240
        DB 168
        DB 138
        DB 154
        DB 40
        DB 80
        DB 120
        DB 183
        DB 155
        DB 168
        DB 41
        DB 81
        DB 121
        DB 36
        DB 112
        DB 89
        DB 68
        DB 105
        DB 56
        DB 100
        DB 72
        DB 49
        DB 241
        DB 187
        DB 171
        DB 136
        DB 0
        DB 44
        DB 84
        DB 124
        DB 240
        DB 179
        DB 139
        DB 184
        DB 168
        DB 4
        DB 40
        DB 80
        DB 120
        DB 241
        DB 176
        DB 136
        DB 180
        DB 151
        DB 38
        DB 168
        DB 89
        DB 152
        DB 187
        DB 171
        DB 179
        DB 139
        DB 2
        DB 38
        DB 70
        DB 102
        DB 176
        DB 184
        DB 240
        DB 138
        DB 156
        DB 168
        DB 41
        DB 81
        DB 121
        DB 139
        DB 41
        DB 81
        DB 121
        DB 138
        DB 36
        DB 112
        DB 89
        DB 139
        DB 32
        DB 88
        DB 113
        DB 138
        DB 68
        DB 105
        DB 56
        DB 139
        DB 57
        DB 64
        DB 104
        DB 138
        DB 100
        DB 72
        DB 49
        DB 139
        DB 48
        DB 73
        DB 96
        DB 136
        DB 241
        DB 172
        DB 0
        DB 44
        DB 84
        DB 124
        DB 240
        DB 140
        DB 168
        DB 4
        DB 40
        DB 80
        DB 120
        DB 241
        DB 136
        DB 151
        DB 38
        DB 168
        DB 89
        DB 152
        DB 172
        DB 140
        DB 2
        DB 38
        DB 70
        DB 102
        DB 240
        DB 137
        DB 156
        DB 168
        DB 41
        DB 81
        DB 121
        DB 36
        DB 112
        DB 89
        DB 68
        DB 105
        DB 56
        DB 100
        DB 72
        DB 49
        DB 169
        DB 136
        DB 9
        DB 32
        DB 89
        DB 112
        DB 171
        DB 17
        DB 56
        DB 64
        DB 105
        DB 168
        DB 25
        DB 49
        DB 72
        DB 96
        DB 140
        DB 168
        DB 60
        DB 65
        DB 92
        DB 32
        DB 124
        DB 0
        DB 241
        DB 135
        DB 152
        DB 25
        DB 134
        DB 168
        DB 110
        DB 118
        DB 126
        DB 169
        DB 153
        DB 136
        DB 45
        DB 85
        DB 125
        DB 216
        DB 177
        DB 181
        DB 185
        DB 163
        DB 223
        DB 223
        DB 223
        DB 174
        DB 208
        DB 223
        DB 170
        DB 208
        DB 222
        DB 242
        DB 171
        DB 248
        DB 249
        DB 217
        DB 176
        DB 135
        DB 196
        DB 170
        DB 241
        DB 223
        DB 223
        DB 187
        DB 175
        DB 223
        DB 223
        DB 185
        DB 216
        DB 177
        DB 241
        DB 163
        DB 151
        DB 142
        DB 96
        DB 223
        DB 176
        DB 132
        DB 242
        DB 200
        DB 248
        DB 249
        DB 217
        DB 222
        DB 216
        DB 147
        DB 133
        DB 241
        DB 74
        DB 177
        DB 131
        DB 163
        DB 8
        DB 181
        DB 131
        DB 154
        DB 8
        DB 16
        DB 183
        DB 159
        DB 16
        DB 216
        DB 241
        DB 176
        DB 186
        DB 174
        DB 176
        DB 138
        DB 194
        DB 178
        DB 182
        DB 142
        DB 158
        DB 241
        DB 251
        DB 217
        DB 244
        DB 29
        DB 216
        DB 249
        DB 217
        DB 12
        DB 241
        DB 216
        DB 248
        DB 248
        DB 173
        DB 97
        DB 217
        DB 174
        DB 251
        DB 216
        DB 244
        DB 12
        DB 241
        DB 216
        DB 248
        DB 248
        DB 173
        DB 25
        DB 217
        DB 174
        DB 251
        DB 223
        DB 216
        DB 244
        DB 22
        DB 241
        DB 216
        DB 248
        DB 173
        DB 141
        DB 97
        DB 217
        DB 244
        DB 244
        DB 172
        DB 245
        DB 156
        DB 156
        DB 141
        DB 223
        DB 43
        DB 186
        DB 182
        DB 174
        DB 250
        DB 248
        DB 244
        DB 11
        DB 216
        DB 241
        DB 174
        DB 208
        DB 248
        DB 173
        DB 81
        DB 218
        DB 174
        DB 250
        DB 248
        DB 241
        DB 216
        DB 185
        DB 177
        DB 182
        DB 163
        DB 131
        DB 156
        DB 8
        DB 185
        DB 177
        DB 131
        DB 154
        DB 181
        DB 170
        DB 192
        DB 253
        DB 48
        DB 131
        DB 183
        DB 159
        DB 16
        DB 181
        DB 139
        DB 147
        DB 242
        DB 2
        DB 2
        DB 209
        DB 171
        DB 218
        DB 222
        DB 216
        DB 241
        DB 176
        DB 128
        DB 186
        DB 171
        DB 192
        DB 195
        DB 178
        DB 132
        DB 193
        DB 195
        DB 216
        DB 177
        DB 185
        DB 243
        DB 139
        DB 163
        DB 145
        DB 182
        DB 9
        DB 180
        DB 217
        DB 171
        DB 222
        DB 176
        DB 135
        DB 156
        DB 185
        DB 163
        DB 221
        DB 241
        DB 179
        DB 139
        DB 139
        DB 139
        DB 139
        DB 139
        DB 176
        DB 135
        DB 163
        DB 163
        DB 163
        DB 163
        DB 178
        DB 139
        DB 182
        DB 155
        DB 242
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 241
        DB 176
        DB 135
        DB 181
        DB 154
        DB 163
        DB 243
        DB 155
        DB 163
        DB 163
        DB 220
        DB 186
        DB 172
        DB 223
        DB 185
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 216
        DB 216
        DB 216
        DB 187
        DB 179
        DB 183
        DB 241
        DB 170
        DB 249
        DB 218
        DB 255
        DB 217
        DB 128
        DB 154
        DB 170
        DB 40
        DB 180
        DB 128
        DB 152
        DB 167
        DB 32
        DB 183
        DB 151
        DB 135
        DB 168
        DB 102
        DB 136
        DB 240
        DB 121
        DB 81
        DB 241
        DB 144
        DB 44
        DB 135
        DB 12
        DB 167
        DB 129
        DB 151
        DB 98
        DB 147
        DB 240
        DB 113
        DB 113
        DB 96
        DB 133
        DB 148
        DB 1
        DB 41
        DB 81
        DB 121
        DB 144
        DB 165
        DB 241
        DB 40
        DB 76
        DB 108
        DB 135
        DB 12
        DB 149
        DB 24
        DB 133
        DB 120
        DB 163
        DB 131
        DB 144
        DB 40
        DB 76
        DB 108
        DB 136
        DB 108
        DB 216
        DB 243
        DB 162
        DB 130
        DB 0
        DB 242
        DB 16
        DB 168
        DB 146
        DB 25
        DB 128
        DB 162
        DB 242
        DB 217
        DB 38
        DB 216
        DB 241
        DB 136
        DB 168
        DB 77
        DB 217
        DB 72
        DB 216
        DB 150
        DB 168
        DB 57
        DB 128
        DB 217
        DB 60
        DB 216
        DB 149
        DB 128
        DB 168
        DB 57
        DB 166
        DB 134
        DB 152
        DB 217
        DB 44
        DB 218
        DB 135
        DB 167
        DB 44
        DB 216
        DB 168
        DB 137
        DB 149
        DB 25
        DB 169
        DB 128
        DB 217
        DB 56
        DB 216
        DB 168
        DB 137
        DB 57
        DB 169
        DB 128
        DB 218
        DB 60
        DB 216
        DB 168
        DB 46
        DB 168
        DB 57
        DB 144
        DB 217
        DB 12
        DB 216
        DB 168
        DB 149
        DB 49
        DB 152
        DB 217
        DB 12
        DB 216
        DB 168
        DB 9
        DB 217
        DB 255
        DB 216
        DB 1
        DB 218
        DB 255
        DB 216
        DB 149
        DB 57
        DB 169
        DB 218
        DB 38
        DB 255
        DB 216
        DB 144
        DB 168
        DB 13
        DB 137
        DB 153
        DB 168
        DB 16
        DB 128
        DB 152
        DB 33
        DB 218
        DB 46
        DB 216
        DB 137
        DB 153
        DB 168
        DB 49
        DB 128
        DB 218
        DB 46
        DB 216
        DB 168
        DB 134
        DB 150
        DB 49
        DB 128
        DB 218
        DB 46
        DB 216
        DB 168
        DB 135
        DB 49
        DB 128
        DB 218
        DB 46
        DB 216
        DB 168
        DB 130
        DB 146
        DB 243
        DB 65
        DB 128
        DB 241
        DB 217
        DB 46
        DB 216
        DB 168
        DB 130
        DB 243
        DB 25
        DB 128
        DB 241
        DB 217
        DB 46
        DB 216
        DB 130
        DB 172
        DB 243
        DB 192
        DB 162
        DB 128
        DB 34
        DB 241
        DB 166
        DB 46
        DB 167
        DB 46
        DB 169
        DB 34
        DB 152
        DB 168
        DB 41
        DB 218
        DB 172
        DB 222
        DB 255
        DB 216
        DB 162
        DB 242
        DB 42
        DB 241
        DB 169
        DB 46
        DB 130
        DB 146
        DB 168
        DB 242
        DB 49
        DB 128
        DB 166
        DB 150
        DB 241
        DB 217
        DB 0
        DB 172
        DB 140
        DB 156
        DB 12
        DB 48
        DB 172
        DB 222
        DB 208
        DB 222
        DB 255
        DB 216
        DB 140
        DB 156
        DB 172
        DB 208
        DB 16
        DB 172
        DB 222
        DB 128
        DB 146
        DB 162
        DB 242
        DB 76
        DB 130
        DB 168
        DB 241
        DB 202
        DB 242
        DB 53
        DB 241
        DB 150
        DB 136
        DB 166
        DB 217
        DB 0
        DB 216
        DB 241
        DB 255
//  255     /* bank # 0 */
//  256     0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,
//  257     0x00, 0x65, 0x00, 0x54, 0xff, 0xef, 0x00, 0x00, 0xfa, 0x80, 0x00, 0x0b, 0x12, 0x82, 0x00, 0x01,
//  258     0x03, 0x0c, 0x30, 0xc3, 0x0e, 0x8c, 0x8c, 0xe9, 0x14, 0xd5, 0x40, 0x02, 0x13, 0x71, 0x0f, 0x8e,
//  259     0x38, 0x83, 0xf8, 0x83, 0x30, 0x00, 0xf8, 0x83, 0x25, 0x8e, 0xf8, 0x83, 0x30, 0x00, 0xf8, 0x83,
//  260     0xff, 0xff, 0xff, 0xff, 0x0f, 0xfe, 0xa9, 0xd6, 0x24, 0x00, 0x04, 0x00, 0x1a, 0x82, 0x79, 0xa1,
//  261     0x00, 0x00, 0x00, 0x3c, 0xff, 0xff, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x38, 0x83, 0x6f, 0xa2,
//  262     0x00, 0x3e, 0x03, 0x30, 0x40, 0x00, 0x00, 0x00, 0x02, 0xca, 0xe3, 0x09, 0x3e, 0x80, 0x00, 0x00,
//  263     0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
//  264     0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x18, 0x6e, 0x00, 0x00, 0x06, 0x92, 0x0a, 0x16, 0xc0, 0xdf,
//  265     0xff, 0xff, 0x02, 0x56, 0xfd, 0x8c, 0xd3, 0x77, 0xff, 0xe1, 0xc4, 0x96, 0xe0, 0xc5, 0xbe, 0xaa,
//  266     0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x2b, 0x00, 0x00, 0x16, 0x57, 0x00, 0x00, 0x03, 0x59,
//  267     0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xfa, 0x00, 0x02, 0x6c, 0x1d, 0x00, 0x00, 0x00, 0x00,
//  268     0x3f, 0xff, 0xdf, 0xeb, 0x00, 0x3e, 0xb3, 0xb6, 0x00, 0x0d, 0x22, 0x78, 0x00, 0x00, 0x2f, 0x3c,
//  269     0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x42, 0xb5, 0x00, 0x00, 0x39, 0xa2, 0x00, 0x00, 0xb3, 0x65,
//  270     0xd9, 0x0e, 0x9f, 0xc9, 0x1d, 0xcf, 0x4c, 0x34, 0x30, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
//  271     0x3b, 0xb6, 0x7a, 0xe8, 0x00, 0x64, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  272     /* bank # 1 */
//  273     0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0xfa, 0x92, 0x10, 0x00, 0x22, 0x5e, 0x00, 0x0d, 0x22, 0x9f,
//  274     0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0xff, 0x46, 0x00, 0x00, 0x63, 0xd4, 0x00, 0x00,
//  275     0x10, 0x00, 0x00, 0x00, 0x04, 0xd6, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x00,
//  276     0x00, 0x00, 0x10, 0x72, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  277     0x00, 0x06, 0x00, 0x02, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
//  278     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x64, 0x00, 0x20, 0x00, 0x00,
//  279     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00,
//  280     0x00, 0x00, 0x00, 0x32, 0xf8, 0x98, 0x00, 0x00, 0xff, 0x65, 0x00, 0x00, 0x83, 0x0f, 0x00, 0x00,
//  281     0xff, 0x9b, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  282     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  283     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
//  284     0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0xb2, 0x6a, 0x00, 0x02, 0x00, 0x00,
//  285     0x00, 0x01, 0xfb, 0x83, 0x00, 0x68, 0x00, 0x00, 0x00, 0xd9, 0xfc, 0x00, 0x7c, 0xf1, 0xff, 0x83,
//  286     0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x64, 0x03, 0xe8, 0x00, 0x64, 0x00, 0x28,
//  287     0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x16, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
//  288     0x00, 0x00, 0x10, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf4, 0x00, 0x00, 0x10, 0x00,
//  289     /* bank # 2 */
//  290     0x00, 0x28, 0x00, 0x00, 0xff, 0xff, 0x45, 0x81, 0xff, 0xff, 0xfa, 0x72, 0x00, 0x00, 0x00, 0x00,
//  291     0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x05, 0x00, 0x05, 0xba, 0xc6, 0x00, 0x47, 0x78, 0xa2,
//  292     0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x14,
//  293     0x00, 0x00, 0x25, 0x4d, 0x00, 0x2f, 0x70, 0x6d, 0x00, 0x00, 0x05, 0xae, 0x00, 0x0c, 0x02, 0xd0,
//  294     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  295     0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  296     0x00, 0x64, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  297     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  298     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  299     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  300     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  301     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  302     0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0e,
//  303     0x00, 0x00, 0x0a, 0xc7, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0xff, 0xff, 0xff, 0x9c,
//  304     0x00, 0x00, 0x0b, 0x2b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64,
//  305     0xff, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  306     /* bank # 3 */
//  307     0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  308     0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x24, 0x26, 0xd3,
//  309     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x96, 0x00, 0x3c,
//  310     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  311     0x0c, 0x0a, 0x4e, 0x68, 0xcd, 0xcf, 0x77, 0x09, 0x50, 0x16, 0x67, 0x59, 0xc6, 0x19, 0xce, 0x82,
//  312     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  313     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xd7, 0x84, 0x00, 0x03, 0x00, 0x00, 0x00,
//  314     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x93, 0x8f, 0x9d, 0x1e, 0x1b, 0x1c, 0x19,
//  315     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  316     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x18, 0x85, 0x00, 0x00, 0x40, 0x00,
//  317     0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  318     0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  319     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  320     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  321     0x00, 0x00, 0x00, 0x00, 0x67, 0x7d, 0xdf, 0x7e, 0x72, 0x90, 0x2e, 0x55, 0x4c, 0xf6, 0xe6, 0x88,
//  322     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  323 
//  324     /* bank # 4 */
//  325     0xd8, 0xdc, 0xb4, 0xb8, 0xb0, 0xd8, 0xb9, 0xab, 0xf3, 0xf8, 0xfa, 0xb3, 0xb7, 0xbb, 0x8e, 0x9e,
//  326     0xae, 0xf1, 0x32, 0xf5, 0x1b, 0xf1, 0xb4, 0xb8, 0xb0, 0x80, 0x97, 0xf1, 0xa9, 0xdf, 0xdf, 0xdf,
//  327     0xaa, 0xdf, 0xdf, 0xdf, 0xf2, 0xaa, 0xc5, 0xcd, 0xc7, 0xa9, 0x0c, 0xc9, 0x2c, 0x97, 0xf1, 0xa9,
//  328     0x89, 0x26, 0x46, 0x66, 0xb2, 0x89, 0x99, 0xa9, 0x2d, 0x55, 0x7d, 0xb0, 0xb0, 0x8a, 0xa8, 0x96,
//  329     0x36, 0x56, 0x76, 0xf1, 0xba, 0xa3, 0xb4, 0xb2, 0x80, 0xc0, 0xb8, 0xa8, 0x97, 0x11, 0xb2, 0x83,
//  330     0x98, 0xba, 0xa3, 0xf0, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xb2, 0xb9, 0xb4, 0x98, 0x83, 0xf1,
//  331     0xa3, 0x29, 0x55, 0x7d, 0xba, 0xb5, 0xb1, 0xa3, 0x83, 0x93, 0xf0, 0x00, 0x28, 0x50, 0xf5, 0xb2,
//  332     0xb6, 0xaa, 0x83, 0x93, 0x28, 0x54, 0x7c, 0xf1, 0xb9, 0xa3, 0x82, 0x93, 0x61, 0xba, 0xa2, 0xda,
//  333     0xde, 0xdf, 0xdb, 0x81, 0x9a, 0xb9, 0xae, 0xf5, 0x60, 0x68, 0x70, 0xf1, 0xda, 0xba, 0xa2, 0xdf,
//  334     0xd9, 0xba, 0xa2, 0xfa, 0xb9, 0xa3, 0x82, 0x92, 0xdb, 0x31, 0xba, 0xa2, 0xd9, 0xba, 0xa2, 0xf8,
//  335     0xdf, 0x85, 0xa4, 0xd0, 0xc1, 0xbb, 0xad, 0x83, 0xc2, 0xc5, 0xc7, 0xb8, 0xa2, 0xdf, 0xdf, 0xdf,
//  336     0xba, 0xa0, 0xdf, 0xdf, 0xdf, 0xd8, 0xd8, 0xf1, 0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35,
//  337     0x5d, 0xb2, 0xb6, 0xba, 0xaf, 0x8c, 0x96, 0x19, 0x8f, 0x9f, 0xa7, 0x0e, 0x16, 0x1e, 0xb4, 0x9a,
//  338     0xb8, 0xaa, 0x87, 0x2c, 0x54, 0x7c, 0xba, 0xa4, 0xb0, 0x8a, 0xb6, 0x91, 0x32, 0x56, 0x76, 0xb2,
//  339     0x84, 0x94, 0xa4, 0xc8, 0x08, 0xcd, 0xd8, 0xb8, 0xb4, 0xb0, 0xf1, 0x99, 0x82, 0xa8, 0x2d, 0x55,
//  340     0x7d, 0x98, 0xa8, 0x0e, 0x16, 0x1e, 0xa2, 0x2c, 0x54, 0x7c, 0x92, 0xa4, 0xf0, 0x2c, 0x50, 0x78,
//  341     /* bank # 5 */
//  342     0xf1, 0x84, 0xa8, 0x98, 0xc4, 0xcd, 0xfc, 0xd8, 0x0d, 0xdb, 0xa8, 0xfc, 0x2d, 0xf3, 0xd9, 0xba,
//  343     0xa6, 0xf8, 0xda, 0xba, 0xa6, 0xde, 0xd8, 0xba, 0xb2, 0xb6, 0x86, 0x96, 0xa6, 0xd0, 0xf3, 0xc8,
//  344     0x41, 0xda, 0xa6, 0xc8, 0xf8, 0xd8, 0xb0, 0xb4, 0xb8, 0x82, 0xa8, 0x92, 0xf5, 0x2c, 0x54, 0x88,
//  345     0x98, 0xf1, 0x35, 0xd9, 0xf4, 0x18, 0xd8, 0xf1, 0xa2, 0xd0, 0xf8, 0xf9, 0xa8, 0x84, 0xd9, 0xc7,
//  346     0xdf, 0xf8, 0xf8, 0x83, 0xc5, 0xda, 0xdf, 0x69, 0xdf, 0x83, 0xc1, 0xd8, 0xf4, 0x01, 0x14, 0xf1,
//  347     0xa8, 0x82, 0x4e, 0xa8, 0x84, 0xf3, 0x11, 0xd1, 0x82, 0xf5, 0xd9, 0x92, 0x28, 0x97, 0x88, 0xf1,
//  348     0x09, 0xf4, 0x1c, 0x1c, 0xd8, 0x84, 0xa8, 0xf3, 0xc0, 0xf9, 0xd1, 0xd9, 0x97, 0x82, 0xf1, 0x29,
//  349     0xf4, 0x0d, 0xd8, 0xf3, 0xf9, 0xf9, 0xd1, 0xd9, 0x82, 0xf4, 0xc2, 0x03, 0xd8, 0xde, 0xdf, 0x1a,
//  350     0xd8, 0xf1, 0xa2, 0xfa, 0xf9, 0xa8, 0x84, 0x98, 0xd9, 0xc7, 0xdf, 0xf8, 0xf8, 0xf8, 0x83, 0xc7,
//  351     0xda, 0xdf, 0x69, 0xdf, 0xf8, 0x83, 0xc3, 0xd8, 0xf4, 0x01, 0x14, 0xf1, 0x98, 0xa8, 0x82, 0x2e,
//  352     0xa8, 0x84, 0xf3, 0x11, 0xd1, 0x82, 0xf5, 0xd9, 0x92, 0x50, 0x97, 0x88, 0xf1, 0x09, 0xf4, 0x1c,
//  353     0xd8, 0x84, 0xa8, 0xf3, 0xc0, 0xf8, 0xf9, 0xd1, 0xd9, 0x97, 0x82, 0xf1, 0x49, 0xf4, 0x0d, 0xd8,
//  354     0xf3, 0xf9, 0xf9, 0xd1, 0xd9, 0x82, 0xf4, 0xc4, 0x03, 0xd8, 0xde, 0xdf, 0xd8, 0xf1, 0xad, 0x88,
//  355     0x98, 0xcc, 0xa8, 0x09, 0xf9, 0xd9, 0x82, 0x92, 0xa8, 0xf5, 0x7c, 0xf1, 0x88, 0x3a, 0xcf, 0x94,
//  356     0x4a, 0x6e, 0x98, 0xdb, 0x69, 0x31, 0xda, 0xad, 0xf2, 0xde, 0xf9, 0xd8, 0x87, 0x95, 0xa8, 0xf2,
//  357     0x21, 0xd1, 0xda, 0xa5, 0xf9, 0xf4, 0x17, 0xd9, 0xf1, 0xae, 0x8e, 0xd0, 0xc0, 0xc3, 0xae, 0x82,
//  358     /* bank # 6 */
//  359     0xc6, 0x84, 0xc3, 0xa8, 0x85, 0x95, 0xc8, 0xa5, 0x88, 0xf2, 0xc0, 0xf1, 0xf4, 0x01, 0x0e, 0xf1,
//  360     0x8e, 0x9e, 0xa8, 0xc6, 0x3e, 0x56, 0xf5, 0x54, 0xf1, 0x88, 0x72, 0xf4, 0x01, 0x15, 0xf1, 0x98,
//  361     0x45, 0x85, 0x6e, 0xf5, 0x8e, 0x9e, 0x04, 0x88, 0xf1, 0x42, 0x98, 0x5a, 0x8e, 0x9e, 0x06, 0x88,
//  362     0x69, 0xf4, 0x01, 0x1c, 0xf1, 0x98, 0x1e, 0x11, 0x08, 0xd0, 0xf5, 0x04, 0xf1, 0x1e, 0x97, 0x02,
//  363     0x02, 0x98, 0x36, 0x25, 0xdb, 0xf9, 0xd9, 0x85, 0xa5, 0xf3, 0xc1, 0xda, 0x85, 0xa5, 0xf3, 0xdf,
//  364     0xd8, 0x85, 0x95, 0xa8, 0xf3, 0x09, 0xda, 0xa5, 0xfa, 0xd8, 0x82, 0x92, 0xa8, 0xf5, 0x78, 0xf1,
//  365     0x88, 0x1a, 0x84, 0x9f, 0x26, 0x88, 0x98, 0x21, 0xda, 0xf4, 0x1d, 0xf3, 0xd8, 0x87, 0x9f, 0x39,
//  366     0xd1, 0xaf, 0xd9, 0xdf, 0xdf, 0xfb, 0xf9, 0xf4, 0x0c, 0xf3, 0xd8, 0xfa, 0xd0, 0xf8, 0xda, 0xf9,
//  367     0xf9, 0xd0, 0xdf, 0xd9, 0xf9, 0xd8, 0xf4, 0x0b, 0xd8, 0xf3, 0x87, 0x9f, 0x39, 0xd1, 0xaf, 0xd9,
//  368     0xdf, 0xdf, 0xf4, 0x1d, 0xf3, 0xd8, 0xfa, 0xfc, 0xa8, 0x69, 0xf9, 0xf9, 0xaf, 0xd0, 0xda, 0xde,
//  369     0xfa, 0xd9, 0xf8, 0x8f, 0x9f, 0xa8, 0xf1, 0xcc, 0xf3, 0x98, 0xdb, 0x45, 0xd9, 0xaf, 0xdf, 0xd0,
//  370     0xf8, 0xd8, 0xf1, 0x8f, 0x9f, 0xa8, 0xca, 0xf3, 0x88, 0x09, 0xda, 0xaf, 0x8f, 0xcb, 0xf8, 0xd8,
//  371     0xf2, 0xad, 0x97, 0x8d, 0x0c, 0xd9, 0xa5, 0xdf, 0xf9, 0xba, 0xa6, 0xf3, 0xfa, 0xf4, 0x12, 0xf2,
//  372     0xd8, 0x95, 0x0d, 0xd1, 0xd9, 0xba, 0xa6, 0xf3, 0xfa, 0xda, 0xa5, 0xf2, 0xc1, 0xba, 0xa6, 0xf3,
//  373     0xdf, 0xd8, 0xf1, 0xba, 0xb2, 0xb6, 0x86, 0x96, 0xa6, 0xd0, 0xca, 0xf3, 0x49, 0xda, 0xa6, 0xcb,
//  374     0xf8, 0xd8, 0xb0, 0xb4, 0xb8, 0xd8, 0xad, 0x84, 0xf2, 0xc0, 0xdf, 0xf1, 0x8f, 0xcb, 0xc3, 0xa8,
//  375     /* bank # 7 */
//  376     0xb2, 0xb6, 0x86, 0x96, 0xc8, 0xc1, 0xcb, 0xc3, 0xf3, 0xb0, 0xb4, 0x88, 0x98, 0xa8, 0x21, 0xdb,
//  377     0x71, 0x8d, 0x9d, 0x71, 0x85, 0x95, 0x21, 0xd9, 0xad, 0xf2, 0xfa, 0xd8, 0x85, 0x97, 0xa8, 0x28,
//  378     0xd9, 0xf4, 0x08, 0xd8, 0xf2, 0x8d, 0x29, 0xda, 0xf4, 0x05, 0xd9, 0xf2, 0x85, 0xa4, 0xc2, 0xf2,
//  379     0xd8, 0xa8, 0x8d, 0x94, 0x01, 0xd1, 0xd9, 0xf4, 0x11, 0xf2, 0xd8, 0x87, 0x21, 0xd8, 0xf4, 0x0a,
//  380     0xd8, 0xf2, 0x84, 0x98, 0xa8, 0xc8, 0x01, 0xd1, 0xd9, 0xf4, 0x11, 0xd8, 0xf3, 0xa4, 0xc8, 0xbb,
//  381     0xaf, 0xd0, 0xf2, 0xde, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xd8, 0xf1, 0xb8, 0xf6,
//  382     0xb5, 0xb9, 0xb0, 0x8a, 0x95, 0xa3, 0xde, 0x3c, 0xa3, 0xd9, 0xf8, 0xd8, 0x5c, 0xa3, 0xd9, 0xf8,
//  383     0xd8, 0x7c, 0xa3, 0xd9, 0xf8, 0xd8, 0xf8, 0xf9, 0xd1, 0xa5, 0xd9, 0xdf, 0xda, 0xfa, 0xd8, 0xb1,
//  384     0x85, 0x30, 0xf7, 0xd9, 0xde, 0xd8, 0xf8, 0x30, 0xad, 0xda, 0xde, 0xd8, 0xf2, 0xb4, 0x8c, 0x99,
//  385     0xa3, 0x2d, 0x55, 0x7d, 0xa0, 0x83, 0xdf, 0xdf, 0xdf, 0xb5, 0x91, 0xa0, 0xf6, 0x29, 0xd9, 0xfb,
//  386     0xd8, 0xa0, 0xfc, 0x29, 0xd9, 0xfa, 0xd8, 0xa0, 0xd0, 0x51, 0xd9, 0xf8, 0xd8, 0xfc, 0x51, 0xd9,
//  387     0xf9, 0xd8, 0x79, 0xd9, 0xfb, 0xd8, 0xa0, 0xd0, 0xfc, 0x79, 0xd9, 0xfa, 0xd8, 0xa1, 0xf9, 0xf9,
//  388     0xf9, 0xf9, 0xf9, 0xa0, 0xda, 0xdf, 0xdf, 0xdf, 0xd8, 0xa1, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xac,
//  389     0xde, 0xf8, 0xad, 0xde, 0x83, 0x93, 0xac, 0x2c, 0x54, 0x7c, 0xf1, 0xa8, 0xdf, 0xdf, 0xdf, 0xf6,
//  390     0x9d, 0x2c, 0xda, 0xa0, 0xdf, 0xd9, 0xfa, 0xdb, 0x2d, 0xf8, 0xd8, 0xa8, 0x50, 0xda, 0xa0, 0xd0,
//  391     0xde, 0xd9, 0xd0, 0xf8, 0xf8, 0xf8, 0xdb, 0x55, 0xf8, 0xd8, 0xa8, 0x78, 0xda, 0xa0, 0xd0, 0xdf,
//  392     /* bank # 8 */
//  393     0xd9, 0xd0, 0xfa, 0xf8, 0xf8, 0xf8, 0xf8, 0xdb, 0x7d, 0xf8, 0xd8, 0x9c, 0xa8, 0x8c, 0xf5, 0x30,
//  394     0xdb, 0x38, 0xd9, 0xd0, 0xde, 0xdf, 0xa0, 0xd0, 0xde, 0xdf, 0xd8, 0xa8, 0x48, 0xdb, 0x58, 0xd9,
//  395     0xdf, 0xd0, 0xde, 0xa0, 0xdf, 0xd0, 0xde, 0xd8, 0xa8, 0x68, 0xdb, 0x70, 0xd9, 0xdf, 0xdf, 0xa0,
//  396     0xdf, 0xdf, 0xd8, 0xf1, 0xa8, 0x88, 0x90, 0x2c, 0x54, 0x7c, 0x98, 0xa8, 0xd0, 0x5c, 0x38, 0xd1,
//  397     0xda, 0xf2, 0xae, 0x8c, 0xdf, 0xf9, 0xd8, 0xb0, 0x87, 0xa8, 0xc1, 0xc1, 0xb1, 0x88, 0xa8, 0xc6,
//  398     0xf9, 0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xa8,
//  399     0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xf7, 0x8d, 0x9d, 0xad, 0xf8, 0x18, 0xda,
//  400     0xf2, 0xae, 0xdf, 0xd8, 0xf7, 0xad, 0xfa, 0x30, 0xd9, 0xa4, 0xde, 0xf9, 0xd8, 0xf2, 0xae, 0xde,
//  401     0xfa, 0xf9, 0x83, 0xa7, 0xd9, 0xc3, 0xc5, 0xc7, 0xf1, 0x88, 0x9b, 0xa7, 0x7a, 0xad, 0xf7, 0xde,
//  402     0xdf, 0xa4, 0xf8, 0x84, 0x94, 0x08, 0xa7, 0x97, 0xf3, 0x00, 0xae, 0xf2, 0x98, 0x19, 0xa4, 0x88,
//  403     0xc6, 0xa3, 0x94, 0x88, 0xf6, 0x32, 0xdf, 0xf2, 0x83, 0x93, 0xdb, 0x09, 0xd9, 0xf2, 0xaa, 0xdf,
//  404     0xd8, 0xd8, 0xae, 0xf8, 0xf9, 0xd1, 0xda, 0xf3, 0xa4, 0xde, 0xa7, 0xf1, 0x88, 0x9b, 0x7a, 0xd8,
//  405     0xf3, 0x84, 0x94, 0xae, 0x19, 0xf9, 0xda, 0xaa, 0xf1, 0xdf, 0xd8, 0xa8, 0x81, 0xc0, 0xc3, 0xc5,
//  406     0xc7, 0xa3, 0x92, 0x83, 0xf6, 0x28, 0xad, 0xde, 0xd9, 0xf8, 0xd8, 0xa3, 0x50, 0xad, 0xd9, 0xf8,
//  407     0xd8, 0xa3, 0x78, 0xad, 0xd9, 0xf8, 0xd8, 0xf8, 0xf9, 0xd1, 0xa1, 0xda, 0xde, 0xc3, 0xc5, 0xc7,
//  408     0xd8, 0xa1, 0x81, 0x94, 0xf8, 0x18, 0xf2, 0xb0, 0x89, 0xac, 0xc3, 0xc5, 0xc7, 0xf1, 0xd8, 0xb8,
//  409     /* bank # 9 */
//  410     0xb4, 0xb0, 0x97, 0x86, 0xa8, 0x31, 0x9b, 0x06, 0x99, 0x07, 0xab, 0x97, 0x28, 0x88, 0x9b, 0xf0,
//  411     0x0c, 0x20, 0x14, 0x40, 0xb0, 0xb4, 0xb8, 0xf0, 0xa8, 0x8a, 0x9a, 0x28, 0x50, 0x78, 0xb7, 0x9b,
//  412     0xa8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31, 0xf1, 0xbb, 0xab,
//  413     0x88, 0x00, 0x2c, 0x54, 0x7c, 0xf0, 0xb3, 0x8b, 0xb8, 0xa8, 0x04, 0x28, 0x50, 0x78, 0xf1, 0xb0,
//  414     0x88, 0xb4, 0x97, 0x26, 0xa8, 0x59, 0x98, 0xbb, 0xab, 0xb3, 0x8b, 0x02, 0x26, 0x46, 0x66, 0xb0,
//  415     0xb8, 0xf0, 0x8a, 0x9c, 0xa8, 0x29, 0x51, 0x79, 0x8b, 0x29, 0x51, 0x79, 0x8a, 0x24, 0x70, 0x59,
//  416     0x8b, 0x20, 0x58, 0x71, 0x8a, 0x44, 0x69, 0x38, 0x8b, 0x39, 0x40, 0x68, 0x8a, 0x64, 0x48, 0x31,
//  417     0x8b, 0x30, 0x49, 0x60, 0x88, 0xf1, 0xac, 0x00, 0x2c, 0x54, 0x7c, 0xf0, 0x8c, 0xa8, 0x04, 0x28,
//  418     0x50, 0x78, 0xf1, 0x88, 0x97, 0x26, 0xa8, 0x59, 0x98, 0xac, 0x8c, 0x02, 0x26, 0x46, 0x66, 0xf0,
//  419     0x89, 0x9c, 0xa8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31, 0xa9,
//  420     0x88, 0x09, 0x20, 0x59, 0x70, 0xab, 0x11, 0x38, 0x40, 0x69, 0xa8, 0x19, 0x31, 0x48, 0x60, 0x8c,
//  421     0xa8, 0x3c, 0x41, 0x5c, 0x20, 0x7c, 0x00, 0xf1, 0x87, 0x98, 0x19, 0x86, 0xa8, 0x6e, 0x76, 0x7e,
//  422     0xa9, 0x99, 0x88, 0x2d, 0x55, 0x7d, 0xd8, 0xb1, 0xb5, 0xb9, 0xa3, 0xdf, 0xdf, 0xdf, 0xae, 0xd0,
//  423     0xdf, 0xaa, 0xd0, 0xde, 0xf2, 0xab, 0xf8, 0xf9, 0xd9, 0xb0, 0x87, 0xc4, 0xaa, 0xf1, 0xdf, 0xdf,
//  424     0xbb, 0xaf, 0xdf, 0xdf, 0xb9, 0xd8, 0xb1, 0xf1, 0xa3, 0x97, 0x8e, 0x60, 0xdf, 0xb0, 0x84, 0xf2,
//  425     0xc8, 0xf8, 0xf9, 0xd9, 0xde, 0xd8, 0x93, 0x85, 0xf1, 0x4a, 0xb1, 0x83, 0xa3, 0x08, 0xb5, 0x83,
//  426     /* bank # 10 */
//  427     0x9a, 0x08, 0x10, 0xb7, 0x9f, 0x10, 0xd8, 0xf1, 0xb0, 0xba, 0xae, 0xb0, 0x8a, 0xc2, 0xb2, 0xb6,
//  428     0x8e, 0x9e, 0xf1, 0xfb, 0xd9, 0xf4, 0x1d, 0xd8, 0xf9, 0xd9, 0x0c, 0xf1, 0xd8, 0xf8, 0xf8, 0xad,
//  429     0x61, 0xd9, 0xae, 0xfb, 0xd8, 0xf4, 0x0c, 0xf1, 0xd8, 0xf8, 0xf8, 0xad, 0x19, 0xd9, 0xae, 0xfb,
//  430     0xdf, 0xd8, 0xf4, 0x16, 0xf1, 0xd8, 0xf8, 0xad, 0x8d, 0x61, 0xd9, 0xf4, 0xf4, 0xac, 0xf5, 0x9c,
//  431     0x9c, 0x8d, 0xdf, 0x2b, 0xba, 0xb6, 0xae, 0xfa, 0xf8, 0xf4, 0x0b, 0xd8, 0xf1, 0xae, 0xd0, 0xf8,
//  432     0xad, 0x51, 0xda, 0xae, 0xfa, 0xf8, 0xf1, 0xd8, 0xb9, 0xb1, 0xb6, 0xa3, 0x83, 0x9c, 0x08, 0xb9,
//  433     0xb1, 0x83, 0x9a, 0xb5, 0xaa, 0xc0, 0xfd, 0x30, 0x83, 0xb7, 0x9f, 0x10, 0xb5, 0x8b, 0x93, 0xf2,
//  434     0x02, 0x02, 0xd1, 0xab, 0xda, 0xde, 0xd8, 0xf1, 0xb0, 0x80, 0xba, 0xab, 0xc0, 0xc3, 0xb2, 0x84,
//  435     0xc1, 0xc3, 0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9, 0xab, 0xde, 0xb0,
//  436     0x87, 0x9c, 0xb9, 0xa3, 0xdd, 0xf1, 0xb3, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0xb0, 0x87, 0xa3, 0xa3,
//  437     0xa3, 0xa3, 0xb2, 0x8b, 0xb6, 0x9b, 0xf2, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
//  438     0xa3, 0xf1, 0xb0, 0x87, 0xb5, 0x9a, 0xa3, 0xf3, 0x9b, 0xa3, 0xa3, 0xdc, 0xba, 0xac, 0xdf, 0xb9,
//  439     0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
//  440     0xd8, 0xd8, 0xd8, 0xbb, 0xb3, 0xb7, 0xf1, 0xaa, 0xf9, 0xda, 0xff, 0xd9, 0x80, 0x9a, 0xaa, 0x28,
//  441     0xb4, 0x80, 0x98, 0xa7, 0x20, 0xb7, 0x97, 0x87, 0xa8, 0x66, 0x88, 0xf0, 0x79, 0x51, 0xf1, 0x90,
//  442     0x2c, 0x87, 0x0c, 0xa7, 0x81, 0x97, 0x62, 0x93, 0xf0, 0x71, 0x71, 0x60, 0x85, 0x94, 0x01, 0x29,
//  443     /* bank # 11 */
//  444     0x51, 0x79, 0x90, 0xa5, 0xf1, 0x28, 0x4c, 0x6c, 0x87, 0x0c, 0x95, 0x18, 0x85, 0x78, 0xa3, 0x83,
//  445     0x90, 0x28, 0x4c, 0x6c, 0x88, 0x6c, 0xd8, 0xf3, 0xa2, 0x82, 0x00, 0xf2, 0x10, 0xa8, 0x92, 0x19,
//  446     0x80, 0xa2, 0xf2, 0xd9, 0x26, 0xd8, 0xf1, 0x88, 0xa8, 0x4d, 0xd9, 0x48, 0xd8, 0x96, 0xa8, 0x39,
//  447     0x80, 0xd9, 0x3c, 0xd8, 0x95, 0x80, 0xa8, 0x39, 0xa6, 0x86, 0x98, 0xd9, 0x2c, 0xda, 0x87, 0xa7,
//  448     0x2c, 0xd8, 0xa8, 0x89, 0x95, 0x19, 0xa9, 0x80, 0xd9, 0x38, 0xd8, 0xa8, 0x89, 0x39, 0xa9, 0x80,
//  449     0xda, 0x3c, 0xd8, 0xa8, 0x2e, 0xa8, 0x39, 0x90, 0xd9, 0x0c, 0xd8, 0xa8, 0x95, 0x31, 0x98, 0xd9,
//  450     0x0c, 0xd8, 0xa8, 0x09, 0xd9, 0xff, 0xd8, 0x01, 0xda, 0xff, 0xd8, 0x95, 0x39, 0xa9, 0xda, 0x26,
//  451     0xff, 0xd8, 0x90, 0xa8, 0x0d, 0x89, 0x99, 0xa8, 0x10, 0x80, 0x98, 0x21, 0xda, 0x2e, 0xd8, 0x89,
//  452     0x99, 0xa8, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8, 0x86, 0x96, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8,
//  453     0x87, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8, 0x82, 0x92, 0xf3, 0x41, 0x80, 0xf1, 0xd9, 0x2e, 0xd8,
//  454     0xa8, 0x82, 0xf3, 0x19, 0x80, 0xf1, 0xd9, 0x2e, 0xd8, 0x82, 0xac, 0xf3, 0xc0, 0xa2, 0x80, 0x22,
//  455     0xf1, 0xa6, 0x2e, 0xa7, 0x2e, 0xa9, 0x22, 0x98, 0xa8, 0x29, 0xda, 0xac, 0xde, 0xff, 0xd8, 0xa2,
//  456     0xf2, 0x2a, 0xf1, 0xa9, 0x2e, 0x82, 0x92, 0xa8, 0xf2, 0x31, 0x80, 0xa6, 0x96, 0xf1, 0xd9, 0x00,
//  457     0xac, 0x8c, 0x9c, 0x0c, 0x30, 0xac, 0xde, 0xd0, 0xde, 0xff, 0xd8, 0x8c, 0x9c, 0xac, 0xd0, 0x10,
//  458     0xac, 0xde, 0x80, 0x92, 0xa2, 0xf2, 0x4c, 0x82, 0xa8, 0xf1, 0xca, 0xf2, 0x35, 0xf1, 0x96, 0x88,
//  459     0xa6, 0xd9, 0x00, 0xd8, 0xf1, 0xff
//  460 };
//  461 
//  462 static const unsigned short sStartAddress = 0x0400;
//  463 
//  464 /* END OF SECTION COPIED FROM dmpDefaultMPU6050.c */
//  465 
//  466 #define INT_SRC_TAP             (0x01)
//  467 #define INT_SRC_ANDROID_ORIENT  (0x08)
//  468 
//  469 #define DMP_FEATURE_SEND_ANY_GYRO   (DMP_FEATURE_SEND_RAW_GYRO | \ 
//  470                                      DMP_FEATURE_SEND_CAL_GYRO)
//  471 
//  472 #define MAX_PACKET_LENGTH   (32)
//  473 
//  474 #define DMP_SAMPLE_RATE     (200)
//  475 #define GYRO_SF             (46850825LL * 200 / DMP_SAMPLE_RATE)
//  476 
//  477 #define FIFO_CORRUPTION_CHECK
//  478 #ifdef FIFO_CORRUPTION_CHECK
//  479 #define QUAT_ERROR_THRESH       (1L<<24)
//  480 #define QUAT_MAG_SQ_NORMALIZED  (1L<<28)
//  481 #define QUAT_MAG_SQ_MIN         (QUAT_MAG_SQ_NORMALIZED - QUAT_ERROR_THRESH)
//  482 #define QUAT_MAG_SQ_MAX         (QUAT_MAG_SQ_NORMALIZED + QUAT_ERROR_THRESH)
//  483 #endif
//  484 
//  485 struct dmp_s {
//  486     void (*tap_cb)(unsigned char count, unsigned char direction);
//  487     void (*android_orient_cb)(unsigned char orientation);
//  488     unsigned short orient;
//  489     unsigned short feature_mask;
//  490     unsigned short fifo_rate;
//  491     unsigned char packet_length;
//  492 };
//  493 
//  494 //static struct dmp_s dmp = {
//  495 //    .tap_cb = NULL,
//  496 //    .android_orient_cb = NULL,
//  497 //    .orient = 0,
//  498 //    .feature_mask = 0,
//  499 //    .fifo_rate = 0,
//  500 //    .packet_length = 0
//  501 //};

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  502 static struct dmp_s dmp={
dmp:
        DS 11
        REQUIRE __INIT_XDATA_Z
//  503   NULL,
//  504   NULL,
//  505   0,
//  506   0,
//  507   0,
//  508   0
//  509 };
//  510 /**
//  511  *  @brief  Load the DMP with this image.
//  512  *  @return 0 if successful.
//  513  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  514 int dmp_load_motion_driver_firmware(void)
dmp_load_motion_driver_firmware:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function dmp_load_motion_driver_firmware
        CODE
//  515 {
        FUNCALL dmp_load_motion_driver_firmware, mpu_load_firmware
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  516     return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
//  517         DMP_SAMPLE_RATE);
        ; Setup parameters for call to function mpu_load_firmware
        MOV     ?V0 + 0,#-0x38
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#dmp_memory & 0xff
        MOV     R5,#(dmp_memory >> 8) & 0xff
        MOV     R2,#-0xa
        MOV     R3,#0xb
        LCALL   ??mpu_load_firmware?relay
        LJMP    ??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  518 }
//  519 
//  520 /**
//  521  *  @brief      Push gyro and accel orientation to the DMP.
//  522  *  The orientation is represented here as the output of
//  523  *  @e inv_orientation_matrix_to_scalar.
//  524  *  @param[in]  orient  Gyro and accel orientation in body frame.
//  525  *  @return     0 if successful.
//  526  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  527 int dmp_set_orientation(unsigned short orient)
dmp_set_orientation:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function dmp_set_orientation
        CODE
//  528 {
        FUNCALL dmp_set_orientation, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_orientation, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_orientation, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_orientation, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_orientation, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_orientation, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  529     unsigned char gyro_regs[3], accel_regs[3];
//  530     const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {76, 205, 108}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {76, 205, 108}>` & 0xff
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  531     const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {12, 201, 44}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {12, 201, 44}>` & 0xff
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  532     const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {54, 86, 118}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {54, 86, 118}>` & 0xff
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  533     const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {38, 70, 102}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {38, 70, 102}>` & 0xff
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     A,R6
        ANL     A,#0x3
        MOV     R2,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_64:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  534 
//  535     gyro_regs[0] = gyro_axes[orient & 3];
//  536     gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
        MOV     A,R6
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x3
        MOV     R0,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_60:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  537     gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
        MOV     A,R6
        SWAP    A
        RRC     A
        RRC     A
        ANL     A,#0x3
        MOV     R4,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R4
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_61:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  538     accel_regs[0] = accel_axes[orient & 3];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  539     accel_regs[1] = accel_axes[(orient >> 3) & 3];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_62:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  540     accel_regs[2] = accel_axes[(orient >> 6) & 3];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R4
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_63:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  541 
//  542     /* Chip-to-body, axes only. */
//  543     if (mpu_write_mem(FCFG_1, 3, gyro_regs))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#0x26
        MOV     R3,#0x4
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_99:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??dmp_set_orientation_0
//  544         return -1;
??dmp_set_orientation_1:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LJMP    ??CrossCallReturnLabel_46 & 0xFFFF
//  545     if (mpu_write_mem(FCFG_2, 3, accel_regs))
??dmp_set_orientation_0:
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#0x2a
        MOV     R3,#0x4
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_100:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??dmp_set_orientation_1
//  546         return -1;
//  547 
//  548     memcpy(gyro_regs, gyro_sign, 3);
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  549     memcpy(accel_regs, accel_sign, 3);
        ; Setup parameters for call to function memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  550     if (orient & 4) {
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??CrossCallReturnLabel_33
//  551         gyro_regs[0] |= 1;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  552         accel_regs[0] |= 1;
??CrossCallReturnLabel_32:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine24 & 0xFFFF
//  553     }
//  554     if (orient & 0x20) {
??CrossCallReturnLabel_33:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??CrossCallReturnLabel_35
//  555         gyro_regs[1] |= 1;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  556         accel_regs[1] |= 1;
??CrossCallReturnLabel_34:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  557     }
//  558     if (orient & 0x100) {
??CrossCallReturnLabel_35:
        MOV     A,R7
        ANL     A,#0x1
        JZ      ??CrossCallReturnLabel_37
//  559         gyro_regs[2] |= 1;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  560         accel_regs[2] |= 1;
??CrossCallReturnLabel_36:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  561     }
//  562 
//  563     /* Chip-to-body, sign only. */
//  564     if (mpu_write_mem(FCFG_3, 3, gyro_regs))
??CrossCallReturnLabel_37:
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#0x40
        MOV     R3,#0x4
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_101:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_orientation_1 & 0xFFFF
//  565         return -1;
//  566     if (mpu_write_mem(FCFG_7, 3, accel_regs))
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#0x31
        MOV     R3,#0x4
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_102:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_orientation_1 & 0xFFFF
//  567         return -1;
//  568     dmp.orient = orient;
        MOV     DPTR,#dmp + 4
        LCALL   ?Subroutine30 & 0xFFFF
//  569     return 0;
??CrossCallReturnLabel_46:
        MOV     A,#0x12
        LJMP    ??Subroutine43_0 & 0xFFFF
        CFI EndBlock cfiBlock1
//  570 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOV     A,DPL
        ADD     A,R2
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  571 
//  572 /**
//  573  *  @brief      Push gyro biases to the DMP.
//  574  *  Because the gyro integration is handled in the DMP, any gyro biases
//  575  *  calculated by the MPL should be pushed down to DMP memory to remove
//  576  *  3-axis quaternion drift.
//  577  *  \n NOTE: If the DMP-based gyro calibration is enabled, the DMP will
//  578  *  overwrite the biases written to this location once a new one is computed.
//  579  *  @param[in]  bias    Gyro biases in q16.
//  580  *  @return     0 if successful.
//  581  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  582 int dmp_set_gyro_bias(long *bias)
dmp_set_gyro_bias:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function dmp_set_gyro_bias
        CODE
//  583 {
        FUNCALL dmp_set_gyro_bias, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_gyro_bias, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_gyro_bias, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_gyro_bias, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  584     long gyro_bias_body[3];
//  585     unsigned char regs[4];
//  586 
//  587     gyro_bias_body[0] = bias[dmp.orient & 3];
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?S_SHL
        MOV     A,R2
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL   ?XLOAD_R2345
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
//  588     if (dmp.orient & 4)
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??dmp_set_gyro_bias_0
//  589         gyro_bias_body[0] *= -1;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        LCALL   ?L_NEG
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  590     gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
??dmp_set_gyro_bias_0:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  591     if (dmp.orient & 0x20)
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??dmp_set_gyro_bias_1
//  592         gyro_bias_body[1] *= -1;
        MOV     R0,#?V0 + 4
        LCALL   ?L_NEG
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  593     gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
??dmp_set_gyro_bias_1:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  594     if (dmp.orient & 0x100)
        MOV     A,R7
        ANL     A,#0x1
        JZ      ??dmp_set_gyro_bias_2
//  595         gyro_bias_body[2] *= -1;
        MOV     R0,#?V0 + 0
        LCALL   ?L_NEG
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  596 //#define EMPL_NO_64BIT
//  597 #ifdef EMPL_NO_64BIT
//  598     gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
//  599     gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
//  600     gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
//  601 #else
//  602     printf("hello");
??dmp_set_gyro_bias_2:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "hello">` & 0xff
        MOV     R3,#(`?<Constant "hello">` >> 8) & 0xff
        LCALL   ??printf?relay
//  603     //gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
//  604     //gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
//  605     //gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
//  606 #endif
//  607 
//  608     regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  609     regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  610     regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x8
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  611     regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        LCALL   ??Subroutine44_0 & 0xFFFF
//  612     if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
??CrossCallReturnLabel_75:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x30
        MOV     R3,#0x3
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_103:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??dmp_set_gyro_bias_3
//  613         return -1;
??dmp_set_gyro_bias_4:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LJMP    ??dmp_set_gyro_bias_5 & 0xFFFF
//  614 
//  615     regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
??dmp_set_gyro_bias_3:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        LCALL   ?Subroutine26 & 0xFFFF
//  616     regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
??CrossCallReturnLabel_38:
        LCALL   ?SL_SHR
        INC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
//  617     regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
??CrossCallReturnLabel_44:
        LCALL   ?SS_SHR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  618     regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
//  619     if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
??CrossCallReturnLabel_72:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x2c
        MOV     R3,#0x3
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??dmp_set_gyro_bias_4
//  620         return -1;
//  621 
//  622     regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        LCALL   ?Subroutine26 & 0xFFFF
//  623     regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
??CrossCallReturnLabel_39:
        LCALL   ?SL_SHR
        INC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
//  624     regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
??CrossCallReturnLabel_45:
        LCALL   ?SS_SHR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  625     regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
//  626     return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
??CrossCallReturnLabel_73:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x28
        MOV     R3,#0x3
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_105:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
??dmp_set_gyro_bias_5:
        MOV     A,#0x10
        LJMP    ??Subroutine47_0 & 0xFFFF
        CFI EndBlock cfiBlock19
//  627 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     A,#0x8
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25
//  628 
//  629 /**
//  630  *  @brief      Push accel biases to the DMP.
//  631  *  These biases will be removed from the DMP 6-axis quaternion.
//  632  *  @param[in]  bias    Accel biases in q16.
//  633  *  @return     0 if successful.
//  634  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  635 int dmp_set_accel_bias(long *bias)
dmp_set_accel_bias:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function dmp_set_accel_bias
        CODE
//  636 {
        FUNCALL dmp_set_accel_bias, mpu_get_accel_sens
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_accel_bias, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_accel_bias, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 26
        MOV     A,#-0x1a
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  637     long accel_bias_body[3];
//  638     unsigned char regs[12];
//  639     long long accel_sf;
//  640     unsigned short accel_sens;
//  641 
//  642     mpu_get_accel_sens(&accel_sens);
        ; Setup parameters for call to function mpu_get_accel_sens
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??mpu_get_accel_sens?relay
//  643     accel_sf = (long long)accel_sens << 15;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     A,#0xf
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
//  644     //__no_operation();
//  645 
//  646     accel_bias_body[0] = bias[dmp.orient & 3];
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL   ?XLOAD_R2345
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
//  647     if (dmp.orient & 4)
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??dmp_set_accel_bias_0
//  648         accel_bias_body[0] *= -1;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        LCALL   ?L_NEG
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
//  649     accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
??dmp_set_accel_bias_0:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
//  650     if (dmp.orient & 0x20)
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??dmp_set_accel_bias_1
//  651         accel_bias_body[1] *= -1;
        MOV     R0,#?V0 + 8
        LCALL   ?L_NEG
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
//  652     accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
??dmp_set_accel_bias_1:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  653     if (dmp.orient & 0x100)
        MOV     A,R7
        ANL     A,#0x1
        JZ      ??dmp_set_accel_bias_2
//  654         accel_bias_body[2] *= -1;
        MOV     R0,#?V0 + 0
        LCALL   ?L_NEG
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  655     printf("hello");
??dmp_set_accel_bias_2:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "hello">` & 0xff
        MOV     R3,#(`?<Constant "hello">` >> 8) & 0xff
        LCALL   ??printf?relay
//  656 #ifdef EMPL_NO_64BIT
//  657     accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
//  658     accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
//  659     accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
//  660 #else
//  661     accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     A,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  662     accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     A,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  663     accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     A,#0x1e
        MOV     R0,#?V0 + 8
        LCALL   ?SL_SHR
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
//  664 #endif
//  665 
//  666     regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  667     regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  668     regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,#0x8
        MOV     R0,#?V0 + 4
        LCALL   ?SS_SHR
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  669     regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine27 & 0xFFFF
//  670     regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
??CrossCallReturnLabel_40:
        MOV     A,#0x18
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine27 & 0xFFFF
//  671     regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
??CrossCallReturnLabel_41:
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  672     regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     A,#0x8
        MOV     R0,#?V0 + 4
        LCALL   ?SS_SHR
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  673     regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
//  674     regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
??CrossCallReturnLabel_42:
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
//  675     regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
??CrossCallReturnLabel_43:
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  676     regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
        MOV     A,#0x8
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  677     regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 8
        MOVX    @DPTR,A
//  678     return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#-0x6c
        MOV     R3,#0x2
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_106:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     A,#0x1a
        CFI EndBlock cfiBlock26
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  679 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 46)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Valid
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
        MOV     ?V0 + 2,?V0 + 10
        MOV     ?V0 + 3,?V0 + 11
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_70
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf
        ANL     A,#0xfc
        MOV     R0,A
        MOV     A,?V0 + 0
        ADD     A,R0
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        MOV     DPL,A
        MOV     A,?V0 + 1
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        MOV     A,R6
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x3
        MOV     ?V0 + 2,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        RET
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOV     DPTR,#dmp + 4
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R6
        ANL     A,#0x3
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55
//  680 
//  681 /**
//  682  *  @brief      Set DMP output rate.
//  683  *  Only used when DMP is on.
//  684  *  @param[in]  rate    Desired fifo rate (Hz).
//  685  *  @return     0 if successful.
//  686  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  687 int dmp_set_fifo_rate(unsigned short rate)
dmp_set_fifo_rate:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI Function dmp_set_fifo_rate
        CODE
//  688 {
        FUNCALL dmp_set_fifo_rate, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_fifo_rate, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  689     const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
//  690         0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {254, 242, 171, 196, 170, 241, 223,` >> 8) & 0xff
        MOV     DPL,#`?<Constant {254, 242, 171, 196, 170, 241, 223,` & 0xff
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  691     unsigned short div;
//  692     unsigned char tmp[8];
//  693 
//  694     if (rate > DMP_SAMPLE_RATE)
        CLR     C
        MOV     A,R6
        SUBB    A,#-0x37
        MOV     A,R7
        SUBB    A,#0x0
        JC      ??dmp_set_fifo_rate_0
//  695         return -1;
??dmp_set_fifo_rate_1:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        SJMP    ??CrossCallReturnLabel_47
//  696     div = DMP_SAMPLE_RATE / rate - 1;
??dmp_set_fifo_rate_0:
        MOV     R0,#-0x38
        MOV     R1,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
//  697     tmp[0] = (unsigned char)((div >> 8) & 0xFF);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  698     tmp[1] = (unsigned char)(div & 0xFF);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        LCALL   ??Subroutine44_0 & 0xFFFF
//  699     if (mpu_write_mem(D_0_22, 2, tmp))
??CrossCallReturnLabel_76:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x16
        MOV     R3,#0x2
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_107:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??dmp_set_fifo_rate_1
//  700         return -1;
//  701     if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#-0x3f
        MOV     R3,#0xa
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_108:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??dmp_set_fifo_rate_1
//  702         return -1;
//  703 
//  704     dmp.fifo_rate = rate;
        MOV     DPTR,#dmp + 8
        LCALL   ?Subroutine30 & 0xFFFF
//  705     return 0;
??CrossCallReturnLabel_47:
        MOV     A,#0x14
        LJMP    ??Subroutine43_0 & 0xFFFF
        CFI EndBlock cfiBlock56
//  706 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59
//  707 
//  708 /**
//  709  *  @brief      Get DMP output rate.
//  710  *  @param[out] rate    Current fifo rate (Hz).
//  711  *  @return     0 if successful.
//  712  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  713 int dmp_get_fifo_rate(unsigned short *rate)
dmp_get_fifo_rate:
        CFI Block cfiBlock60 Using cfiCommon0
        CFI Function dmp_get_fifo_rate
        CODE
//  714 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  715     rate[0] = dmp.fifo_rate;
        MOV     DPTR,#dmp + 8
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock60
//  716     return 0;
//  717 }
//  718 
//  719 /**
//  720  *  @brief      Set tap threshold for a specific axis.
//  721  *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
//  722  *  @param[in]  thresh  Tap threshold, in mg/ms.
//  723  *  @return     0 if successful.
//  724  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  725 int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
dmp_set_tap_thresh:
        CFI Block cfiBlock61 Using cfiCommon0
        CFI Function dmp_set_tap_thresh
        CODE
//  726 {
        FUNCALL dmp_set_tap_thresh, mpu_get_accel_fsr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_tap_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_tap_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_tap_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_tap_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_tap_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_tap_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        MOV     R6,A
//  727     unsigned char tmp[4], accel_fsr;
//  728     float scaled_thresh;
//  729     unsigned short dmp_thresh, dmp_thresh_2;
//  730     if (!(axis & TAP_XYZ) || thresh > 1600)
        MOV     A,#0x7
        ANL     A,R6
        JZ      ??dmp_set_tap_thresh_0
        CLR     C
        MOV     A,R2
        SUBB    A,#0x41
        MOV     A,R3
        SUBB    A,#0x6
        JC      ??dmp_set_tap_thresh_1
//  731         return -1;
??dmp_set_tap_thresh_0:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LJMP    ??dmp_set_tap_thresh_2 & 0xFFFF
//  732 
//  733     scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
??dmp_set_tap_thresh_1:
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_43480000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_DIV
//  734 
//  735     mpu_get_accel_fsr(&accel_fsr);
        ; Setup parameters for call to function mpu_get_accel_fsr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??mpu_get_accel_fsr?relay
//  736     switch (accel_fsr) {
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#-0x2
        JZ      ??dmp_set_tap_thresh_3
        ADD     A,#-0x2
        JZ      ??dmp_set_tap_thresh_4
        ADD     A,#-0x4
        JZ      ??dmp_set_tap_thresh_5
        ADD     A,#-0x8
        JZ      ??dmp_set_tap_thresh_6
        SJMP    ??dmp_set_tap_thresh_0
//  737     case 2:
//  738         dmp_thresh = (unsigned short)(scaled_thresh * 16384);
??dmp_set_tap_thresh_3:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     DPTR,#__Constant_46800000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  739         /* dmp_thresh * 0.75 */
//  740         dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        MOV     DPTR,#__Constant_46400000
        SJMP    ??dmp_set_tap_thresh_7
//  741         break;
//  742     case 4:
//  743         dmp_thresh = (unsigned short)(scaled_thresh * 8192);
??dmp_set_tap_thresh_4:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     DPTR,#__Constant_46000000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  744         /* dmp_thresh * 0.75 */
//  745         dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        MOV     DPTR,#__Constant_45c00000
        SJMP    ??dmp_set_tap_thresh_7
//  746         break;
//  747     case 8:
//  748         dmp_thresh = (unsigned short)(scaled_thresh * 4096);
??dmp_set_tap_thresh_5:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     DPTR,#__Constant_45800000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  749         /* dmp_thresh * 0.75 */
//  750         dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        MOV     DPTR,#__Constant_45400000
        SJMP    ??dmp_set_tap_thresh_7
//  751         break;
//  752     case 16:
//  753         dmp_thresh = (unsigned short)(scaled_thresh * 2048);
??dmp_set_tap_thresh_6:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     DPTR,#__Constant_45000000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  754         /* dmp_thresh * 0.75 */
//  755         dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        MOV     DPTR,#__Constant_44c00000
??dmp_set_tap_thresh_7:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
//  756         break;
//  757     default:
//  758         return -1;
//  759     }
//  760     tmp[0] = (unsigned char)(dmp_thresh >> 8);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  761     tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  762     tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R5
        MOVX    @DPTR,A
//  763     tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
//  764 
//  765     if (axis & TAP_X) {
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??dmp_set_tap_thresh_8
//  766         if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x2c
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_90:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
//  767             return -1;
//  768         if (mpu_write_mem(D_1_36, 2, tmp+2))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x24
        LCALL   ?Subroutine31 & 0xFFFF
//  769             return -1;
//  770     }
??CrossCallReturnLabel_91:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
//  771     if (axis & TAP_Y) {
??dmp_set_tap_thresh_8:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??dmp_set_tap_thresh_9
//  772         if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x28
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_92:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
//  773             return -1;
//  774         if (mpu_write_mem(D_1_40, 2, tmp+2))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x28
        LCALL   ?Subroutine31 & 0xFFFF
//  775             return -1;
//  776     }
??CrossCallReturnLabel_93:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
//  777     if (axis & TAP_Z) {
??dmp_set_tap_thresh_9:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.2
        JNC     ??dmp_set_tap_thresh_10
//  778         if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x24
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
//  779             return -1;
//  780         if (mpu_write_mem(D_1_44, 2, tmp+2))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x2c
        LCALL   ?Subroutine31 & 0xFFFF
//  781             return -1;
//  782     }
??CrossCallReturnLabel_95:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
//  783     return 0;
??dmp_set_tap_thresh_10:
        MOV     R2,#0x0
        MOV     R3,#0x0
??dmp_set_tap_thresh_2:
        MOV     A,#0x5
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock61
//  784 }
//  785 
//  786 /**
//  787  *  @brief      Set which axes will register a tap.
//  788  *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
//  789  *  @return     0 if successful.
//  790  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  791 int dmp_set_tap_axes(unsigned char axis)
dmp_set_tap_axes:
        CFI Block cfiBlock62 Using cfiCommon0
        CFI Function dmp_set_tap_axes
        CODE
//  792 {
        FUNCALL dmp_set_tap_axes, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
//  793     unsigned char tmp = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  794 
//  795     if (axis & TAP_X)
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??dmp_set_tap_axes_0
//  796         tmp |= 0x30;
        MOV     A,#0x30
        MOVX    @DPTR,A
//  797     if (axis & TAP_Y)
??dmp_set_tap_axes_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??dmp_set_tap_axes_1
//  798         tmp |= 0x0C;
        MOVX    A,@DPTR
        ORL     A,#0xc
        MOVX    @DPTR,A
//  799     if (axis & TAP_Z)
??dmp_set_tap_axes_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.2
        JNC     ??dmp_set_tap_axes_2
//  800         tmp |= 0x03;
        MOVX    A,@DPTR
        ORL     A,#0x3
        MOVX    @DPTR,A
//  801     return mpu_write_mem(D_1_72, 1, &tmp);
??dmp_set_tap_axes_2:
        ; Setup parameters for call to function mpu_write_mem
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x48
        CFI EndBlock cfiBlock62
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  802 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock63 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,#0x1
        SJMP    ??Subroutine43_0
        CFI EndBlock cfiBlock63
//  803 
//  804 /**
//  805  *  @brief      Set minimum number of taps needed for an interrupt.
//  806  *  @param[in]  min_taps    Minimum consecutive taps (1-4).
//  807  *  @return     0 if successful.
//  808  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  809 int dmp_set_tap_count(unsigned char min_taps)
dmp_set_tap_count:
        CFI Block cfiBlock64 Using cfiCommon0
        CFI Function dmp_set_tap_count
        CODE
//  810 {
        FUNCALL dmp_set_tap_count, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
//  811     unsigned char tmp;
//  812 
//  813     if (min_taps < 1)
        JNZ     ??dmp_set_tap_count_0
//  814         min_taps = 1;
        MOV     R6,#0x1
        SJMP    ??dmp_set_tap_count_1
//  815     else if (min_taps > 4)
??dmp_set_tap_count_0:
        CLR     C
        SUBB    A,#0x5
        JC      ??dmp_set_tap_count_1
//  816         min_taps = 4;
        MOV     R6,#0x4
//  817 
//  818     tmp = min_taps - 1;
??dmp_set_tap_count_1:
        MOV     A,#-0x1
        ADD     A,R6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  819     return mpu_write_mem(D_1_79, 1, &tmp);
        ; Setup parameters for call to function mpu_write_mem
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x4f
        SJMP    ?Subroutine4
        CFI EndBlock cfiBlock64
//  820 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0xa
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_109:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        ; Setup parameters for call to function mpu_reset_fifo
        ; Setup parameters for call to function mpu_reset_fifo
        LCALL   ??mpu_reset_fifo?relay
        CFI EndBlock cfiBlock65
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
        CFI Block cfiBlock66 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        CFI EndBlock cfiBlock66
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
        CFI Block cfiBlock67 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock67
//  821 
//  822 /**
//  823  *  @brief      Set length between valid taps.
//  824  *  @param[in]  time    Milliseconds between taps.
//  825  *  @return     0 if successful.
//  826  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  827 int dmp_set_tap_time(unsigned short time)
dmp_set_tap_time:
        CFI Block cfiBlock68 Using cfiCommon0
        CFI Function dmp_set_tap_time
        CODE
//  828 {
        FUNCALL dmp_set_tap_time, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  829     unsigned short dmp_time;
//  830     unsigned char tmp[2];
//  831 
//  832     dmp_time = time / (1000 / DMP_SAMPLE_RATE);
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
//  833     tmp[0] = (unsigned char)(dmp_time >> 8);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R1
        MOVX    @DPTR,A
//  834     tmp[1] = (unsigned char)(dmp_time & 0xFF);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        LCALL   ??Subroutine44_0 & 0xFFFF
//  835     return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
??CrossCallReturnLabel_77:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x22
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock68
//  836 }
//  837 
//  838 /**
//  839  *  @brief      Set max time between taps to register as a multi-tap.
//  840  *  @param[in]  time    Max milliseconds between taps.
//  841  *  @return     0 if successful.
//  842  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  843 int dmp_set_tap_time_multi(unsigned short time)
dmp_set_tap_time_multi:
        CFI Block cfiBlock69 Using cfiCommon0
        CFI Function dmp_set_tap_time_multi
        CODE
//  844 {
        FUNCALL dmp_set_tap_time_multi, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  845     unsigned short dmp_time;
//  846     unsigned char tmp[2];
//  847 
//  848     dmp_time = time / (1000 / DMP_SAMPLE_RATE);
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
//  849     tmp[0] = (unsigned char)(dmp_time >> 8);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R1
        MOVX    @DPTR,A
//  850     tmp[1] = (unsigned char)(dmp_time & 0xFF);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        LCALL   ??Subroutine44_0 & 0xFFFF
//  851     return mpu_write_mem(D_1_218, 2, tmp);
??CrossCallReturnLabel_78:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x26
        SJMP    ?Subroutine5
        CFI EndBlock cfiBlock69
//  852 }
//  853 
//  854 /**
//  855  *  @brief      Set shake rejection threshold.
//  856  *  If the DMP detects a gyro sample larger than @e thresh, taps are rejected.
//  857  *  @param[in]  sf      Gyro scale factor.
//  858  *  @param[in]  thresh  Gyro threshold in dps.
//  859  *  @return     0 if successful.
//  860  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  861 int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
dmp_set_shake_reject_thresh:
        CFI Block cfiBlock70 Using cfiCommon0
        CFI Function dmp_set_shake_reject_thresh
        CODE
//  862 {
        FUNCALL dmp_set_shake_reject_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  863     unsigned char tmp[4];
//  864    // long thresh_scaled = sf / 1000 * thresh;
//  865     //stm32÷±Ω”º∆À„µ√µΩ
//  866     long thresh_scaled=937000;
//  867     //printf("%ld",sf);
//  868     tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  869     //printf("%d\n",tmp[0]);
//  870     tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xe
        MOVX    @DPTR,A
//  871     //printf("%d\n",tmp[1]);
//  872     tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4c
        MOVX    @DPTR,A
//  873     //printf("%d\n",tmp[2]);
//  874     tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x28
        LCALL   ??Subroutine44_0 & 0xFFFF
//  875     //printf("%d\n",tmp[3]);
//  876     return mpu_write_mem(D_1_92, 4, tmp);
??CrossCallReturnLabel_79:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x5c
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_97:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        LJMP    ??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock70
//  877 }
//  878 
//  879 /**
//  880  *  @brief      Set shake rejection time.
//  881  *  Sets the length of time that the gyro must be outside of the threshold set
//  882  *  by @e gyro_set_shake_reject_thresh before taps are rejected. A mandatory
//  883  *  60 ms is added to this parameter.
//  884  *  @param[in]  time    Time in milliseconds.
//  885  *  @return     0 if successful.
//  886  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  887 int dmp_set_shake_reject_time(unsigned short time)
dmp_set_shake_reject_time:
        CFI Block cfiBlock71 Using cfiCommon0
        CFI Function dmp_set_shake_reject_time
        CODE
//  888 {
        FUNCALL dmp_set_shake_reject_time, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  889     unsigned char tmp[2];
//  890 
//  891     time /= (1000 / DMP_SAMPLE_RATE);
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
//  892     tmp[0] = time >> 8;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R1
        MOVX    @DPTR,A
//  893     tmp[1] = time & 0xFF;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        LCALL   ??Subroutine44_0 & 0xFFFF
//  894     return mpu_write_mem(D_1_90,2,tmp);
??CrossCallReturnLabel_80:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x5a
        CFI EndBlock cfiBlock71
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
//  895 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock72 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_98:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,#0x2
        LJMP    ??Subroutine43_0 & 0xFFFF
        CFI EndBlock cfiBlock72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond73 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_72
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker76 Using cfiCommon1
        CFI (cfiPicker76) NoFunction
        CFI (cfiPicker76) Picker
        MOV     A,?V0 + 4
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiPicker76
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine44_0:
        CFI Block cfiCond77 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker89 Using cfiCommon1
        CFI (cfiPicker89) NoFunction
        CFI (cfiPicker89) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiPicker89
//  896 
//  897 /**
//  898  *  @brief      Set shake rejection timeout.
//  899  *  Sets the length of time after a shake rejection that the gyro must stay
//  900  *  inside of the threshold before taps can be detected again. A mandatory
//  901  *  60 ms is added to this parameter.
//  902  *  @param[in]  time    Time in milliseconds.
//  903  *  @return     0 if successful.
//  904  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  905 int dmp_set_shake_reject_timeout(unsigned short time)
dmp_set_shake_reject_timeout:
        CFI Block cfiBlock90 Using cfiCommon0
        CFI Function dmp_set_shake_reject_timeout
        CODE
//  906 {
        FUNCALL dmp_set_shake_reject_timeout, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  907     unsigned char tmp[2];
//  908 
//  909     time /= (1000 / DMP_SAMPLE_RATE);
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
//  910     tmp[0] = time >> 8;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R1
        MOVX    @DPTR,A
//  911     tmp[1] = time & 0xFF;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        LCALL   ??Subroutine44_0 & 0xFFFF
//  912     return mpu_write_mem(D_1_88,2,tmp);
??CrossCallReturnLabel_81:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x58
        SJMP    ?Subroutine5
        CFI EndBlock cfiBlock90
//  913 }
//  914 
//  915 /**
//  916  *  @brief      Get current step count.
//  917  *  @param[out] count   Number of steps detected.
//  918  *  @return     0 if successful.
//  919  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  920 int dmp_get_pedometer_step_count(unsigned long *count)
dmp_get_pedometer_step_count:
        CFI Block cfiBlock91 Using cfiCommon0
        CFI Function dmp_get_pedometer_step_count
        CODE
//  921 {
        FUNCALL dmp_get_pedometer_step_count, mpu_read_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  922     unsigned char tmp[4];
//  923     if (!count)
        MOV     A,R6
        ORL     A,R7
        JNZ     ??dmp_get_pedometer_step_count_0
//  924         return -1;
??dmp_get_pedometer_step_count_1:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        SJMP    ??dmp_get_pedometer_step_count_2
//  925 
//  926     if (mpu_read_mem(D_PEDSTD_STEPCTR, 4, tmp))
??dmp_get_pedometer_step_count_0:
        ; Setup parameters for call to function mpu_read_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x60
        MOV     R3,#0x3
        LCALL   ??mpu_read_mem?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??dmp_get_pedometer_step_count_1
//  927         return -1;
//  928 
//  929     count[0] = ((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
//  930         ((unsigned long)tmp[2] << 8) | tmp[3];
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_88:
        LCALL   ?L_SHL
        INC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?L_IOR
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  931     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
??dmp_get_pedometer_step_count_2:
        SJMP    ??Subroutine46_0
        CFI EndBlock cfiBlock91
//  932 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond92 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_88
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine45_0:
        CFI Block cfiCond95 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker98 Using cfiCommon1
        CFI (cfiPicker98) NoFunction
        CFI (cfiPicker98) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiPicker98
//  933 
//  934 /**
//  935  *  @brief      Overwrite current step count.
//  936  *  WARNING: This function writes to DMP memory and could potentially encounter
//  937  *  a race condition if called while the pedometer is enabled.
//  938  *  @param[in]  count   New step count.
//  939  *  @return     0 if successful.
//  940  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock99 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0x3
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_110:
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock99
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine46_0:
        CFI Block cfiBlock100 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        CFI EndBlock cfiBlock100
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine47_0:
        CFI Block cfiBlock101 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock101

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  941 int dmp_set_pedometer_step_count(unsigned long count)
dmp_set_pedometer_step_count:
        CFI Block cfiBlock102 Using cfiCommon0
        CFI Function dmp_set_pedometer_step_count
        CODE
//  942 {
        FUNCALL dmp_set_pedometer_step_count, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  943     unsigned char tmp[4];
//  944 
//  945     tmp[0] = (unsigned char)((count >> 24) & 0xFF);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R5
        MOVX    @DPTR,A
//  946     tmp[1] = (unsigned char)((count >> 16) & 0xFF);
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
//  947     tmp[2] = (unsigned char)((count >> 8) & 0xFF);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  948     tmp[3] = (unsigned char)(count & 0xFF);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        LCALL   ??Subroutine44_0 & 0xFFFF
//  949     return mpu_write_mem(D_PEDSTD_STEPCTR, 4, tmp);
??CrossCallReturnLabel_82:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x60
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock102
//  950 }
//  951 
//  952 /**
//  953  *  @brief      Get duration of walking time.
//  954  *  @param[in]  time    Walk time in milliseconds.
//  955  *  @return     0 if successful.
//  956  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  957 int dmp_get_pedometer_walk_time(unsigned long *time)
dmp_get_pedometer_walk_time:
        CFI Block cfiBlock103 Using cfiCommon0
        CFI Function dmp_get_pedometer_walk_time
        CODE
//  958 {
        FUNCALL dmp_get_pedometer_walk_time, mpu_read_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  959     unsigned char tmp[4];
//  960     if (!time)
        MOV     A,R6
        ORL     A,R7
        JNZ     ??dmp_get_pedometer_walk_time_0
//  961         return -1;
??dmp_get_pedometer_walk_time_1:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        SJMP    ??dmp_get_pedometer_walk_time_2
//  962 
//  963     if (mpu_read_mem(D_PEDSTD_TIMECTR, 4, tmp))
??dmp_get_pedometer_walk_time_0:
        ; Setup parameters for call to function mpu_read_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x3c
        MOV     R3,#0x3
        LCALL   ??mpu_read_mem?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??dmp_get_pedometer_walk_time_1
//  964         return -1;
//  965 
//  966     time[0] = (((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
//  967         ((unsigned long)tmp[2] << 8) | tmp[3]) * 20;
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_89:
        LCALL   ?L_SHL
        INC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   ?L_IOR
        MOV     DPTR,#__Constant_14
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  968     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
??dmp_get_pedometer_walk_time_2:
        LJMP    ??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock103
//  969 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker107 Using cfiCommon1
        CFI (cfiPicker107) NoFunction
        CFI (cfiPicker107) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        RET
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiPicker107

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond108 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond110) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond110) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond110) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker111 Using cfiCommon1
        CFI (cfiPicker111) NoFunction
        CFI (cfiPicker111) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 6,A
        MOV     A,#0x8
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiPicker111

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond112 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker115 Using cfiCommon1
        CFI (cfiPicker115) NoFunction
        CFI (cfiPicker115) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiPicker115
//  970 
//  971 /**
//  972  *  @brief      Overwrite current walk time.
//  973  *  WARNING: This function writes to DMP memory and could potentially encounter
//  974  *  a race condition if called while the pedometer is enabled.
//  975  *  @param[in]  time    New walk time in milliseconds.
//  976  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  977 int dmp_set_pedometer_walk_time(unsigned long time)
dmp_set_pedometer_walk_time:
        CFI Block cfiBlock116 Using cfiCommon0
        CFI Function dmp_set_pedometer_walk_time
        CODE
//  978 {
        FUNCALL dmp_set_pedometer_walk_time, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  979     unsigned char tmp[4];
//  980 
//  981     time /= 20;
        MOV     DPTR,#__Constant_14
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
//  982 
//  983     tmp[0] = (unsigned char)((time >> 24) & 0xFF);
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        LCALL   ?Subroutine33 & 0xFFFF
//  984     tmp[1] = (unsigned char)((time >> 16) & 0xFF);
??CrossCallReturnLabel_49:
        MOV     ?V0 + 3,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  985     tmp[2] = (unsigned char)((time >> 8) & 0xFF);
        MOV     ?V0 + 1,?V0 + 5
        MOV     A,?V0 + 1
        MOV     ?V0 + 0,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  986     tmp[3] = (unsigned char)(time & 0xFF);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
//  987     return mpu_write_mem(D_PEDSTD_TIMECTR, 4, tmp);
??CrossCallReturnLabel_74:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x3c
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock116
//  988 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond117 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_39
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        RET
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120
//  989 
//  990 /**
//  991  *  @brief      Enable DMP features.
//  992  *  The following \#define's are used in the input mask:
//  993  *  \n DMP_FEATURE_TAP
//  994  *  \n DMP_FEATURE_ANDROID_ORIENT
//  995  *  \n DMP_FEATURE_LP_QUAT
//  996  *  \n DMP_FEATURE_6X_LP_QUAT
//  997  *  \n DMP_FEATURE_GYRO_CAL
//  998  *  \n DMP_FEATURE_SEND_RAW_ACCEL
//  999  *  \n DMP_FEATURE_SEND_RAW_GYRO
// 1000  *  \n NOTE: DMP_FEATURE_LP_QUAT and DMP_FEATURE_6X_LP_QUAT are mutually
// 1001  *  exclusive.
// 1002  *  \n NOTE: DMP_FEATURE_SEND_RAW_GYRO and DMP_FEATURE_SEND_CAL_GYRO are also
// 1003  *  mutually exclusive.
// 1004  *  @param[in]  mask    Mask of features to enable.
// 1005  *  @return     0 if successful.
// 1006  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1007 int dmp_enable_feature(unsigned short mask)
dmp_enable_feature:
        CFI Block cfiBlock121 Using cfiCommon0
        CFI Function dmp_enable_feature
        CODE
// 1008 {
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_enable_gyro_cal
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_enable_gyro_cal
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_tap_thresh
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_tap_axes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_tap_count
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_tap_time
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_tap_time_multi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_shake_reject_thresh
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_shake_reject_time
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_shake_reject_timeout
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_enable_lp_quat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_enable_lp_quat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_enable_6x_lp_quat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_enable_6x_lp_quat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_reset_fifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1009     unsigned char tmp[10];
// 1010 
// 1011     /* TODO: All of these settings can probably be integrated into the default
// 1012      * DMP image.
// 1013      */
// 1014     /* Set integration scale factor. */
// 1015 //   tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
// 1016 //    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
// 1017 //    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
// 1018 //    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
// 1019     //stm32º∆À„µ√≥ˆµƒΩ·π˚÷±Ω”–¥»Î
// 1020     tmp[0] = 0x02;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1021     tmp[1] = 0xCA;
        DEC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x36
        MOVX    @DPTR,A
// 1022     tmp[2] = 0xE3;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1d
        MOVX    @DPTR,A
// 1023     tmp[3] = 0x09;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x9
        LCALL   ??Subroutine44_0 & 0xFFFF
// 1024     mpu_write_mem(D_0_104, 4, tmp);
??CrossCallReturnLabel_83:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x68
        MOV     R3,#0x0
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_111:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1025 
// 1026     /* Send sensor data to the FIFO. */
// 1027     tmp[0] = 0xA3;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1028     if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
        MOV     A,R6
        ANL     A,#0x40
        MOV     ?V0 + 3,A
        JZ      ??dmp_enable_feature_0
// 1029         tmp[1] = 0xC0;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x40
        MOVX    @DPTR,A
// 1030         tmp[2] = 0xC8;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x38
        MOVX    @DPTR,A
// 1031         tmp[3] = 0xC2;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x3e
        SJMP    ??dmp_enable_feature_1
// 1032     } else {
// 1033         tmp[1] = 0xA3;
??dmp_enable_feature_0:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1034         tmp[2] = 0xA3;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1035         tmp[3] = 0xA3;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
??dmp_enable_feature_1:
        MOVX    @DPTR,A
// 1036     }
// 1037     if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        MOV     A,R6
        ANL     A,#0x80
        MOV     ?V0 + 0,A
        MOV     A,R7
        ANL     A,#0x1
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??dmp_enable_feature_2
// 1038         tmp[4] = 0xC4;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x3c
        MOVX    @DPTR,A
// 1039         tmp[5] = 0xCC;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x34
        MOVX    @DPTR,A
// 1040         tmp[6] = 0xC6;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x3a
        SJMP    ??dmp_enable_feature_3
// 1041     } else {
// 1042         tmp[4] = 0xA3;
??dmp_enable_feature_2:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1043         tmp[5] = 0xA3;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1044         tmp[6] = 0xA3;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
??dmp_enable_feature_3:
        MOVX    @DPTR,A
// 1045     }
// 1046     tmp[7] = 0xA3;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1047     tmp[8] = 0xA3;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1048     tmp[9] = 0xA3;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        LCALL   ?Subroutine32 & 0xFFFF
// 1049     mpu_write_mem(CFG_15,10,tmp);
??CrossCallReturnLabel_85:
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R2,#-0x59
        MOV     R3,#0xa
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_112:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1050 
// 1051     /* Send gesture data to the FIFO. */
// 1052     if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        MOV     A,R6
        ANL     A,#0x3
        MOV     ?V0 + 2,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JZ      ??dmp_enable_feature_4
// 1053         tmp[0] = DINA20;
        MOV     A,#0x20
        SJMP    ??dmp_enable_feature_5
// 1054     else
// 1055         tmp[0] = 0xD8;
??dmp_enable_feature_4:
        MOV     A,#-0x28
??dmp_enable_feature_5:
        MOVX    @DPTR,A
// 1056     mpu_write_mem(CFG_27,1,tmp);
        ; Setup parameters for call to function mpu_write_mem
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x4a
        MOV     R3,#0xa
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_113:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1057 
// 1058     if (mask & DMP_FEATURE_GYRO_CAL)
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??dmp_enable_feature_6
// 1059         dmp_enable_gyro_cal(1);
        ; Setup parameters for call to function dmp_enable_gyro_cal
        MOV     R1,#0x1
        SJMP    ??dmp_enable_feature_7
// 1060     else
// 1061         dmp_enable_gyro_cal(0);
??dmp_enable_feature_6:
        ; Setup parameters for call to function dmp_enable_gyro_cal
        MOV     R1,#0x0
??dmp_enable_feature_7:
        LCALL   ??dmp_enable_gyro_cal?relay
// 1062 
// 1063     if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??dmp_enable_feature_8
// 1064         if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
        MOV     A,R7
        ANL     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JZ      ??dmp_enable_feature_9
// 1065             tmp[0] = 0xB2;
        MOV     A,#-0x4e
        MOVX    @DPTR,A
// 1066             tmp[1] = 0x8B;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x75
        MOVX    @DPTR,A
// 1067             tmp[2] = 0xB6;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x4a
        MOVX    @DPTR,A
// 1068             tmp[3] = 0x9B;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x65
        SJMP    ??dmp_enable_feature_10
// 1069         } else {
// 1070             tmp[0] = DINAC0;
??dmp_enable_feature_9:
        MOV     A,#-0x50
        MOVX    @DPTR,A
// 1071             tmp[1] = DINA80;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
// 1072             tmp[2] = DINAC2;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x4c
        MOVX    @DPTR,A
// 1073             tmp[3] = DINA90;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x70
??dmp_enable_feature_10:
        MOVX    @DPTR,A
// 1074         }
// 1075         mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
        ; Setup parameters for call to function mpu_write_mem
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x5e
        MOV     R3,#0xa
        LCALL   ??Subroutine48_0 & 0xFFFF
// 1076     }
??CrossCallReturnLabel_114:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1077 
// 1078     if (mask & DMP_FEATURE_TAP) {
??dmp_enable_feature_8:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNC     ??dmp_enable_feature_11
// 1079         /* Enable tap. */
// 1080         tmp[0] = 0xF8;
        MOV     A,#-0x8
        MOVX    @DPTR,A
// 1081         mpu_write_mem(CFG_20, 1, tmp);
        ; Setup parameters for call to function mpu_write_mem
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x50
        MOV     R3,#0x8
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_115:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1082         dmp_set_tap_thresh(TAP_XYZ, 250);
        ; Setup parameters for call to function dmp_set_tap_thresh
        MOV     R2,#-0x6
        MOV     R3,#0x0
        MOV     R1,#0x7
        LCALL   ??dmp_set_tap_thresh?relay
// 1083         dmp_set_tap_axes(TAP_XYZ);
        ; Setup parameters for call to function dmp_set_tap_axes
        MOV     R1,#0x7
        LCALL   ??dmp_set_tap_axes?relay
// 1084         dmp_set_tap_count(1);
        ; Setup parameters for call to function dmp_set_tap_count
        MOV     R1,#0x1
        LCALL   ??dmp_set_tap_count?relay
// 1085         dmp_set_tap_time(100);
        ; Setup parameters for call to function dmp_set_tap_time
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??dmp_set_tap_time?relay
// 1086         dmp_set_tap_time_multi(500);
        ; Setup parameters for call to function dmp_set_tap_time_multi
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??dmp_set_tap_time_multi?relay
// 1087 
// 1088         //dmp_set_shake_reject_thresh(GYRO_SF, 200);
// 1089         dmp_set_shake_reject_thresh(46850825, 200);
        ; Setup parameters for call to function dmp_set_shake_reject_thresh
        MOV     ?V0 + 4,#-0x38
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     DPTR,#__Constant_2cae309
        LCALL   ?XLOAD_R2345
        LCALL   ??dmp_set_shake_reject_thresh?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1090         dmp_set_shake_reject_time(40);
        ; Setup parameters for call to function dmp_set_shake_reject_time
        MOV     R2,#0x28
        MOV     R3,#0x0
        LCALL   ??dmp_set_shake_reject_time?relay
// 1091         dmp_set_shake_reject_timeout(10);
        ; Setup parameters for call to function dmp_set_shake_reject_timeout
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??dmp_set_shake_reject_timeout?relay
        SJMP    ??dmp_enable_feature_12
// 1092     } else {
// 1093         tmp[0] = 0xD8;
??dmp_enable_feature_11:
        MOV     A,#-0x28
        MOVX    @DPTR,A
// 1094         mpu_write_mem(CFG_20, 1, tmp);
        ; Setup parameters for call to function mpu_write_mem
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x50
        MOV     R3,#0x8
        LCALL   ??Subroutine48_0 & 0xFFFF
// 1095     }
??CrossCallReturnLabel_116:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1096 
// 1097     if (mask & DMP_FEATURE_ANDROID_ORIENT) {
??dmp_enable_feature_12:
        MOV     A,R6
        ANL     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JZ      ??dmp_enable_feature_13
// 1098         tmp[0] = 0xD9;
        MOV     A,#-0x27
        SJMP    ??dmp_enable_feature_14
// 1099     } else
// 1100         tmp[0] = 0xD8;
??dmp_enable_feature_13:
        MOV     A,#-0x28
??dmp_enable_feature_14:
        MOVX    @DPTR,A
// 1101     mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
        ; Setup parameters for call to function mpu_write_mem
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x3d
        MOV     R3,#0x7
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_117:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1102 
// 1103     if (mask & DMP_FEATURE_LP_QUAT)
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??dmp_enable_feature_15
// 1104         dmp_enable_lp_quat(1);
        ; Setup parameters for call to function dmp_enable_lp_quat
        MOV     R1,#0x1
        SJMP    ??dmp_enable_feature_16
// 1105     else
// 1106         dmp_enable_lp_quat(0);
??dmp_enable_feature_15:
        ; Setup parameters for call to function dmp_enable_lp_quat
        MOV     R1,#0x0
??dmp_enable_feature_16:
        LCALL   ??dmp_enable_lp_quat?relay
// 1107 
// 1108     if (mask & DMP_FEATURE_6X_LP_QUAT)
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??dmp_enable_feature_17
// 1109         dmp_enable_6x_lp_quat(1);
        ; Setup parameters for call to function dmp_enable_6x_lp_quat
        MOV     R1,#0x1
        SJMP    ??dmp_enable_feature_18
// 1110     else
// 1111         dmp_enable_6x_lp_quat(0);
??dmp_enable_feature_17:
        ; Setup parameters for call to function dmp_enable_6x_lp_quat
        MOV     R1,#0x0
??dmp_enable_feature_18:
        LCALL   ??dmp_enable_6x_lp_quat?relay
// 1112 
// 1113     /* Pedometer is always enabled. */
// 1114     dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
        MOV     A,R6
        ORL     A,#0x8
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     DPTR,#dmp + 6
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1115     mpu_reset_fifo();
        ; Setup parameters for call to function mpu_reset_fifo
        LCALL   ??mpu_reset_fifo?relay
// 1116 
// 1117     dmp.packet_length = 0;
        MOV     DPTR,#dmp + 10
        CLR     A
        MOVX    @DPTR,A
// 1118     if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        MOV     A,?V0 + 3
        JZ      ??dmp_enable_feature_19
// 1119         dmp.packet_length += 6;
        MOV     A,#0x6
        MOVX    @DPTR,A
// 1120     if (mask & DMP_FEATURE_SEND_ANY_GYRO)
??dmp_enable_feature_19:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??dmp_enable_feature_20
// 1121         dmp.packet_length += 6;
        MOVX    A,@DPTR
        ADD     A,#0x6
        MOVX    @DPTR,A
// 1122     if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
??dmp_enable_feature_20:
        MOV     A,R6
        ANL     A,#0x14
        JZ      ??dmp_enable_feature_21
// 1123         dmp.packet_length += 16;
        MOVX    A,@DPTR
        ADD     A,#0x10
        MOVX    @DPTR,A
// 1124     if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
??dmp_enable_feature_21:
        MOV     A,?V0 + 2
        JZ      ??dmp_enable_feature_22
// 1125         dmp.packet_length += 4;
        MOVX    A,@DPTR
        ADD     A,#0x4
        MOVX    @DPTR,A
// 1126 
// 1127     return 0;
??dmp_enable_feature_22:
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock121
// 1128 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond122 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_72
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_73
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_74
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_75
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_76
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_77
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_78
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_79
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_80
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_81
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_82
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_83
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_10
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond135) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond135) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond135) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond135) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond135) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_11
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond136) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond136) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond136) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond136) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker137 Using cfiCommon1
        CFI (cfiPicker137) NoFunction
        CFI (cfiPicker137) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiPicker137

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond138 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_90
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_91
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond140) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond141) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond141) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_97
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker151 Using cfiCommon1
        CFI (cfiPicker151) NoFunction
        CFI (cfiPicker151) Picker
        MOV     R3,#0x1
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiPicker151
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine48_0:
        CFI Block cfiCond152 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_99
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_100
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond159) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond159) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+0
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_111
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_113
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_116
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_118
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_91
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond176) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond176) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond177) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond178) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond178) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond178) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond178) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond178) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond178) CFA_SP SP+0
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond179) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond179) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond180) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_97
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+0
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker188 Using cfiCommon1
        CFI (cfiPicker188) NoFunction
        CFI (cfiPicker188) Picker
        LCALL   ??mpu_write_mem?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiPicker188
// 1129 
// 1130 /**
// 1131  *  @brief      Get list of currently enabled DMP features.
// 1132  *  @param[out] Mask of enabled features.
// 1133  *  @return     0 if successful.
// 1134  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1135 int dmp_get_enabled_features(unsigned short *mask)
dmp_get_enabled_features:
        CFI Block cfiBlock189 Using cfiCommon0
        CFI Function dmp_get_enabled_features
        CODE
// 1136 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1137     mask[0] = dmp.feature_mask;
        MOV     DPTR,#dmp + 6
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock189
// 1138     return 0;
// 1139 }
// 1140 
// 1141 /**
// 1142  *  @brief      Calibrate the gyro data in the DMP.
// 1143  *  After eight seconds of no motion, the DMP will compute gyro biases and
// 1144  *  subtract them from the quaternion output. If @e dmp_enable_feature is
// 1145  *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
// 1146  *  subtracted from the gyro output.
// 1147  *  @param[in]  enable  1 to enable gyro calibration.
// 1148  *  @return     0 if successful.
// 1149  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1150 int dmp_enable_gyro_cal(unsigned char enable)
dmp_enable_gyro_cal:
        CFI Block cfiBlock190 Using cfiCommon0
        CFI Function dmp_enable_gyro_cal
        CODE
// 1151 {
        FUNCALL dmp_enable_gyro_cal, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_gyro_cal, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
// 1152     if (enable) {
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        JZ      ??dmp_enable_gyro_cal_0
// 1153         unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
        MOV     DPH,#(`?<Constant {184, 170, 179, 141, 180, 152, 13, ` >> 8) & 0xff
        MOV     DPL,#`?<Constant {184, 170, 179, 141, 180, 152, 13, ` & 0xff
        SJMP    ??dmp_enable_gyro_cal_1
// 1154         return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
// 1155     } else {
// 1156         unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
??dmp_enable_gyro_cal_0:
        MOV     DPH,#(`?<Constant {184, 170, 170, 170, 176, 136, 195,` >> 8) & 0xff
        MOV     DPL,#`?<Constant {184, 170, 170, 170, 176, 136, 195,` & 0xff
??dmp_enable_gyro_cal_1:
        MOV     A,#0x9
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1157         return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     R2,#-0x48
        MOV     R3,#0x4
        LCALL   ??Subroutine48_0 & 0xFFFF
// 1158     }
??CrossCallReturnLabel_118:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,#0x9
        LJMP    ??Subroutine43_0 & 0xFFFF
        CFI EndBlock cfiBlock190
// 1159 }
// 1160 
// 1161 /**
// 1162  *  @brief      Generate 3-axis quaternions from the DMP.
// 1163  *  In this driver, the 3-axis and 6-axis DMP quaternion features are mutually
// 1164  *  exclusive.
// 1165  *  @param[in]  enable  1 to enable 3-axis quaternion.
// 1166  *  @return     0 if successful.
// 1167  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1168 int dmp_enable_lp_quat(unsigned char enable)
dmp_enable_lp_quat:
        CFI Block cfiBlock191 Using cfiCommon0
        CFI Function dmp_enable_lp_quat
        CODE
// 1169 {
        FUNCALL dmp_enable_lp_quat, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_lp_quat, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_lp_quat, mpu_reset_fifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
// 1170     unsigned char regs[4];
// 1171     if (enable) {
        JZ      ??dmp_enable_lp_quat_0
// 1172         regs[0] = DINBC0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x40
        MOVX    @DPTR,A
// 1173         regs[1] = DINBC2;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x3e
        MOVX    @DPTR,A
// 1174         regs[2] = DINBC4;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x3c
        MOVX    @DPTR,A
// 1175         regs[3] = DINBC6;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x3a
        MOVX    @DPTR,A
        SJMP    ??dmp_enable_lp_quat_1
// 1176     }
// 1177     else
// 1178         memset(regs, 0x8B, 4);
??dmp_enable_lp_quat_0:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#-0x75
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
// 1179 
// 1180     mpu_write_mem(CFG_LP_QUAT, 4, regs);
??dmp_enable_lp_quat_1:
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x68
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock191
// 1181 
// 1182     return mpu_reset_fifo();
// 1183 }
// 1184 
// 1185 /**
// 1186  *  @brief       Generate 6-axis quaternions from the DMP.
// 1187  *  In this driver, the 3-axis and 6-axis DMP quaternion features are mutually
// 1188  *  exclusive.
// 1189  *  @param[in]   enable  1 to enable 6-axis quaternion.
// 1190  *  @return      0 if successful.
// 1191  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1192 int dmp_enable_6x_lp_quat(unsigned char enable)
dmp_enable_6x_lp_quat:
        CFI Block cfiBlock192 Using cfiCommon0
        CFI Function dmp_enable_6x_lp_quat
        CODE
// 1193 {
        FUNCALL dmp_enable_6x_lp_quat, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_6x_lp_quat, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_6x_lp_quat, mpu_reset_fifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
// 1194     unsigned char regs[4];
// 1195     if (enable) {
        JZ      ??dmp_enable_6x_lp_quat_0
// 1196         regs[0] = DINA20;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x20
        MOVX    @DPTR,A
// 1197         regs[1] = DINA28;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x28
        MOVX    @DPTR,A
// 1198         regs[2] = DINA30;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x30
        MOVX    @DPTR,A
// 1199         regs[3] = DINA38;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x38
        MOVX    @DPTR,A
        SJMP    ??dmp_enable_6x_lp_quat_1
// 1200     } else
// 1201         memset(regs, 0xA3, 4);
??dmp_enable_6x_lp_quat_0:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#-0x5d
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
// 1202 
// 1203     mpu_write_mem(CFG_8, 4, regs);
??dmp_enable_6x_lp_quat_1:
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x62
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock192
// 1204 
// 1205     return mpu_reset_fifo();
// 1206 }
// 1207 
// 1208 /**
// 1209  *  @brief      Decode the four-byte gesture data and execute any callbacks.
// 1210  *  @param[in]  gesture Gesture data from DMP packet.
// 1211  *  @return     0 if successful.
// 1212  */
// 1213 static int decode_gesture(unsigned char *gesture)
// 1214 {
// 1215     unsigned char tap, android_orient;
// 1216 
// 1217     android_orient = gesture[3] & 0xC0;
// 1218     tap = 0x3F & gesture[3];
// 1219 
// 1220     if (gesture[1] & INT_SRC_TAP) {
// 1221         unsigned char direction, count;
// 1222         direction = tap >> 3;
// 1223         count = (tap % 8) + 1;
// 1224         if (dmp.tap_cb)
// 1225             dmp.tap_cb(direction, count);
// 1226     }
// 1227 
// 1228     if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
// 1229         if (dmp.android_orient_cb)
// 1230             dmp.android_orient_cb(android_orient >> 6);
// 1231     }
// 1232 
// 1233     return 0;
// 1234 }
// 1235 
// 1236 /**
// 1237  *  @brief      Specify when a DMP interrupt should occur.
// 1238  *  A DMP interrupt can be configured to trigger on either of the two
// 1239  *  conditions below:
// 1240  *  \n a. One FIFO period has elapsed (set by @e mpu_set_sample_rate).
// 1241  *  \n b. A tap event has been detected.
// 1242  *  @param[in]  mode    DMP_INT_GESTURE or DMP_INT_CONTINUOUS.
// 1243  *  @return     0 if successful.
// 1244  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1245 int dmp_set_interrupt_mode(unsigned char mode)
dmp_set_interrupt_mode:
        CFI Block cfiBlock193 Using cfiCommon0
        CFI Function dmp_set_interrupt_mode
        CODE
// 1246 {
        FUNCALL dmp_set_interrupt_mode, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_interrupt_mode, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        MOV     R6,A
// 1247     const unsigned char regs_continuous[11] =
// 1248         {0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9};
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {216, 177, 185, 243, 139, 163, 145,` >> 8) & 0xff
        MOV     DPL,#`?<Constant {216, 177, 185, 243, 139, 163, 145,` & 0xff
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1249     const unsigned char regs_gesture[11] =
// 1250         {0xda, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0xda, 0xb4, 0xda};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {218, 177, 185, 243, 139, 163, 145,` >> 8) & 0xff
        MOV     DPL,#`?<Constant {218, 177, 185, 243, 139, 163, 145,` & 0xff
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1251 
// 1252     switch (mode) {
        MOV     A,R6
        DEC     A
        JZ      ??dmp_set_interrupt_mode_0
        DEC     A
        JNZ     ??dmp_set_interrupt_mode_1
// 1253     case DMP_INT_CONTINUOUS:
// 1254         return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
// 1255             (unsigned char*)regs_continuous);
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
??dmp_set_interrupt_mode_2:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0xb
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0xa
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_119:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        SJMP    ??dmp_set_interrupt_mode_3
// 1256     case DMP_INT_GESTURE:
// 1257         return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
// 1258             (unsigned char*)regs_gesture);
??dmp_set_interrupt_mode_0:
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??dmp_set_interrupt_mode_2
// 1259     default:
// 1260         return -1;
??dmp_set_interrupt_mode_1:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
??dmp_set_interrupt_mode_3:
        MOV     A,#0x16
// 1261     }
        LJMP    ??Subroutine43_0 & 0xFFFF
        CFI EndBlock cfiBlock193
// 1262 }
// 1263 
// 1264 /**
// 1265  *  @brief      Get one packet from the FIFO.
// 1266  *  If @e sensors does not contain a particular sensor, disregard the data
// 1267  *  returned to that pointer.
// 1268  *  \n @e sensors can contain a combination of the following flags:
// 1269  *  \n INV_X_GYRO, INV_Y_GYRO, INV_Z_GYRO
// 1270  *  \n INV_XYZ_GYRO
// 1271  *  \n INV_XYZ_ACCEL
// 1272  *  \n INV_WXYZ_QUAT
// 1273  *  \n If the FIFO has no new data, @e sensors will be zero.
// 1274  *  \n If the FIFO is disabled, @e sensors will be zero and this function will
// 1275  *  return a non-zero error code.
// 1276  *  @param[out] gyro        Gyro data in hardware units.
// 1277  *  @param[out] accel       Accel data in hardware units.
// 1278  *  @param[out] quat        3-axis quaternion data in hardware units.
// 1279  *  @param[out] timestamp   Timestamp in milliseconds.
// 1280  *  @param[out] sensors     Mask of sensors read from FIFO.
// 1281  *  @param[out] more        Number of remaining packets.
// 1282  *  @return     0 if successful.
// 1283  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1284 int dmp_read_fifo(short *gyro, short *accel, long *quat,
dmp_read_fifo:
        CFI Block cfiBlock194 Using cfiCommon0
        CFI Function dmp_read_fifo
        CODE
// 1285     unsigned long *timestamp, short *sensors, unsigned char *more)
// 1286 {
        FUNCALL dmp_read_fifo, mpu_read_fifo_stream
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 83, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_read_fifo, mpu_reset_fifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 57
        MOV     A,#-0x39
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 81)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x57
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
// 1287     unsigned char fifo_data[MAX_PACKET_LENGTH];
// 1288     unsigned char ii = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
// 1289 
// 1290     /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
// 1291      * cache this value and save some cycles.
// 1292      */
// 1293     sensors[0] = 0;
        MOV     A,#0x55
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
// 1294 
// 1295     /* Get a packet. */
// 1296     if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
??CrossCallReturnLabel_28:
        ; Setup parameters for call to function mpu_read_fifo_stream
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 83)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPTR,#dmp + 10
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??mpu_read_fifo_stream?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 81)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??dmp_read_fifo_0
// 1297         return -1;
??dmp_read_fifo_1:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LJMP    ??dmp_read_fifo_2 & 0xFFFF
// 1298 
// 1299     /* Parse DMP packet. */
// 1300     if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
??dmp_read_fifo_0:
        MOV     DPTR,#dmp + 6
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R6
        ANL     A,#0x14
        JNZ     $+5
        LJMP    ??dmp_read_fifo_3 & 0xFFFF
// 1301 #ifdef FIFO_CORRUPTION_CHECK
// 1302         long quat_q14[4], quat_mag_sq;
// 1303 #endif
// 1304         quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
// 1305             ((long)fifo_data[2] << 8) | fifo_data[3];
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_87:
        LCALL   ?L_SHL
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ?L_IOR
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R2345
        MOV     A,#0x51
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_121:
        LCALL   ?XSTORE_R2345
// 1306         quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
// 1307             ((long)fifo_data[6] << 8) | fifo_data[7];
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     A,#0x18
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x51
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 1308         quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
// 1309             ((long)fifo_data[10] << 8) | fifo_data[11];
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        CLR     A
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     A,#0x18
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x51
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_31:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
// 1310         quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
// 1311             ((long)fifo_data[14] << 8) | fifo_data[15];
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        CLR     A
        MOV     ?V0 + 13,A
        MOV     ?V0 + 14,A
        MOV     ?V0 + 15,A
        MOV     A,#0x18
        MOV     R0,#?V0 + 12
        LCALL   ?L_SHL
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x51
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0xc
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
// 1312         ii += 16;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x10
        MOVX    @DPTR,A
// 1313 #ifdef FIFO_CORRUPTION_CHECK
// 1314         /* We can detect a corrupted FIFO by monitoring the quaternion data and
// 1315          * ensuring that the magnitude is always normalized to one. This
// 1316          * shouldn't happen in normal operation, but if an I2C error occurs,
// 1317          * the FIFO reads might become misaligned.
// 1318          *
// 1319          * Let's start by scaling down the quaternion data to avoid long long
// 1320          * math.
// 1321          */
// 1322         quat_q14[0] = quat[0] >> 16;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0x29
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
// 1323         quat_q14[1] = quat[1] >> 16;
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 1324         quat_q14[2] = quat[2] >> 16;
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
        MOV     ?V0 + 2,?V0 + 10
        MOV     ?V0 + 3,?V0 + 11
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
        MOV     A,#0x10
        MOV     R0,#?V0 + 8
        LCALL   ?SL_SHR
        MOV     A,#0x31
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
// 1325         quat_q14[3] = quat[3] >> 16;
        MOV     A,#0x10
        MOV     R0,#?V0 + 12
        LCALL   ?SL_SHR
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
// 1326         quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
// 1327             quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
// 1328         if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
// 1329             (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
        MOV     A,#0x29
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x29
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        MOV     ?V0 + 8,?V0 + 4
        MOV     ?V0 + 9,?V0 + 5
        MOV     ?V0 + 10,?V0 + 6
        MOV     ?V0 + 11,?V0 + 7
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_ADD
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_ADD
        MOV     ?V0 + 4,?V0 + 12
        MOV     ?V0 + 5,?V0 + 13
        MOV     ?V0 + 6,?V0 + 14
        MOV     ?V0 + 7,?V0 + 15
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?L_MUL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     DPTR,#__Constant_f1000000
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     DPTR,#__Constant_2000001
        MOV     R0,#?V0 + 0
        LCALL   ?UL_GE_X
        JNC     ??dmp_read_fifo_4
// 1330             /* Quaternion is outside of the acceptable threshold. */
// 1331             mpu_reset_fifo();
        ; Setup parameters for call to function mpu_reset_fifo
        LCALL   ??mpu_reset_fifo?relay
// 1332             sensors[0] = 0;
        MOV     A,#0x55
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
// 1333             return -1;
??CrossCallReturnLabel_29:
        LJMP    ??dmp_read_fifo_1 & 0xFFFF
// 1334         }
// 1335         sensors[0] |= INV_WXYZ_QUAT;
??dmp_read_fifo_4:
        MOV     A,#0x55
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
// 1336 #endif
// 1337     }
??CrossCallReturnLabel_122:
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x1
        MOVX    @DPTR,A
// 1338 
// 1339     if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
??dmp_read_fifo_3:
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??dmp_read_fifo_5
// 1340         accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
// 1341         accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
// 1342         accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
// 1343         ii += 6;
// 1344         sensors[0] |= INV_XYZ_ACCEL;
// 1345     }
??CrossCallReturnLabel_0:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_123:
        MOVX    A,@DPTR
        ORL     A,#0x8
        MOVX    @DPTR,A
// 1346 
// 1347     if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
??dmp_read_fifo_5:
        MOV     A,R6
        ANL     A,#0x80
        MOV     R0,A
        MOV     A,R7
        ANL     A,#0x1
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??dmp_read_fifo_6
// 1348         gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
// 1349         gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
// 1350         gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
// 1351         ii += 6;
// 1352         sensors[0] |= INV_XYZ_GYRO;
// 1353     }
??CrossCallReturnLabel_1:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_124:
        MOVX    A,@DPTR
        ORL     A,#0x70
        MOVX    @DPTR,A
// 1354 
// 1355     /* Gesture data is at the end of the DMP packet. Parse it and call
// 1356      * the gesture callbacks (if registered).
// 1357      */
// 1358     if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
??dmp_read_fifo_6:
        MOV     A,R6
        ANL     A,#0x3
        JZ      ??dmp_read_fifo_7
// 1359         decode_gesture(fifo_data + ii);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_52:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#-0x40
        ANL     A,R2
        MOV     ?V0 + 0,A
        MOV     A,#0x3f
        ANL     A,R2
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??dmp_read_fifo_8
        MOV     DPTR,#dmp
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??dmp_read_fifo_8
        ; Setup parameters for indirect call
        MOV     A,#0x7
        ANL     A,R3
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,R3
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        MOV     R1,A
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_120:
        LCALL   ?CALL_IND
??dmp_read_fifo_8:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??dmp_read_fifo_7
        MOV     DPTR,#dmp + 2
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??dmp_read_fifo_7
        ; Setup parameters for indirect call
        MOV     A,?V0 + 0
        SWAP    A
        RRC     A
        RRC     A
        ANL     A,#0x3
        MOV     R1,A
        LCALL   ?CALL_IND
// 1360 
// 1361 //    get_ms(timestamp);
// 1362     return 0;
??dmp_read_fifo_7:
        MOV     R2,#0x0
        MOV     R3,#0x0
??dmp_read_fifo_2:
        MOV     A,#0x39
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock194
// 1363 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond195 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_121
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond196 Using cfiCommon0
        CFI (cfiCond196) NoFunction
        CFI (cfiCond196) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond196) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond196) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond196) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond196) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond196) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond196) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond196) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond196) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond196) CFA_SP SP+0
        CFI (cfiCond196) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond197) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond197) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond197) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond197) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond197) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_124
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond198) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond198) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond198) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond198) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond198) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker199 Using cfiCommon1
        CFI (cfiPicker199) NoFunction
        CFI (cfiPicker199) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        CFI EndBlock cfiCond195
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiPicker199
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine49_0:
        CFI Block cfiCond200 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_120
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond201) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond201) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond201) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond201) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond201) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond201) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond202) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond202) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond202) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond202) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond202) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond203) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond203) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond203) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond203) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond203) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond203) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_124
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond204) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond204) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond204) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond204) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond204) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond204) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker205 Using cfiCommon1
        CFI (cfiPicker205) NoFunction
        CFI (cfiPicker205) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiPicker205

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond206 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond207) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond207) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond207) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond207) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond207) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond207) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker208 Using cfiCommon1
        CFI (cfiPicker208) NoFunction
        CFI (cfiPicker208) Picker
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_57:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiPicker208

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond209 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond210 Using cfiCommon0
        CFI (cfiCond210) NoFunction
        CFI (cfiCond210) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond210) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond210) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond210) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond210) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond210) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond210) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond210) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond210) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond210) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond210) CFA_SP SP+0
        CFI (cfiCond210) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker211 Using cfiCommon1
        CFI (cfiPicker211) NoFunction
        CFI (cfiPicker211) Picker
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_56:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond209
        CFI EndBlock cfiCond210
        CFI EndBlock cfiPicker211

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond212 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_31
        CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond213) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond213) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond213) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond213) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond213) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond213) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond213) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond213) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond213) CFA_SP SP+0
        CFI (cfiCond213) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond214 Using cfiCommon0
        CFI (cfiCond214) NoFunction
        CFI (cfiCond214) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_28
        CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond214) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond214) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond214) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond214) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond214) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond214) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond214) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond214) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond214) CFA_SP SP+0
        CFI (cfiCond214) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond215 Using cfiCommon0
        CFI (cfiCond215) NoFunction
        CFI (cfiCond215) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_29
        CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond215) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond215) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond215) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond215) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond215) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond215) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond215) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond215) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond215) CFA_SP SP+0
        CFI (cfiCond215) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker216 Using cfiCommon1
        CFI (cfiPicker216) NoFunction
        CFI (cfiPicker216) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiCond214
        CFI EndBlock cfiCond215
        CFI EndBlock cfiPicker216

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond217 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond218 Using cfiCommon0
        CFI (cfiCond218) NoFunction
        CFI (cfiCond218) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond218) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond218) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond218) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond218) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond218) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond218) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond218) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond218) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond218) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond218) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond218) CFA_SP SP+0
        CFI (cfiCond218) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond219 Using cfiCommon0
        CFI (cfiCond219) NoFunction
        CFI (cfiCond219) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond219) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond219) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond219) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond219) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond219) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond219) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond219) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond219) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond219) CFA_SP SP+0
        CFI (cfiCond219) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond220 Using cfiCommon0
        CFI (cfiCond220) NoFunction
        CFI (cfiCond220) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond220) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond220) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond220) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond220) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond220) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond220) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond220) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond220) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond220) CFA_SP SP+0
        CFI (cfiCond220) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker221 Using cfiCommon1
        CFI (cfiPicker221) NoFunction
        CFI (cfiPicker221) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond217
        CFI EndBlock cfiCond218
        CFI EndBlock cfiCond219
        CFI EndBlock cfiCond220
        CFI EndBlock cfiPicker221

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond222 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond223 Using cfiCommon0
        CFI (cfiCond223) NoFunction
        CFI (cfiCond223) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond223) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond223) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond223) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond223) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond223) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond223) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond223) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond223) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond223) CFA_SP SP+0
        CFI (cfiCond223) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond224 Using cfiCommon0
        CFI (cfiCond224) NoFunction
        CFI (cfiCond224) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond224) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond224) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond224) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond224) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond224) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond224) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond224) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond224) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond224) CFA_SP SP+0
        CFI (cfiCond224) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker225 Using cfiCommon1
        CFI (cfiPicker225) NoFunction
        CFI (cfiPicker225) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     A,#0x8
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond222
        CFI EndBlock cfiCond223
        CFI EndBlock cfiCond224
        CFI EndBlock cfiPicker225

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond226 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond227 Using cfiCommon0
        CFI (cfiCond227) NoFunction
        CFI (cfiCond227) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond227) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond227) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond227) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond227) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond227) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond227) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond227) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond227) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond227) CFA_SP SP+0
        CFI (cfiCond227) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker228 Using cfiCommon1
        CFI (cfiPicker228) NoFunction
        CFI (cfiPicker228) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_86:
        MOVX    A,@DPTR
        ADD     A,#0x6
        MOVX    @DPTR,A
        MOV     A,#0x55
        RET
        CFI EndBlock cfiCond226
        CFI EndBlock cfiCond227
        CFI EndBlock cfiPicker228

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond229 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond230) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond230) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond230) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond230) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond230) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond230) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker231 Using cfiCommon1
        CFI (cfiPicker231) NoFunction
        CFI (cfiPicker231) Picker
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_55:
        MOVX    A,@DPTR
        MOV     R2,A
        RET
        CFI EndBlock cfiCond229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiPicker231

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond232 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond233) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond233) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond233) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond233) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond233) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond233) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond233) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond233) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond233) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond233) CFA_SP SP+0
        CFI (cfiCond233) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker234 Using cfiCommon1
        CFI (cfiPicker234) NoFunction
        CFI (cfiPicker234) Picker
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_58:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_51:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_54:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        RET
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiPicker234

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond235 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_9
        CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond236) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond236) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond236) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond236) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond236) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond236) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond236) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond236) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond236) CFA_SP SP+0
        CFI (cfiCond236) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_6
        CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond237) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond237) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond237) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond237) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond237) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond237) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond237) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond237) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond237) CFA_SP SP+0
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_7
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond238) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond238) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond238) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond238) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond238) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond238) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker239 Using cfiCommon1
        CFI (cfiPicker239) NoFunction
        CFI (cfiPicker239) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R4
        RET
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiPicker239

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond240 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond241 Using cfiCommon0
        CFI (cfiCond241) NoFunction
        CFI (cfiCond241) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_9
        CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond241) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond241) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond241) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond241) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond241) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond241) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond241) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond241) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond241) CFA_SP SP+0
        CFI (cfiCond241) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_6
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond242) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond242) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond242) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond242) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond242) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond242) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond243 Using cfiCommon0
        CFI (cfiCond243) NoFunction
        CFI (cfiCond243) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_7
        CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond243) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond243) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond243) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond243) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond243) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond243) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond243) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond243) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond243) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond243) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond243) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond243) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond243) CFA_SP SP+0
        CFI (cfiCond243) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker244 Using cfiCommon1
        CFI (cfiPicker244) NoFunction
        CFI (cfiPicker244) Picker
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond240
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiCond243
        CFI EndBlock cfiPicker244

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond245 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond246 Using cfiCommon0
        CFI (cfiCond246) NoFunction
        CFI (cfiCond246) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_9
        CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond246) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond246) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond246) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond246) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond246) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond246) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond246) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond246) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond246) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond246) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond246) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond246) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond246) CFA_SP SP+0
        CFI (cfiCond246) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond247 Using cfiCommon0
        CFI (cfiCond247) NoFunction
        CFI (cfiCond247) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_6
        CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond247) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond247) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond247) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond247) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond247) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond247) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond247) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond247) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond247) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond247) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond247) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond247) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond247) CFA_SP SP+0
        CFI (cfiCond247) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond248 Using cfiCommon0
        CFI (cfiCond248) NoFunction
        CFI (cfiCond248) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_7
        CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond248) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond248) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond248) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond248) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond248) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond248) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond248) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond248) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond248) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond248) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond248) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond248) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond248) CFA_SP SP+0
        CFI (cfiCond248) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker249 Using cfiCommon1
        CFI (cfiPicker249) NoFunction
        CFI (cfiPicker249) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond245
        CFI EndBlock cfiCond246
        CFI EndBlock cfiCond247
        CFI EndBlock cfiCond248
        CFI EndBlock cfiPicker249

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond250 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond251 Using cfiCommon0
        CFI (cfiCond251) NoFunction
        CFI (cfiCond251) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond251) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond251) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond251) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond251) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond251) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond251) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond251) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond251) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond251) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond251) CFA_SP SP+0
        CFI (cfiCond251) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker252 Using cfiCommon1
        CFI (cfiPicker252) NoFunction
        CFI (cfiPicker252) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_53:
        MOVX    A,@DPTR
        MOV     R3,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        RET
        CFI EndBlock cfiCond250
        CFI EndBlock cfiCond251
        CFI EndBlock cfiPicker252

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond253 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond254 Using cfiCommon0
        CFI (cfiCond254) NoFunction
        CFI (cfiCond254) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_0
        CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond254) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond254) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond254) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond254) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond254) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond254) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond254) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond254) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond254) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond254) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond254) CFA_SP SP+0
        CFI (cfiCond254) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond255 Using cfiCommon0
        CFI (cfiCond255) NoFunction
        CFI (cfiCond255) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_1
        CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond255) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond255) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond255) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond255) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond255) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond255) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond255) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond255) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond255) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond255) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond255) CFA_SP SP+0
        CFI (cfiCond255) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiPicker256 Using cfiCommon1
        CFI (cfiPicker256) NoFunction
        CFI (cfiPicker256) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond253
        CFI EndBlock cfiCond254
        CFI EndBlock cfiCond255
        CFI EndBlock cfiPicker256
// 1364 
// 1365 /**
// 1366  *  @brief      Register a function to be executed on a tap event.
// 1367  *  The tap direction is represented by one of the following:
// 1368  *  \n TAP_X_UP
// 1369  *  \n TAP_X_DOWN
// 1370  *  \n TAP_Y_UP
// 1371  *  \n TAP_Y_DOWN
// 1372  *  \n TAP_Z_UP
// 1373  *  \n TAP_Z_DOWN
// 1374  *  @param[in]  func    Callback function.
// 1375  *  @return     0 if successful.
// 1376  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1377 int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
dmp_register_tap_cb:
        CFI Block cfiBlock257 Using cfiCommon0
        CFI Function dmp_register_tap_cb
        CODE
// 1378 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1379     dmp.tap_cb = func;
        MOV     DPTR,#dmp
        CFI EndBlock cfiBlock257
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
// 1380     return 0;
// 1381 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiBlock258 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??Subroutine50_0
        CFI EndBlock cfiBlock258

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock259 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        CFI EndBlock cfiBlock259
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine50_0:
        CFI Block cfiBlock260 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock260
// 1382 
// 1383 /**
// 1384  *  @brief      Register a function to be executed on a android orientation event.
// 1385  *  @param[in]  func    Callback function.
// 1386  *  @return     0 if successful.
// 1387  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1388 int dmp_register_android_orient_cb(void (*func)(unsigned char))
dmp_register_android_orient_cb:
        CFI Block cfiBlock261 Using cfiCommon0
        CFI Function dmp_register_android_orient_cb
        CODE
// 1389 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1390     dmp.android_orient_cb = func;
        MOV     DPTR,#dmp + 2
        SJMP    ?Subroutine6
        CFI EndBlock cfiBlock261
// 1391     return 0;
// 1392 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_load_motion_driver_firmware?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_load_motion_driver_firmware

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_orientation?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_orientation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_gyro_bias?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_gyro_bias

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_accel_bias?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_accel_bias

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_fifo_rate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_fifo_rate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_get_fifo_rate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_get_fifo_rate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_tap_thresh?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_tap_thresh

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_tap_axes?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_tap_axes

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_tap_count?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_tap_count

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_tap_time?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_tap_time

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_tap_time_multi?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_tap_time_multi

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_shake_reject_thresh?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_shake_reject_thresh

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_shake_reject_time?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_shake_reject_time

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_shake_reject_timeout?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_shake_reject_timeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_get_pedometer_step_count?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_get_pedometer_step_count

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_pedometer_step_count?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_pedometer_step_count

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_get_pedometer_walk_time?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_get_pedometer_walk_time

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_pedometer_walk_time?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_pedometer_walk_time

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_enable_feature?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_enable_feature

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_get_enabled_features?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_get_enabled_features

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_enable_gyro_cal?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_enable_gyro_cal

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_enable_lp_quat?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_enable_lp_quat

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_enable_6x_lp_quat?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_enable_6x_lp_quat

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_interrupt_mode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_interrupt_mode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_read_fifo?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_read_fifo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_register_tap_cb?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_register_tap_cb

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_register_android_orient_cb?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_register_android_orient_cb

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {76, 205, 108}>`:
        DB 76
        DB 205
        DB 108

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {12, 201, 44}>`:
        DB 12
        DB 201
        DB 44

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {54, 86, 118}>`:
        DB 54
        DB 86
        DB 118

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {38, 70, 102}>`:
        DB 38
        DB 70
        DB 102

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "hello">`:
        DB "hello"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {254, 242, 171, 196, 170, 241, 223,`:
        DB 254
        DB 242
        DB 171
        DB 196
        DB 170
        DB 241
        DB 223
        DB 223
        DB 187
        DB 175
        DB 223
        DB 223

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {184, 170, 179, 141, 180, 152, 13, `:
        DB 184
        DB 170
        DB 179
        DB 141
        DB 180
        DB 152
        DB 13
        DB 53
        DB 93

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {184, 170, 170, 170, 176, 136, 195,`:
        DB 184
        DB 170
        DB 170
        DB 170
        DB 176
        DB 136
        DB 195
        DB 197
        DB 199

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {216, 177, 185, 243, 139, 163, 145,`:
        DB 216
        DB 177
        DB 185
        DB 243
        DB 139
        DB 163
        DB 145
        DB 182
        DB 9
        DB 180
        DB 217

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {218, 177, 185, 243, 139, 163, 145,`:
        DB 218
        DB 177
        DB 185
        DB 243
        DB 139
        DB 163
        DB 145
        DB 182
        DB 218
        DB 180
        DB 218

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_43480000:
        DD 43480000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_46800000:
        DD 46800000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_46400000:
        DD 46400000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_46000000:
        DD 46000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_45c00000:
        DD 45C00000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_45800000:
        DD 45800000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_45400000:
        DD 45400000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_45000000:
        DD 45000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_44c00000:
        DD 44C00000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_14:
        DD 20

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2cae309:
        DD 46850825

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_f1000000:
        DD 4043309056

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2000001:
        DD 33554433

        END
// 1393 
// 1394 /**
// 1395  *  @}
// 1396  */
// 1397 
// 
// 5 729 bytes in segment BANKED_CODE
//   162 bytes in segment BANK_RELAYS
// 3 184 bytes in segment XDATA_ROM_C
//    11 bytes in segment XDATA_Z
// 
// 5 891 bytes of CODE  memory
// 3 132 bytes of CONST memory (+ 52 bytes shared)
//    11 bytes of XDATA memory
//
//Errors: none
//Warnings: none
