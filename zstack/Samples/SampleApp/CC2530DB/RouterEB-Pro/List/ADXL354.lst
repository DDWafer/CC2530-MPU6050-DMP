###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         25/Dec/2018  15:25:49 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\Source\ADXL354.c                                #
#    Command line       =  -f F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú #
#                          \ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.c #
#                          fg (-DCPU32MHZ -DROOT=__near_func                  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK         #
#                          -DBLINK_LEDS) -f F:\key_pro\AAAAAgraduation_projec #
#                          t\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530 #
#                          DB\f8wConfig.cfg (-DSECURE=0                       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\Source\ADXL354.c -D ZIGBEEPRO -D ZTOOL_P1 -D    #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -D STM32F10X_MD -D             #
#                          USE_STDPERIPH_DRIVER -lC                           #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\RouterEB-Pro\List\ -lA                 #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\RouterEB-Pro\List\ --diag_suppress     #
#                          Pe001,Pa010 -o F:\key_pro\AAAAAgraduation_project\ #
#                          Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\ -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú #
#                          \ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\ -I F:\key_pro\AAAAAgraduation_proj #
#                          ect\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\SOURCE\ -I       #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I            #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I       #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ #
#                           -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– #
#                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530EB\ -I F:\key_pro\AAAAAgraduation_project #
#                          \Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\OSAL\MCU\CCSOC\ -I F:\key_pro\AAAAAgraduation_ #
#                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\OSAL\INCLUDE\ -I                        #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\    #
#                          -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú #
#                          \ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK #
#                          \ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã #
#                          –Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S #
#                          EC\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥ #
#                          ≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK #
#                          \SAPI\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œ #
#                          µÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ST #
#                          ACK\SYS\ -I F:\key_pro\AAAAAgraduation_project\Ωªª #
#                          •œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\ZDO\ -I F:\key_pro\AAAAAgraduation_project\Ω #
#                          ªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\ -I F:\key_pro\AAAAAgraduation_project\ #
#                          Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\ZMAC\ -I F:\key_pro\AAAAAgraduation_project\Ωªª #
#                          •œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          SERVICES\SADDR\ -I F:\key_pro\AAAAAgraduation_proj #
#                          ect\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\ -I                          #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ #
#                           -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– #
#                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\ -I F:\key_pro\AAAAAgraduation_project\Ωªª• #
#                          œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\M #
#                          AC\LOW_LEVEL\srf04\ -I F:\key_pro\AAAAAgraduation_ #
#                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I     #
#                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\..\..\..\ -Ohz          #
#    List file          =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\RouterEB-Pro\List\ADXL354.lst          #
#    Object file        =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ #
#                          ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\RouterEB-Pro\Obj\ADXL354.r51           #
#                                                                             #
#                                                                             #
###############################################################################

F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleApp\Source\ADXL354.c
      1          #include <ioCC2530.h>

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc1
   \   unsigned char volatile __sfr U0DBUF
   \                     U0DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
      2          #include <delay.h>
      3          #include <iic.h>
      4          #include <inv_mpu.h>
      5          #include <inv_mpu_dmp_motion_driver.h>
      6          #include <math.h>
      7          #include <stdio.h>
      8          /*∫Í≥£¡ø∂®“Â*/
      9          
     10          #define uint unsigned int 
     11          #define uchar unsigned char
     12          
     13          #define IIC_SCL P1_4
     14          #define IIC_SDA P1_3
     15          #define IIC_INT2 P1_2
     16          #define IIC_INT1 P1_1
     17          
     18          /*∫Í∫Ø ˝∂®“Â*/
     19          #define SDA_IN()  {P1DIR &= ~(0x01<<3);}  //IIC_SDA≈‰÷√Œ™ ‰»ÎΩ≈ ƒ¨»œ…œ¿≠
     20          #define SDA_OUT() {P1DIR |= 0x01<<3; }
     21          #define SCL_OUT() {P1DIR |= 0x01<<4; }
     22          /*MPU6050≈‰÷√≤Œ ˝*/

   \                                 In  segment XDATA_I, align 1, keep-with-next
     23          static signed char gyro_orientation[9] = {-1, 0, 0,
   \                     gyro_orientation:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for gyro_orientation>`
   \   000009                REQUIRE __INIT_XDATA_I
     24                                                     0,-1, 0,
     25                                                     0, 0, 1};

   \                                 In  segment XDATA_I, align 1, keep-with-next
     26          float q0=1.0f,q1=0.0f,q2=0.0f,q3=0.0f;
   \                     q0:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for q0>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     q1:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     q2:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     q3:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     27          float Pitch,Roll,Yaw;
   \                     Pitch:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     Roll:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     Yaw:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     28          unsigned long sensor_timestamp;
   \                     sensor_timestamp:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     29          short gyro[3], accel[3], sensors;
   \                     gyro:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     accel:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     sensors:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     30          unsigned char more;
   \                     more:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     31          long quat[4];
   \                     quat:
   \   000000                DS 16
   \   000010                REQUIRE __INIT_XDATA_Z
     32          /*∫Ø ˝…˘√˜*/
     33          void Delay_us(uint t);
     34          //void delay_ms(uint t);
     35          
     36          /*∫Ø ˝∂®“Â*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     37          void Delay_us(uint t)   //—” ± t us
   \                     Delay_us:
     38          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     39            uint i = 0;
     40            for(i=0;i<t;i++)
   \   000000   7800         MOV     R0,#0x0
   \   000002   7900         MOV     R1,#0x0
   \   000004   8009         SJMP    ??Delay_us_0
     41            {
     42                asm("NOP");
   \                     ??Delay_us_1:
   \   000006   00           NOP
     43            }
   \   000007   E8           MOV     A,R0
   \   000008   2401         ADD     A,#0x1
   \   00000A   08           INC     R0
   \   00000B   E9           MOV     A,R1
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   F9           MOV     R1,A
   \                     ??Delay_us_0:
   \   00000F   C3           CLR     C
   \   000010   E8           MOV     A,R0
   \   000011   9A           SUBB    A,R2
   \   000012   E9           MOV     A,R1
   \   000013   9B           SUBB    A,R3
   \   000014   40F0         JC      ??Delay_us_1
     44          }
   \   000016   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     45          void delay_ms(uint t)  // —” ± t ms
   \                     delay_ms:
     46          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
     47            uint i = 0;
     48            for(i=0; i<t ; i++)
   \   000009   7E00         MOV     R6,#0x0
   \   00000B   7F00         MOV     R7,#0x0
   \   00000D   800F         SJMP    ??delay_ms_0
     49              Delay_us(1000);
   \                     ??delay_ms_1:
   \   00000F                ; Setup parameters for call to function Delay_us
   \   00000F   7AE8         MOV     R2,#-0x18
   \   000011   7B03         MOV     R3,#0x3
   \   000013   12....       LCALL   ??Delay_us?relay
   \   000016   EE           MOV     A,R6
   \   000017   2401         ADD     A,#0x1
   \   000019   0E           INC     R6
   \   00001A   EF           MOV     A,R7
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   FF           MOV     R7,A
   \                     ??delay_ms_0:
   \   00001E   C3           CLR     C
   \   00001F   EE           MOV     A,R6
   \   000020   95..         SUBB    A,?V0 + 0
   \   000022   EF           MOV     A,R7
   \   000023   95..         SUBB    A,?V0 + 1
   \   000025   40E8         JC      ??delay_ms_1
     50          }
   \   000027                REQUIRE ?Subroutine1
   \   000027                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
     51          
     52          //IIC–≠“È≈‰÷√
     53          //≥ı ºªØIIC

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     54          void IIC_Init_IO(void)
   \                     IIC_Init_IO:
     55          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     56            SCL_OUT();
   \   000000   43FE10       ORL     0xfe,#0x10
     57            SDA_OUT();
   \   000003   43FE08       ORL     0xfe,#0x8
     58          }
   \   000006   02....       LJMP    ?BRET
   \   000009                REQUIRE P1DIR
     59          
     60          //IICø™ º–≈∫≈

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     61          void IIC_Start(void)
   \                     IIC_Start:
     62          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     63            SDA_OUT();
   \   000004   43FE08       ORL     0xfe,#0x8
     64            IIC_SDA = 1;
   \   000007   D293         SETB    0x90.3
     65            IIC_SCL = 1;
   \   000009   D294         SETB    0x90.4
     66            Delay_us(4);
   \   00000B                ; Setup parameters for call to function Delay_us
   \   00000B   7A04         MOV     R2,#0x4
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   ??Delay_us?relay
     67            IIC_SDA = 0;
   \   000012   C293         CLR     0x90.3
     68            Delay_us(4);
   \   000014                ; Setup parameters for call to function Delay_us
   \   000014   7A04         MOV     R2,#0x4
   \   000016   80..         SJMP    ??Subroutine9_0
   \   000018                REQUIRE P1DIR
   \   000018                REQUIRE _A_P1
     69            IIC_SCL = 0;
     70          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??Delay_us?relay
   \   000005   C294         CLR     0x90.4
   \   000007                REQUIRE ??Subroutine10_0
   \   000007                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
     71          //IICÕ£÷π–≈∫≈

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          void IIC_Stop(void)
   \                     IIC_Stop:
     73          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     74            SDA_OUT();
   \   000004   43FE08       ORL     0xfe,#0x8
     75            IIC_SCL = 0;
   \   000007   C294         CLR     0x90.4
     76            IIC_SDA = 0;
   \   000009   C293         CLR     0x90.3
     77            Delay_us(4);
   \   00000B                ; Setup parameters for call to function Delay_us
   \   00000B   7A04         MOV     R2,#0x4
   \   00000D   12....       LCALL   ??Subroutine11_0 & 0xFFFF
     78            IIC_SCL = 1;
     79            IIC_SDA = 1;
   \                     ??CrossCallReturnLabel_9:
   \   000010   D293         SETB    0x90.3
     80            Delay_us(4);
   \   000012                ; Setup parameters for call to function Delay_us
   \   000012   7A04         MOV     R2,#0x4
   \   000014   7B00         MOV     R3,#0x0
   \   000016   12....       LCALL   ??Delay_us?relay
     81          }
   \   000019   80..         SJMP    ??Subroutine10_0
   \   00001B                REQUIRE P1DIR
   \   00001B                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??Delay_us?relay
   \   000005   D294         SETB    0x90.4
   \   000007   22           RET
     82          //IIC µ»¥˝”¶¥–≈∫≈
     83          // ∑µªÿ÷µ £∫ 1£∫”¶¥ ß∞‹  0£∫ ”¶¥≥…π¶

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     84          uchar IIC_Wait_Ack(void )
   \                     IIC_Wait_Ack:
     85          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     86            uint ErrTime = 0;
     87            SDA_IN();
   \   000004   53FEF7       ANL     0xfe,#0xf7
     88            Delay_us(1);
   \   000007                ; Setup parameters for call to function Delay_us
   \   000007   7A01         MOV     R2,#0x1
   \   000009   12....       LCALL   ??Subroutine11_0 & 0xFFFF
     89            IIC_SCL=1;Delay_us(1);
   \                     ??CrossCallReturnLabel_10:
   \   00000C                ; Setup parameters for call to function Delay_us
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   12....       LCALL   ??Delay_us?relay
   \   000013   74FB         MOV     A,#-0x5
     90            while(IIC_SDA)
   \                     ??IIC_Wait_Ack_0:
   \   000015   A293         MOV     C,0x90.3
   \   000017   500A         JNC     ??IIC_Wait_Ack_1
     91            {
     92              ErrTime++;
     93              if(ErrTime > 250)
   \   000019   14           DEC     A
   \   00001A   70F9         JNZ     ??IIC_Wait_Ack_0
     94              {
     95                IIC_Stop();
   \   00001C                ; Setup parameters for call to function IIC_Stop
   \   00001C   12....       LCALL   ??IIC_Stop?relay
     96                return 1;
   \   00001F   7901         MOV     R1,#0x1
   \   000021   8004         SJMP    ??IIC_Wait_Ack_2
     97              }
     98            }
     99            IIC_SCL = 0;
   \                     ??IIC_Wait_Ack_1:
   \   000023   C294         CLR     0x90.4
    100            return 0;
   \   000025   7900         MOV     R1,#0x0
   \                     ??IIC_Wait_Ack_2:
   \   000027   80..         SJMP    ??Subroutine10_0
   \   000029                REQUIRE P1DIR
   \   000029                REQUIRE _A_P1
    101          }
    102          //IIC≤˙…˙ACK”¶¥

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000003                ; Setup parameters for call to function Delay_us
   \   000003                ; Setup parameters for call to function Delay_us
   \   000003   7A02         MOV     R2,#0x2
   \   000005                REQUIRE ??Subroutine9_0
   \   000005                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7A02         MOV     R2,#0x2
   \   000002                REQUIRE ??Subroutine11_0
   \   000002                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    103          void IIC_Ack(void)
   \                     IIC_Ack:
    104          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    105            IIC_SCL = 0;
   \   000004   C294         CLR     0x90.4
    106            SDA_OUT();
   \   000006   43FE08       ORL     0xfe,#0x8
    107            IIC_SDA = 0;
   \   000009   C293         CLR     0x90.3
    108            Delay_us(2);
   \   00000B                ; Setup parameters for call to function Delay_us
   \   00000B   80..         SJMP    ?Subroutine0
   \   00000D                REQUIRE _A_P1
   \   00000D                REQUIRE P1DIR
    109            IIC_SCL = 1;
    110            Delay_us(2);
    111            IIC_SCL = 0;
    112          }
    113          //IIC ≤ª≤˙…˙Ack ”¶¥

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    114          void IIC_Nack(void)
   \                     IIC_Nack:
    115          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    116            IIC_SCL = 0;
   \   000004   C294         CLR     0x90.4
    117            SDA_OUT();
   \   000006   43FE08       ORL     0xfe,#0x8
    118            IIC_SDA = 1;
   \   000009   D293         SETB    0x90.3
    119            Delay_us(2);
   \   00000B                ; Setup parameters for call to function Delay_us
   \   00000B   80..         SJMP    ?Subroutine0
   \   00000D                REQUIRE _A_P1
   \   00000D                REQUIRE P1DIR
    120            IIC_SCL = 1;
    121            Delay_us(2);
    122            IIC_SCL = 0;
    123          }
    124          //IIC ∑¢ÀÕ“ª∏ˆ◊÷Ω⁄  txd

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    125          void IIC_Send_Byte(uchar txd)
   \                     IIC_Send_Byte:
    126          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    127            uchar t;
    128            SDA_OUT();
   \   000007   43FE08       ORL     0xfe,#0x8
    129            IIC_SCL = 0;  //¿≠µÕ ±÷”–≈∫≈£¨ø™ º ˝æ›¥´ ‰
   \   00000A   C294         CLR     0x90.4
    130            for(t=0;t<8;t++)
   \   00000C   7E08         MOV     R6,#0x8
    131            {
    132              IIC_SDA = (txd & 0x80)>>7;
   \                     ??IIC_Send_Byte_0:
   \   00000E   EF           MOV     A,R7
   \   00000F   A2E7         MOV     C,0xE0 /* A   */.7
   \   000011   9293         MOV     0x90.3,C
    133              txd <<= 1;
   \   000013   C3           CLR     C
   \   000014   33           RLC     A
   \   000015   FF           MOV     R7,A
    134              Delay_us(2);
   \   000016                ; Setup parameters for call to function Delay_us
   \   000016   12....       LCALL   ?Subroutine7 & 0xFFFF
    135              IIC_SCL = 1;
    136              Delay_us(2);
   \                     ??CrossCallReturnLabel_7:
   \   000019                ; Setup parameters for call to function Delay_us
   \   000019   7A02         MOV     R2,#0x2
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   ??Delay_us?relay
    137              IIC_SCL = 0;
   \   000020   C294         CLR     0x90.4
    138              Delay_us(2);
   \   000022                ; Setup parameters for call to function Delay_us
   \   000022   7A02         MOV     R2,#0x2
   \   000024   7B00         MOV     R3,#0x0
   \   000026   12....       LCALL   ??Delay_us?relay
    139            }
   \   000029   1E           DEC     R6
   \   00002A   EE           MOV     A,R6
   \   00002B   70E1         JNZ     ??IIC_Send_Byte_0
    140          }
   \   00002D   80..         SJMP    ??Subroutine12_0
   \   00002F                REQUIRE P1DIR
   \   00002F                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    141          //IIC ∂¡»°“ª∏ˆ◊÷Ω⁄ 
    142          // ≤Œ ˝ ack: 1:∑¢ÀÕAck  0: ∑¢ÀÕNack

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    143          uchar IIC_Read_Byte(void)
   \                     IIC_Read_Byte:
    144          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    145            uchar i=0, receive=0;
   \   000005   7E00         MOV     R6,#0x0
    146            SDA_IN();
   \   000007   53FEF7       ANL     0xfe,#0xf7
    147            for(i=0;i<8;i++)
   \   00000A   7F08         MOV     R7,#0x8
    148            {
    149              IIC_SCL = 0;
   \                     ??IIC_Read_Byte_0:
   \   00000C   C294         CLR     0x90.4
    150              Delay_us(2);
   \   00000E                ; Setup parameters for call to function Delay_us
   \   00000E   12....       LCALL   ?Subroutine7 & 0xFFFF
    151              IIC_SCL = 1;
    152              receive <<= 1;
   \                     ??CrossCallReturnLabel_8:
   \   000011   EE           MOV     A,R6
   \   000012   C3           CLR     C
   \   000013   33           RLC     A
   \   000014   FE           MOV     R6,A
    153              if(IIC_SDA)
   \   000015   A293         MOV     C,0x90.3
   \   000017   5001         JNC     ??IIC_Read_Byte_1
    154                receive++;
   \   000019   0E           INC     R6
    155              Delay_us(1);
   \                     ??IIC_Read_Byte_1:
   \   00001A                ; Setup parameters for call to function Delay_us
   \   00001A   7A01         MOV     R2,#0x1
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   ??Delay_us?relay
    156            }
   \   000021   1F           DEC     R7
   \   000022   EF           MOV     A,R7
   \   000023   70E7         JNZ     ??IIC_Read_Byte_0
    157          //  if(!ack)
    158          //    IIC_Nack();
    159          //  else
    160          //    IIC_Ack();
    161            return receive;
   \   000025   80..         SJMP    ?Subroutine2
   \   000027                REQUIRE P1DIR
   \   000027                REQUIRE _A_P1
    162          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002                REQUIRE ??Subroutine12_0
   \   000002                ; // Fall through to label ??Subroutine12_0
    163          //ADXL345º”ÀŸ∂»¥´∏–∆˜ ≈‰÷√”Î π”√
    164          #define ADXL_WRITE 0xD0
    165          #define ADXL_READ  0xD1
    166          //œÚADXL345 Ãÿ∂®ºƒ¥Ê∆˜÷––¥»Î ÷µ
    167          //addr: ºƒ¥Ê∆˜µÿ÷∑   val:–¥»Îµƒ÷µ
    168          // ADXL345≥ı ºªØ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    169          uchar ADXL345_Init(void)
   \                     ADXL345_Init:
    170          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    171            IIC_Init_IO();
   \   000004                ; Setup parameters for call to function IIC_Init_IO
   \   000004   12....       LCALL   ??IIC_Init_IO?relay
    172            return 0;
   \   000007   7900         MOV     R1,#0x0
   \   000009   02....       LJMP    ??Subroutine10_0 & 0xFFFF
    173          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    174          uchar ADXL345_sleep(void)//¿≠µÕ ‰≥ˆµÁ—π
   \                     ADXL345_sleep:
    175          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    176            P1DIR |= (0x03)<<3;
   \   000000   43FE18       ORL     0xfe,#0x18
    177            P1_4=0;
   \   000003   C294         CLR     0x90.4
    178            P1_3=0;
   \   000005   C293         CLR     0x90.3
    179            P1DIR &= (~0x03)<<1; // p1_6 P1_7 output
   \   000007   53FEF8       ANL     0xfe,#0xf8
    180            return 0;
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   02....       LJMP    ?BRET
   \   00000F                REQUIRE P1DIR
   \   00000F                REQUIRE _A_P1
    181          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void ADXL345_WR_Reg(uchar addr, uchar val)
   \                     ADXL345_WR_Reg:
    183          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    184            IIC_Start();
   \   000009                ; Setup parameters for call to function IIC_Start
   \   000009   12....       LCALL   ?Subroutine3 & 0xFFFF
    185            IIC_Send_Byte(ADXL_WRITE);
    186            IIC_Wait_Ack();
    187            IIC_Send_Byte(addr);
    188            IIC_Wait_Ack();
    189            IIC_Send_Byte(val);
   \                     ??CrossCallReturnLabel_0:
   \   00000C                ; Setup parameters for call to function IIC_Send_Byte
   \   00000C   EE           MOV     A,R6
   \   00000D   12....       LCALL   ?Subroutine6 & 0xFFFF
    190            IIC_Wait_Ack();
    191            IIC_Stop();
   \                     ??CrossCallReturnLabel_11:
   \   000010                ; Setup parameters for call to function IIC_Stop
   \   000010   12....       LCALL   ??IIC_Stop?relay
    192          }
   \   000013   80..         SJMP    ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000003                ; Setup parameters for call to function IIC_Send_Byte
   \   000003                ; Setup parameters for call to function IIC_Send_Byte
   \   000003   EF           MOV     A,R7
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F9           MOV     R1,A
   \   000001                REQUIRE ??Subroutine13_0
   \   000001                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ??IIC_Start?relay
   \   000003                ; Setup parameters for call to function IIC_Send_Byte
   \   000003                ; Setup parameters for call to function IIC_Send_Byte
   \   000003                ; Setup parameters for call to function IIC_Send_Byte
   \   000003                ; Setup parameters for call to function IIC_Send_Byte
   \   000003   79D0         MOV     R1,#-0x30
   \   000005                REQUIRE ??Subroutine14_0
   \   000005                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   12....       LCALL   ??IIC_Send_Byte?relay
   \   000003                ; Setup parameters for call to function IIC_Wait_Ack
   \   000003                ; Setup parameters for call to function IIC_Wait_Ack
   \   000003                ; Setup parameters for call to function IIC_Wait_Ack
   \   000003                ; Setup parameters for call to function IIC_Wait_Ack
   \   000003                ; Setup parameters for call to function IIC_Wait_Ack
   \   000003                ; Setup parameters for call to function IIC_Wait_Ack
   \   000003                ; Setup parameters for call to function IIC_Wait_Ack
   \   000003                ; Setup parameters for call to function IIC_Wait_Ack
   \   000003                ; Setup parameters for call to function IIC_Wait_Ack
   \   000003                ; Setup parameters for call to function IIC_Wait_Ack
   \   000003                ; Setup parameters for call to function IIC_Wait_Ack
   \   000003                ; Setup parameters for call to function IIC_Wait_Ack
   \   000003   12....       LCALL   ??IIC_Wait_Ack?relay
   \   000006   22           RET
    193          //∂¡»°ADXL345÷∏∂®ºƒ¥Ê∆˜÷µ
    194          //addr: ƒø±Íºƒ¥Ê∆˜µÿ÷∑
    195          //∑µªÿ÷µ£∫  ƒø±Íºƒ¥Ê∆˜÷µ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    196          uchar ADXL345_RD_Reg(uchar addr)
   \                     ADXL345_RD_Reg:
    197          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    198            uchar temp=0;
    199            IIC_Start();
   \   000007                ; Setup parameters for call to function IIC_Start
   \   000007   12....       LCALL   ?Subroutine3 & 0xFFFF
    200            IIC_Send_Byte(ADXL_WRITE);
    201            IIC_Wait_Ack();
    202            IIC_Send_Byte(addr);
    203            IIC_Wait_Ack();
    204            IIC_Start();  // ÷ÿ–¬∆Ù∂Ø
   \                     ??CrossCallReturnLabel_1:
   \   00000A                ; Setup parameters for call to function IIC_Start
   \   00000A   12....       LCALL   ?Subroutine4 & 0xFFFF
    205            IIC_Send_Byte(ADXL_READ);
    206            IIC_Wait_Ack();
    207            temp = IIC_Read_Byte();  // 0±Ì æ∑¢ÀÕNack  ∂¡»°“ª∏ˆ◊÷Ω⁄ £¨≤ª‘ŸºÃ–¯∂¡»°
   \                     ??CrossCallReturnLabel_2:
   \   00000D                ; Setup parameters for call to function IIC_Read_Byte
   \   00000D   12....       LCALL   ??IIC_Read_Byte?relay
   \   000010   E9           MOV     A,R1
   \   000011   FE           MOV     R6,A
    208            IIC_Stop();
   \   000012                ; Setup parameters for call to function IIC_Stop
   \   000012   12....       LCALL   ??IIC_Stop?relay
    209            return temp;
   \   000015   80..         SJMP    ?Subroutine2
    210          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ??IIC_Start?relay
   \   000003                ; Setup parameters for call to function IIC_Send_Byte
   \   000003                ; Setup parameters for call to function IIC_Send_Byte
   \   000003   79D1         MOV     R1,#-0x2f
   \   000005   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000008   22           RET
    211          // USART0 ¥Æø⁄0≈‰÷√

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    212          void Usart0_Init(void)
   \                     Usart0_Init:
    213          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    214            PERCFG = 0x00;  //  π”√±∏”√Œª÷√1
   \   000000   75F100       MOV     0xf1,#0x0
    215            P0SEL = 0x0c;  // P0_2 P0_3 Œ™Õ‚…Ëπ¶ƒ‹
   \   000003   75F30C       MOV     0xf3,#0xc
    216            P2DIR &= ~0XC0;
   \   000006   53FF3F       ANL     0xff,#0x3f
    217            U0CSR |= 0x80;
   \   000009   438680       ORL     0x86,#0x80
    218            U0GCR |= 8; 
   \   00000C   43C508       ORL     0xc5,#0x8
    219            U0BAUD |= 59;
   \   00000F   43C23B       ORL     0xc2,#0x3b
    220            UTX0IF = 0; //UART0 TX ÷–∂œ±Í÷æ≥ı º÷√Œª
   \   000012   C2E9         CLR     0xe8.1
    221          }
   \   000014   02....       LJMP    ?BRET
   \   000017                REQUIRE PERCFG
   \   000017                REQUIRE P0SEL
   \   000017                REQUIRE P2DIR
   \   000017                REQUIRE U0CSR
   \   000017                REQUIRE U0GCR
   \   000017                REQUIRE U0BAUD
   \   000017                REQUIRE _A_IRCON2
    222          // USART0∑¢ÀÕ “ª∏ˆ◊÷∑˚¥Æ ˝æ›

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    223          void UartTX_Send_String(uchar *Data,int len)
   \                     UartTX_Send_String:
    224          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    225            int j;
    226            for(j=0;j<len;j++)
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \   000009   801A         SJMP    ??UartTX_Send_String_0
    227            {
    228              U0DBUF = *Data++;
   \                     ??UartTX_Send_String_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5C1         MOV     0xc1,A
   \   000012   A3           INC     DPTR
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
    229              while(UTX0IF == 0);
   \                     ??UartTX_Send_String_2:
   \   000017   A2E9         MOV     C,0xe8.1
   \   000019   50FC         JNC     ??UartTX_Send_String_2
    230              UTX0IF = 0;
   \   00001B   C2E9         CLR     0xe8.1
    231            }
   \   00001D   E8           MOV     A,R0
   \   00001E   2401         ADD     A,#0x1
   \   000020   08           INC     R0
   \   000021   E9           MOV     A,R1
   \   000022   3400         ADDC    A,#0x0
   \   000024   F9           MOV     R1,A
   \                     ??UartTX_Send_String_0:
   \   000025   C3           CLR     C
   \   000026   E8           MOV     A,R0
   \   000027   9C           SUBB    A,R4
   \   000028   E9           MOV     A,R1
   \   000029   9D           SUBB    A,R5
   \   00002A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00002C   65D0         XRL     A,PSW
   \   00002E   33           RLC     A
   \   00002F   40DA         JC      ??UartTX_Send_String_1
    232          }
   \   000031   80..         SJMP    ??Subroutine12_0
   \   000033                REQUIRE U0DBUF
   \   000033                REQUIRE _A_IRCON2
    233          //void main(void)
    234          //{
    235          //  uchar temp[10] = {0x21,0};
    236          //  /*œµÕ≥ ±÷”—°‘Ò 32MHz  ƒ¨»œ «16MHz*/
    237          //  CLKCONCMD = 0;
    238          //  //while (CLKCONSTA != 0);// wait until stable
    239          //  
    240          //  /* IOø⁄≈‰÷√ */
    241          //  /* Õ‚…Ë≥ı ºªØ */
    242          //  
    243          //  Usart0_Init();
    244          //  ADXL345_Init();
    245          //void ADXL345_read(void){
    246          //  unsigned char temp[10] = {0x21,0};
    247          //  temp[0] = ADXL345_RD_Reg(0x00);
    248          //  //UartTX_Send_String(temp , 2);
    249          //  delay_ms(1000);
    250          //  ADXL345_WR_Reg(0x1e, 0x45);
    251          //  temp[0] = ADXL345_RD_Reg(0x1e);
    252          //  //UartTX_Send_String(temp , 2);
    253          //  delay_ms(1000);
    254          //  ADXL345_WR_Reg(0x1f, 0x1f);
    255          //  temp[0] = ADXL345_RD_Reg(0x1f);
    256          //  //UartTX_Send_String(temp , 2);
    257          //  delay_ms(1000);
    258          //  ADXL345_WR_Reg(0x20, 0x20);
    259          //  temp[0] = ADXL345_RD_Reg(0x20);
    260          //  //UartTX_Send_String(temp , 2);
    261          //  delay_ms(1000);
    262          //}
    263          //}
    264          extern int mpu_init(void);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void MPU6050_Init(void)
   \                     MPU6050_Init:
    266          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    267          	int result=0;
    268          	IIC_Init_IO();
   \   000005                ; Setup parameters for call to function IIC_Init_IO
   \   000005   12....       LCALL   ??IIC_Init_IO?relay
    269          	result=mpu_init();
    270          	//printf("%u\n",result);
    271          	if(!result)
   \   000008                ; Setup parameters for call to function mpu_init
   \   000008   12....       LCALL   ??mpu_init?relay
   \   00000B   8B..         MOV     ?V0 + 1,R3
   \   00000D   EA           MOV     A,R2
   \   00000E   45..         ORL     A,?V0 + 1
   \   000010   7065         JNZ     ??MPU6050_Init_0
    272          	{	 		 
    273          		if(!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))		//mpu_set_sensor
   \   000012                ; Setup parameters for call to function mpu_set_sensors
   \   000012   7978         MOV     R1,#0x78
   \   000014   12....       LCALL   ??mpu_set_sensors?relay
   \   000017   8B..         MOV     ?V0 + 1,R3
   \   000019   EA           MOV     A,R2
   \   00001A   45..         ORL     A,?V0 + 1
   \   00001C   7054         JNZ     ??MPU6050_Init_1
    274          		if(!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))	//mpu_configure_fifo
   \   00001E                ; Setup parameters for call to function mpu_configure_fifo
   \   00001E   7978         MOV     R1,#0x78
   \   000020   12....       LCALL   ??mpu_configure_fifo?relay
   \   000023   8B..         MOV     ?V0 + 1,R3
   \   000025   EA           MOV     A,R2
   \   000026   45..         ORL     A,?V0 + 1
   \   000028   7048         JNZ     ??MPU6050_Init_1
    275          		if(!mpu_set_sample_rate(DEFAULT_MPU_HZ))	   	  		//mpu_set_sample_rate
   \   00002A                ; Setup parameters for call to function mpu_set_sample_rate
   \   00002A   7A64         MOV     R2,#0x64
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   12....       LCALL   ??mpu_set_sample_rate?relay
   \   000031   8B..         MOV     ?V0 + 1,R3
   \   000033   EA           MOV     A,R2
   \   000034   45..         ORL     A,?V0 + 1
   \   000036   703A         JNZ     ??MPU6050_Init_1
    276          		if(!dmp_load_motion_driver_firmware())   	  			//dmp_load_motion_driver_firmvare
   \   000038                ; Setup parameters for call to function dmp_load_motion_driver_firmware
   \   000038   12....       LCALL   ??dmp_load_motion_driver_firmware?relay
   \   00003B   8B..         MOV     ?V0 + 1,R3
   \   00003D   EA           MOV     A,R2
   \   00003E   45..         ORL     A,?V0 + 1
   \   000040   7030         JNZ     ??MPU6050_Init_1
    277          		if(!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation))) 	  //dmp_set_orientation
   \   000042                ; Setup parameters for call to function dmp_set_orientation
   \   000042                ; Setup parameters for call to function inv_orientation_matrix_to_scalar
   \   000042   7A..         MOV     R2,#gyro_orientation & 0xff
   \   000044   7B..         MOV     R3,#(gyro_orientation >> 8) & 0xff
   \   000046   12....       LCALL   ??inv_orientation_matrix_to_scalar?relay
   \   000049   12....       LCALL   ??dmp_set_orientation?relay
   \   00004C   8B..         MOV     ?V0 + 1,R3
   \   00004E   EA           MOV     A,R2
   \   00004F   45..         ORL     A,?V0 + 1
   \   000051   701F         JNZ     ??MPU6050_Init_1
    278          		if(!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
    279          		    DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
    280          		    DMP_FEATURE_GYRO_CAL))		   	 					 //dmp_enable_feature
   \   000053                ; Setup parameters for call to function dmp_enable_feature
   \   000053   7A73         MOV     R2,#0x73
   \   000055   7B01         MOV     R3,#0x1
   \   000057   12....       LCALL   ??dmp_enable_feature?relay
   \   00005A   8B..         MOV     ?V0 + 1,R3
   \   00005C   EA           MOV     A,R2
   \   00005D   45..         ORL     A,?V0 + 1
   \   00005F   7011         JNZ     ??MPU6050_Init_1
    281          		if(!dmp_set_fifo_rate(DEFAULT_MPU_HZ))   	 			 //dmp_set_fifo_rate
   \   000061                ; Setup parameters for call to function dmp_set_fifo_rate
   \   000061   7A64         MOV     R2,#0x64
   \   000063   7B00         MOV     R3,#0x0
   \   000065   12....       LCALL   ??dmp_set_fifo_rate?relay
   \   000068   8B..         MOV     ?V0 + 1,R3
   \   00006A   EA           MOV     A,R2
   \   00006B   45..         ORL     A,?V0 + 1
   \   00006D   7003         JNZ     ??MPU6050_Init_1
    282          		run_self_test();		//??
   \   00006F                ; Setup parameters for call to function run_self_test
   \   00006F   12....       LCALL   ??run_self_test?relay
    283          		if(!mpu_set_dmp_state(1));
   \                     ??MPU6050_Init_1:
   \   000072                ; Setup parameters for call to function mpu_set_dmp_state
   \   000072   7901         MOV     R1,#0x1
   \   000074   12....       LCALL   ??mpu_set_dmp_state?relay
    284          	}
    285          }
   \                     ??MPU6050_Init_0:
   \   000077   02....       LJMP    ?Subroutine1 & 0xFFFF
    286          #define q30  1073741824.0f
    287          extern short gyro[3], accel[3];

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    288          void MPU6050_Pose(void)
   \                     MPU6050_Pose:
    289          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
    290          	dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more);	 
   \   000005                ; Setup parameters for call to function dmp_read_fifo
   \   000005   75....       MOV     ?V0 + 0,#more & 0xff
   \   000008   75....       MOV     ?V0 + 1,#(more >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75....       MOV     ?V0 + 0,#sensors & 0xff
   \   000013   75....       MOV     ?V0 + 1,#(sensors >> 8) & 0xff
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   75....       MOV     ?V0 + 0,#sensor_timestamp & 0xff
   \   00001E   75....       MOV     ?V0 + 1,#(sensor_timestamp >> 8) & 0xff
   \   000021   78..         MOV     R0,#?V0 + 0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75....       MOV     ?V0 + 0,#quat & 0xff
   \   000029   75....       MOV     ?V0 + 1,#(quat >> 8) & 0xff
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   7C..         MOV     R4,#accel & 0xff
   \   000033   7D..         MOV     R5,#(accel >> 8) & 0xff
   \   000035   7A..         MOV     R2,#gyro & 0xff
   \   000037   7B..         MOV     R3,#(gyro >> 8) & 0xff
   \   000039   12....       LCALL   ??dmp_read_fifo?relay
   \   00003C   7408         MOV     A,#0x8
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
    291          	if(sensors & INV_WXYZ_QUAT )
   \   000041   90....       MOV     DPTR,#sensors + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   5401         ANL     A,#0x1
   \   000047   7003         JNZ     $+5
   \   000049   02....       LJMP    ??MPU6050_Pose_0 & 0xFFFF
    292          	{
    293          		q0 = quat[0] / q30;	
   \   00004C   90....       MOV     DPTR,#quat
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?L_MOV_X
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?L_TO_FLT
   \   000059   90....       MOV     DPTR,#__Constant_30800000
   \   00005C   78..         MOV     R0,#?V0 + 4
   \   00005E   12....       LCALL   ?L_MOV_X
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   79..         MOV     R1,#?V0 + 4
   \   000065   12....       LCALL   ?FLT_MUL
   \   000068   90....       MOV     DPTR,#q0
   \   00006B   78..         MOV     R0,#?V0 + 0
   \   00006D   12....       LCALL   ?L_MOV_TO_X
    294          		q1 = quat[1] / q30;
   \   000070   90....       MOV     DPTR,#quat + 4
   \   000073   78..         MOV     R0,#?V0 + 0
   \   000075   12....       LCALL   ?L_MOV_X
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?L_TO_FLT
   \   00007D   90....       MOV     DPTR,#__Constant_30800000
   \   000080   78..         MOV     R0,#?V0 + 4
   \   000082   12....       LCALL   ?L_MOV_X
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   79..         MOV     R1,#?V0 + 4
   \   000089   12....       LCALL   ?FLT_MUL
   \   00008C   90....       MOV     DPTR,#q1
   \   00008F   78..         MOV     R0,#?V0 + 0
   \   000091   12....       LCALL   ?L_MOV_TO_X
    295          		q2 = quat[2] / q30;
   \   000094   90....       MOV     DPTR,#quat + 8
   \   000097   78..         MOV     R0,#?V0 + 0
   \   000099   12....       LCALL   ?L_MOV_X
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?L_TO_FLT
   \   0000A1   90....       MOV     DPTR,#__Constant_30800000
   \   0000A4   78..         MOV     R0,#?V0 + 4
   \   0000A6   12....       LCALL   ?L_MOV_X
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   79..         MOV     R1,#?V0 + 4
   \   0000AD   12....       LCALL   ?FLT_MUL
   \   0000B0   90....       MOV     DPTR,#q2
   \   0000B3   78..         MOV     R0,#?V0 + 0
   \   0000B5   12....       LCALL   ?L_MOV_TO_X
    296          		q3 = quat[3] / q30;
   \   0000B8   90....       MOV     DPTR,#quat + 12
   \   0000BB   78..         MOV     R0,#?V0 + 0
   \   0000BD   12....       LCALL   ?L_MOV_X
   \   0000C0   78..         MOV     R0,#?V0 + 0
   \   0000C2   12....       LCALL   ?L_TO_FLT
   \   0000C5   90....       MOV     DPTR,#__Constant_30800000
   \   0000C8   78..         MOV     R0,#?V0 + 4
   \   0000CA   12....       LCALL   ?L_MOV_X
   \   0000CD   78..         MOV     R0,#?V0 + 0
   \   0000CF   79..         MOV     R1,#?V0 + 4
   \   0000D1   12....       LCALL   ?FLT_MUL
   \   0000D4   90....       MOV     DPTR,#q3
   \   0000D7   78..         MOV     R0,#?V0 + 0
   \   0000D9   12....       LCALL   ?L_MOV_TO_X
    297          
    298          		Pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
   \   0000DC   90....       MOV     DPTR,#q0
   \   0000DF   78..         MOV     R0,#?V0 + 4
   \   0000E1   12....       LCALL   ?L_MOV_X
   \   0000E4   90....       MOV     DPTR,#__Constant_40000000
   \   0000E7   78..         MOV     R0,#?V0 + 0
   \   0000E9   12....       LCALL   ?L_MOV_X
   \   0000EC   78..         MOV     R0,#?V0 + 4
   \   0000EE   79..         MOV     R1,#?V0 + 0
   \   0000F0   12....       LCALL   ?FLT_MUL
   \   0000F3   90....       MOV     DPTR,#q1
   \   0000F6   78..         MOV     R0,#?V0 + 12
   \   0000F8   12....       LCALL   ?L_MOV_X
   \   0000FB   90....       MOV     DPTR,#__Constant_c0000000
   \   0000FE   78..         MOV     R0,#?V0 + 0
   \   000100   12....       LCALL   ?L_MOV_X
   \   000103   78..         MOV     R0,#?V0 + 12
   \   000105   79..         MOV     R1,#?V0 + 0
   \   000107   12....       LCALL   ?FLT_MUL
   \   00010A                ; Setup parameters for call to function asin
   \   00010A   85....       MOV     ?V0 + 0,?V0 + 12
   \   00010D   85....       MOV     ?V0 + 1,?V0 + 13
   \   000110   85....       MOV     ?V0 + 2,?V0 + 14
   \   000113   85....       MOV     ?V0 + 3,?V0 + 15
   \   000116   90....       MOV     DPTR,#q3
   \   000119   78..         MOV     R0,#?V0 + 8
   \   00011B   12....       LCALL   ?L_MOV_X
   \   00011E   78..         MOV     R0,#?V0 + 0
   \   000120   79..         MOV     R1,#?V0 + 8
   \   000122   12....       LCALL   ?FLT_MUL
   \   000125   C0..         PUSH    ?V0 + 0
   \   000127   C0..         PUSH    ?V0 + 1
   \   000129   C0..         PUSH    ?V0 + 2
   \   00012B   C0..         PUSH    ?V0 + 3
   \   00012D   85....       MOV     ?V0 + 0,?V0 + 4
   \   000130   85....       MOV     ?V0 + 1,?V0 + 5
   \   000133   85....       MOV     ?V0 + 2,?V0 + 6
   \   000136   85....       MOV     ?V0 + 3,?V0 + 7
   \   000139   90....       MOV     DPTR,#q2
   \   00013C   78..         MOV     R0,#?V0 + 8
   \   00013E   12....       LCALL   ?L_MOV_X
   \   000141   78..         MOV     R0,#?V0 + 0
   \   000143   79..         MOV     R1,#?V0 + 8
   \   000145   12....       LCALL   ?FLT_MUL
   \   000148   D0..         POP     ?V0 + 11
   \   00014A   D0..         POP     ?V0 + 10
   \   00014C   D0..         POP     ?V0 + 9
   \   00014E   D0..         POP     ?V0 + 8
   \   000150   78..         MOV     R0,#?V0 + 8
   \   000152   79..         MOV     R1,#?V0 + 0
   \   000154   12....       LCALL   ?FLT_ADD
   \   000157   AA..         MOV     R2,?V0 + 8
   \   000159   AB..         MOV     R3,?V0 + 9
   \   00015B   AC..         MOV     R4,?V0 + 10
   \   00015D   AD..         MOV     R5,?V0 + 11
   \   00015F   12....       LCALL   ??asin?relay
   \   000162   8A..         MOV     ?V0 + 0,R2
   \   000164   8B..         MOV     ?V0 + 1,R3
   \   000166   8C..         MOV     ?V0 + 2,R4
   \   000168   8D..         MOV     ?V0 + 3,R5
   \   00016A   90....       MOV     DPTR,#__Constant_42653333
   \   00016D   78..         MOV     R0,#?V0 + 8
   \   00016F   12....       LCALL   ?L_MOV_X
   \   000172   78..         MOV     R0,#?V0 + 0
   \   000174   79..         MOV     R1,#?V0 + 8
   \   000176   12....       LCALL   ?FLT_MUL
   \   000179   90....       MOV     DPTR,#Pitch
   \   00017C   78..         MOV     R0,#?V0 + 0
   \   00017E   12....       LCALL   ?L_MOV_TO_X
    299          		Roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
   \   000181   90....       MOV     DPTR,#q2
   \   000184   78..         MOV     R0,#?V0 + 8
   \   000186   12....       LCALL   ?L_MOV_X
   \   000189   90....       MOV     DPTR,#__Constant_40000000
   \   00018C   78..         MOV     R0,#?V0 + 0
   \   00018E   12....       LCALL   ?L_MOV_X
   \   000191   78..         MOV     R0,#?V0 + 8
   \   000193   79..         MOV     R1,#?V0 + 0
   \   000195   12....       LCALL   ?FLT_MUL
   \   000198                ; Setup parameters for call to function atan2
   \   000198   90....       MOV     DPTR,#q1
   \   00019B   78..         MOV     R0,#?V0 + 0
   \   00019D   12....       LCALL   ?L_MOV_X
   \   0001A0   78..         MOV     R0,#?V0 + 12
   \   0001A2   79..         MOV     R1,#?V0 + 0
   \   0001A4   12....       LCALL   ?FLT_MUL
   \   0001A7   C0..         PUSH    ?V0 + 12
   \   0001A9   C0..         PUSH    ?V0 + 13
   \   0001AB   C0..         PUSH    ?V0 + 14
   \   0001AD   C0..         PUSH    ?V0 + 15
   \   0001AF   85....       MOV     ?V0 + 0,?V0 + 8
   \   0001B2   85....       MOV     ?V0 + 1,?V0 + 9
   \   0001B5   85....       MOV     ?V0 + 2,?V0 + 10
   \   0001B8   85....       MOV     ?V0 + 3,?V0 + 11
   \   0001BB   90....       MOV     DPTR,#q2
   \   0001BE   78..         MOV     R0,#?V0 + 12
   \   0001C0   12....       LCALL   ?L_MOV_X
   \   0001C3   78..         MOV     R0,#?V0 + 0
   \   0001C5   79..         MOV     R1,#?V0 + 12
   \   0001C7   12....       LCALL   ?FLT_MUL
   \   0001CA   D0..         POP     ?V0 + 15
   \   0001CC   D0..         POP     ?V0 + 14
   \   0001CE   D0..         POP     ?V0 + 13
   \   0001D0   D0..         POP     ?V0 + 12
   \   0001D2   78..         MOV     R0,#?V0 + 12
   \   0001D4   79..         MOV     R1,#?V0 + 0
   \   0001D6   12....       LCALL   ?FLT_SUB
   \   0001D9   90....       MOV     DPTR,#__Constant_3f800000
   \   0001DC   78..         MOV     R0,#?V0 + 0
   \   0001DE   12....       LCALL   ?L_MOV_X
   \   0001E1   78..         MOV     R0,#?V0 + 12
   \   0001E3   79..         MOV     R1,#?V0 + 0
   \   0001E5   12....       LCALL   ?FLT_ADD
   \   0001E8   78..         MOV     R0,#?V0 + 12
   \   0001EA   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0001ED   90....       MOV     DPTR,#q3
   \   0001F0   78..         MOV     R0,#?V0 + 0
   \   0001F2   12....       LCALL   ?L_MOV_X
   \   0001F5   78..         MOV     R0,#?V0 + 8
   \   0001F7   79..         MOV     R1,#?V0 + 0
   \   0001F9   12....       LCALL   ?FLT_MUL
   \   0001FC   90....       MOV     DPTR,#q1
   \   0001FF   78..         MOV     R0,#?V0 + 0
   \   000201   12....       LCALL   ?L_MOV_X
   \   000204   78..         MOV     R0,#?V0 + 4
   \   000206   79..         MOV     R1,#?V0 + 0
   \   000208   12....       LCALL   ?FLT_MUL
   \   00020B   78..         MOV     R0,#?V0 + 8
   \   00020D   79..         MOV     R1,#?V0 + 4
   \   00020F   12....       LCALL   ?FLT_ADD
   \   000212   AA..         MOV     R2,?V0 + 8
   \   000214   AB..         MOV     R3,?V0 + 9
   \   000216   AC..         MOV     R4,?V0 + 10
   \   000218   AD..         MOV     R5,?V0 + 11
   \   00021A   12....       LCALL   ??atan2?relay
   \   00021D   7404         MOV     A,#0x4
   \   00021F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000222   8A..         MOV     ?V0 + 0,R2
   \   000224   8B..         MOV     ?V0 + 1,R3
   \   000226   8C..         MOV     ?V0 + 2,R4
   \   000228   8D..         MOV     ?V0 + 3,R5
   \   00022A   90....       MOV     DPTR,#__Constant_42653333
   \   00022D   78..         MOV     R0,#?V0 + 4
   \   00022F   12....       LCALL   ?L_MOV_X
   \   000232   78..         MOV     R0,#?V0 + 0
   \   000234   79..         MOV     R1,#?V0 + 4
   \   000236   12....       LCALL   ?FLT_MUL
   \   000239   90....       MOV     DPTR,#Roll
   \   00023C   78..         MOV     R0,#?V0 + 0
   \   00023E   12....       LCALL   ?L_MOV_TO_X
    300          		Yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
   \   000241                ; Setup parameters for call to function atan2
   \   000241   90....       MOV     DPTR,#q0
   \   000244   78..         MOV     R0,#?V0 + 0
   \   000246   12....       LCALL   ?L_MOV_X
   \   000249   90....       MOV     DPTR,#q0
   \   00024C   78..         MOV     R0,#?V0 + 4
   \   00024E   12....       LCALL   ?L_MOV_X
   \   000251   78..         MOV     R0,#?V0 + 0
   \   000253   79..         MOV     R1,#?V0 + 4
   \   000255   12....       LCALL   ?FLT_MUL
   \   000258   90....       MOV     DPTR,#q1
   \   00025B   78..         MOV     R0,#?V0 + 4
   \   00025D   12....       LCALL   ?L_MOV_X
   \   000260   90....       MOV     DPTR,#q1
   \   000263   78..         MOV     R0,#?V0 + 8
   \   000265   12....       LCALL   ?L_MOV_X
   \   000268   78..         MOV     R0,#?V0 + 4
   \   00026A   79..         MOV     R1,#?V0 + 8
   \   00026C   12....       LCALL   ?FLT_MUL
   \   00026F   78..         MOV     R0,#?V0 + 0
   \   000271   79..         MOV     R1,#?V0 + 4
   \   000273   12....       LCALL   ?FLT_ADD
   \   000276   90....       MOV     DPTR,#q2
   \   000279   78..         MOV     R0,#?V0 + 4
   \   00027B   12....       LCALL   ?L_MOV_X
   \   00027E   90....       MOV     DPTR,#q2
   \   000281   78..         MOV     R0,#?V0 + 8
   \   000283   12....       LCALL   ?L_MOV_X
   \   000286   78..         MOV     R0,#?V0 + 4
   \   000288   79..         MOV     R1,#?V0 + 8
   \   00028A   12....       LCALL   ?FLT_MUL
   \   00028D   78..         MOV     R0,#?V0 + 0
   \   00028F   79..         MOV     R1,#?V0 + 4
   \   000291   12....       LCALL   ?FLT_SUB
   \   000294   90....       MOV     DPTR,#q3
   \   000297   78..         MOV     R0,#?V0 + 4
   \   000299   12....       LCALL   ?L_MOV_X
   \   00029C   90....       MOV     DPTR,#q3
   \   00029F   78..         MOV     R0,#?V0 + 8
   \   0002A1   12....       LCALL   ?L_MOV_X
   \   0002A4   78..         MOV     R0,#?V0 + 4
   \   0002A6   79..         MOV     R1,#?V0 + 8
   \   0002A8   12....       LCALL   ?FLT_MUL
   \   0002AB   78..         MOV     R0,#?V0 + 0
   \   0002AD   79..         MOV     R1,#?V0 + 4
   \   0002AF   12....       LCALL   ?FLT_SUB
   \   0002B2   78..         MOV     R0,#?V0 + 0
   \   0002B4   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0002B7   90....       MOV     DPTR,#q1
   \   0002BA   78..         MOV     R0,#?V0 + 0
   \   0002BC   12....       LCALL   ?L_MOV_X
   \   0002BF   90....       MOV     DPTR,#q2
   \   0002C2   78..         MOV     R0,#?V0 + 4
   \   0002C4   12....       LCALL   ?L_MOV_X
   \   0002C7   78..         MOV     R0,#?V0 + 0
   \   0002C9   79..         MOV     R1,#?V0 + 4
   \   0002CB   12....       LCALL   ?FLT_MUL
   \   0002CE   90....       MOV     DPTR,#q0
   \   0002D1   78..         MOV     R0,#?V0 + 4
   \   0002D3   12....       LCALL   ?L_MOV_X
   \   0002D6   90....       MOV     DPTR,#q3
   \   0002D9   78..         MOV     R0,#?V0 + 8
   \   0002DB   12....       LCALL   ?L_MOV_X
   \   0002DE   78..         MOV     R0,#?V0 + 4
   \   0002E0   79..         MOV     R1,#?V0 + 8
   \   0002E2   12....       LCALL   ?FLT_MUL
   \   0002E5   78..         MOV     R0,#?V0 + 0
   \   0002E7   79..         MOV     R1,#?V0 + 4
   \   0002E9   12....       LCALL   ?FLT_ADD
   \   0002EC   90....       MOV     DPTR,#__Constant_40000000
   \   0002EF   78..         MOV     R0,#?V0 + 4
   \   0002F1   12....       LCALL   ?L_MOV_X
   \   0002F4   78..         MOV     R0,#?V0 + 0
   \   0002F6   79..         MOV     R1,#?V0 + 4
   \   0002F8   12....       LCALL   ?FLT_MUL
   \   0002FB   AA..         MOV     R2,?V0 + 0
   \   0002FD   AB..         MOV     R3,?V0 + 1
   \   0002FF   AC..         MOV     R4,?V0 + 2
   \   000301   AD..         MOV     R5,?V0 + 3
   \   000303   12....       LCALL   ??atan2?relay
   \   000306   7404         MOV     A,#0x4
   \   000308   12....       LCALL   ?DEALLOC_XSTACK8
   \   00030B   8A..         MOV     ?V0 + 0,R2
   \   00030D   8B..         MOV     ?V0 + 1,R3
   \   00030F   8C..         MOV     ?V0 + 2,R4
   \   000311   8D..         MOV     ?V0 + 3,R5
   \   000313   90....       MOV     DPTR,#__Constant_42653333
   \   000316   78..         MOV     R0,#?V0 + 4
   \   000318   12....       LCALL   ?L_MOV_X
   \   00031B   78..         MOV     R0,#?V0 + 0
   \   00031D   79..         MOV     R1,#?V0 + 4
   \   00031F   12....       LCALL   ?FLT_MUL
   \   000322   90....       MOV     DPTR,#Yaw
   \   000325   78..         MOV     R0,#?V0 + 0
   \   000327   12....       LCALL   ?L_MOV_TO_X
    301          	}
    302          }
   \                     ??MPU6050_Pose_0:
   \   00032A   7F10         MOV     R7,#0x10
   \   00032C   02....       LJMP    ?BANKED_LEAVE_XDATA
    303          
    304          //∂‘Ω”DMPø‚
    305          typedef unsigned char u8;

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    306          u8 I2C_Write_Buffer(u8 addr, u8 reg, u8 len, u8 * data)
   \                     I2C_Write_Buffer:
    307          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   12....       LCALL   ?Subroutine5 & 0xFFFF
    308              int i;
    309              IIC_Start();
    310              //I2C_Send_Byte(addr << 1 | 0);//
    311          		IIC_Send_Byte(0XD0);
    312              if (IIC_Wait_Ack()) 
   \                     ??CrossCallReturnLabel_4:
   \   00000C   6007         JZ      ??I2C_Write_Buffer_0
    313          	{
    314                  IIC_Stop();
   \                     ??I2C_Write_Buffer_1:
   \   00000E                ; Setup parameters for call to function IIC_Stop
   \   00000E   12....       LCALL   ??IIC_Stop?relay
    315                  return 0;
   \   000011   7900         MOV     R1,#0x0
   \   000013   8045         SJMP    ??I2C_Write_Buffer_2
    316              }
    317              IIC_Send_Byte(reg);
   \                     ??I2C_Write_Buffer_0:
   \   000015                ; Setup parameters for call to function IIC_Send_Byte
   \   000015   A9..         MOV     R1,?V0 + 4
   \   000017   12....       LCALL   ??Subroutine13_0 & 0xFFFF
    318              IIC_Wait_Ack();
    319              for (i = 0; i < len; i++) 
   \                     ??CrossCallReturnLabel_13:
   \   00001A   75..00       MOV     ?V0 + 0,#0x0
   \   00001D   75..00       MOV     ?V0 + 1,#0x0
   \   000020   8020         SJMP    ??I2C_Write_Buffer_3
    320          	{
    321                  IIC_Send_Byte(*data);
   \                     ??I2C_Write_Buffer_4:
   \   000022                ; Setup parameters for call to function IIC_Send_Byte
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   E0           MOVX    A,@DPTR
   \   000027   12....       LCALL   ?Subroutine6 & 0xFFFF
    322                  if (IIC_Wait_Ack()) 
   \                     ??CrossCallReturnLabel_12:
   \   00002A   E9           MOV     A,R1
   \   00002B   70E1         JNZ     ??I2C_Write_Buffer_1
    323          		{
    324                      IIC_Stop();
    325                      return 0;   //?®¢®®?®∫°Ï°„®π
    326                  }
    327          		data++;
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   AE82         MOV     R6,DPL
   \   000034   AF83         MOV     R7,DPH
    328              }
   \   000036   E5..         MOV     A,?V0 + 0
   \   000038   2401         ADD     A,#0x1
   \   00003A   F5..         MOV     ?V0 + 0,A
   \   00003C   E5..         MOV     A,?V0 + 1
   \   00003E   3400         ADDC    A,#0x0
   \   000040   F5..         MOV     ?V0 + 1,A
   \                     ??I2C_Write_Buffer_3:
   \   000042   85....       MOV     ?V0 + 2,?V0 + 5
   \   000045   C3           CLR     C
   \   000046   E5..         MOV     A,?V0 + 0
   \   000048   95..         SUBB    A,?V0 + 2
   \   00004A   E5..         MOV     A,?V0 + 1
   \   00004C   9400         SUBB    A,#0x0
   \   00004E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000050   65D0         XRL     A,PSW
   \   000052   33           RLC     A
   \   000053   40CD         JC      ??I2C_Write_Buffer_4
    329              IIC_Stop();
   \   000055                ; Setup parameters for call to function IIC_Stop
   \   000055   12....       LCALL   ??IIC_Stop?relay
    330              return 1;
   \   000058   7901         MOV     R1,#0x1
   \                     ??I2C_Write_Buffer_2:
   \   00005A   7F06         MOV     R7,#0x6
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
    331          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EC           MOV     A,R4
   \   000001   FE           MOV     R6,A
   \   000002   ED           MOV     A,R5
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function IIC_Start
   \   000004                ; Setup parameters for call to function IIC_Start
   \   000004   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000007   E9           MOV     A,R1
   \   000008   22           RET
    332          
    333          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    334          u8 I2C_Read_Buffer(u8 addr, u8 reg, u8 len, u8* buf)
   \                     I2C_Read_Buffer:
    335          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   12....       LCALL   ?Subroutine5 & 0xFFFF
    336              IIC_Start();
    337              //I2C_Send_Byte(addr << 1 | 0);
    338          		IIC_Send_Byte(0Xd0);
    339              if (IIC_Wait_Ack())
   \                     ??CrossCallReturnLabel_5:
   \   00000C   6007         JZ      ??I2C_Read_Buffer_0
    340          	{
    341                  IIC_Stop();
   \   00000E                ; Setup parameters for call to function IIC_Stop
   \   00000E   12....       LCALL   ??IIC_Stop?relay
    342                  return 0;
   \   000011   7900         MOV     R1,#0x0
   \   000013   8035         SJMP    ??I2C_Read_Buffer_1
    343              }
    344              IIC_Send_Byte(reg);
   \                     ??I2C_Read_Buffer_0:
   \   000015                ; Setup parameters for call to function IIC_Send_Byte
   \   000015   A9..         MOV     R1,?V0 + 0
   \   000017   12....       LCALL   ??Subroutine13_0 & 0xFFFF
    345              IIC_Wait_Ack();
    346          
    347              IIC_Start();
   \                     ??CrossCallReturnLabel_14:
   \   00001A                ; Setup parameters for call to function IIC_Start
   \   00001A   12....       LCALL   ?Subroutine4 & 0xFFFF
    348              //I2C_Send_Byte(addr << 1 | 1);
    349          		IIC_Send_Byte(0XD1);
    350              IIC_Wait_Ack();
   \                     ??CrossCallReturnLabel_3:
   \   00001D   800E         SJMP    ??I2C_Read_Buffer_2
    351              while (len)
    352          	{
    353                  *buf = IIC_Read_Byte();
    354                  if (len == 1)
    355                      IIC_Nack();
    356                  else
    357                      IIC_Ack();
   \                     ??I2C_Read_Buffer_3:
   \   00001F                ; Setup parameters for call to function IIC_Ack
   \   00001F   12....       LCALL   ??IIC_Ack?relay
    358                  buf++;
   \                     ??I2C_Read_Buffer_4:
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   A3           INC     DPTR
   \   000027   AE82         MOV     R6,DPL
   \   000029   AF83         MOV     R7,DPH
    359                  len--;
   \   00002B   15..         DEC     ?V0 + 1
   \                     ??I2C_Read_Buffer_2:
   \   00002D   E5..         MOV     A,?V0 + 1
   \   00002F   6014         JZ      ??I2C_Read_Buffer_5
   \   000031                ; Setup parameters for call to function IIC_Read_Byte
   \   000031   12....       LCALL   ??IIC_Read_Byte?relay
   \   000034   E9           MOV     A,R1
   \   000035   8E82         MOV     DPL,R6
   \   000037   8F83         MOV     DPH,R7
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   7401         MOV     A,#0x1
   \   00003C   65..         XRL     A,?V0 + 1
   \   00003E   70DF         JNZ     ??I2C_Read_Buffer_3
   \   000040                ; Setup parameters for call to function IIC_Nack
   \   000040   12....       LCALL   ??IIC_Nack?relay
   \   000043   80DD         SJMP    ??I2C_Read_Buffer_4
    360              }
    361              IIC_Stop();
   \                     ??I2C_Read_Buffer_5:
   \   000045                ; Setup parameters for call to function IIC_Stop
   \   000045   12....       LCALL   ??IIC_Stop?relay
    362              return 1;
   \   000048   7901         MOV     R1,#0x1
   \                     ??I2C_Read_Buffer_1:
   \   00004A   02....       LJMP    ?Subroutine1 & 0xFFFF
    363          }
    364          
    365          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    366          int I2C_Read(u8 addr, u8 reg, u8 len, u8 *buf)
   \                     I2C_Read:
    367          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    368          	if(I2C_Read_Buffer(addr,reg,len,buf))
   \   000005                ; Setup parameters for call to function I2C_Read_Buffer
   \   000005   12....       LCALL   ??I2C_Read_Buffer?relay
   \   000008   E9           MOV     A,R1
   \   000009   6006         JZ      ??I2C_Read_0
    369          		return 0;
   \   00000B   7A00         MOV     R2,#0x0
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   8004         SJMP    ??I2C_Read_1
    370          	else
    371          		return -1;
   \                     ??I2C_Read_0:
   \   000011   7AFF         MOV     R2,#-0x1
   \   000013   7BFF         MOV     R3,#-0x1
   \                     ??I2C_Read_1:
   \   000015   02....       LJMP    ??Subroutine12_0 & 0xFFFF
    372          }
    373          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    374          int I2C_Write(u8 addr, u8 reg, u8 len, u8* data)
   \                     I2C_Write:
    375          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    376           //       u8 *buf=NULL;
    377           //       u8 i=0;
    378          //        for(i=0;i<len;i++)
    379          //            printf("%d",data[i]);
    380          	if(I2C_Write_Buffer(addr,reg,len,data))
   \   000005                ; Setup parameters for call to function I2C_Write_Buffer
   \   000005   12....       LCALL   ??I2C_Write_Buffer?relay
   \   000008   E9           MOV     A,R1
   \   000009   6006         JZ      ??I2C_Write_0
    381                  {
    382          //          printf("%d",reg);
    383          //          printf("**\n");
    384          //          for(i=0;i<len;i++)
    385          //            printf("%02X",data[i]);
    386          //          printf("\n");
    387          //          I2C_Read_Buffer(addr,reg,len,buf);
    388          //          for(i=0;i<len;i++)
    389          //            printf("%02X",buf[i]);
    390          //          printf("\n");
    391          		return 0;
   \   00000B   7A00         MOV     R2,#0x0
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   800B         SJMP    ??I2C_Write_1
    392                  }
    393          	else
    394                  {
    395                    printf("error");
   \                     ??I2C_Write_0:
   \   000011                ; Setup parameters for call to function printf
   \   000011   7A..         MOV     R2,#`?<Constant "error">` & 0xff
   \   000013   7B..         MOV     R3,#(`?<Constant "error">` >> 8) & 0xff
   \   000015   12....       LCALL   ??printf?relay
    396          		return -1;
   \   000018   7AFF         MOV     R2,#-0x1
   \   00001A   7BFF         MOV     R3,#-0x1
    397                  }
   \                     ??I2C_Write_1:
   \   00001C   02....       LJMP    ??Subroutine12_0 & 0xFFFF
    398          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gyro_orientation>`:
   \   000000   FF           DB -1
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   FF           DB -1
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for q0>`:
   \   000000   0000803F     DD 3F800000H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay_us?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay_us

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??delay_ms?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    delay_ms

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??IIC_Init_IO?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    IIC_Init_IO

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??IIC_Start?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    IIC_Start

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??IIC_Stop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    IIC_Stop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??IIC_Wait_Ack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    IIC_Wait_Ack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??IIC_Ack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    IIC_Ack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??IIC_Nack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    IIC_Nack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??IIC_Send_Byte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    IIC_Send_Byte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??IIC_Read_Byte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    IIC_Read_Byte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ADXL345_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ADXL345_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ADXL345_sleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ADXL345_sleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ADXL345_WR_Reg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ADXL345_WR_Reg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ADXL345_RD_Reg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ADXL345_RD_Reg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Usart0_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Usart0_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??UartTX_Send_String?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UartTX_Send_String

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MPU6050_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MPU6050_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MPU6050_Pose?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MPU6050_Pose

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??I2C_Write_Buffer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    I2C_Write_Buffer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??I2C_Read_Buffer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    I2C_Read_Buffer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??I2C_Read?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    I2C_Read

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??I2C_Write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    I2C_Write

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "error">`:
   \   000000   6572726F     DB "error"
   \            7200    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_30800000:
   \   000000   00008030     DD 30800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40000000:
   \   000000   00000040     DD 40000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c0000000:
   \   000000   000000C0     DD 0C0000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42653333:
   \   000000   33336542     DD 42653333H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3f800000:
   \   000000   0000803F     DD 3F800000H
    399          
    400          //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ADXL345_Init                       2      0      0
       -> IIC_Init_IO                   4      0      0
     ADXL345_RD_Reg                     0      0      9
       -> IIC_Start                     0      0     18
       -> IIC_Send_Byte                 0      0     18
       -> IIC_Wait_Ack                  0      0     18
       -> IIC_Send_Byte                 0      0     18
       -> IIC_Wait_Ack                  0      0     18
       -> IIC_Start                     0      0     18
       -> IIC_Send_Byte                 0      0     18
       -> IIC_Wait_Ack                  0      0     18
       -> IIC_Read_Byte                 0      0     18
       -> IIC_Stop                      0      0     18
     ADXL345_WR_Reg                     0      0      9
       -> IIC_Start                     0      0     18
       -> IIC_Send_Byte                 0      0     18
       -> IIC_Wait_Ack                  0      0     18
       -> IIC_Send_Byte                 0      0     18
       -> IIC_Wait_Ack                  0      0     18
       -> IIC_Send_Byte                 0      0     18
       -> IIC_Wait_Ack                  0      0     18
       -> IIC_Stop                      0      0     18
     ADXL345_sleep                      0      0      0
     Delay_us                           0      0     10
     I2C_Read                           0      0      9
       -> I2C_Read_Buffer               0      0     18
     I2C_Read_Buffer                    1      0     19
       -> IIC_Start                     0      0     20
       -> IIC_Send_Byte                 0      0     20
       -> IIC_Wait_Ack                  0      0     20
       -> IIC_Stop                      0      0     20
       -> IIC_Send_Byte                 0      0     20
       -> IIC_Wait_Ack                  0      0     20
       -> IIC_Start                     0      0     20
       -> IIC_Send_Byte                 0      0     20
       -> IIC_Wait_Ack                  0      0     20
       -> IIC_Ack                       0      0     20
       -> IIC_Read_Byte                 0      0     20
       -> IIC_Nack                      0      0     20
       -> IIC_Stop                      0      0     20
     I2C_Write                          0      0      9
       -> I2C_Write_Buffer              0      0     18
       -> printf                        0      0     18
     I2C_Write_Buffer                   0      0     23
       -> IIC_Start                     0      0     28
       -> IIC_Send_Byte                 0      0     28
       -> IIC_Wait_Ack                  0      0     28
       -> IIC_Stop                      0      0     28
       -> IIC_Send_Byte                 0      0     28
       -> IIC_Wait_Ack                  0      0     28
       -> IIC_Send_Byte                 0      0     28
       -> IIC_Wait_Ack                  0      0     28
       -> IIC_Stop                      0      0     28
     IIC_Ack                            2      0     10
       -> Delay_us                      4      0      0
       -> Delay_us                      4      0      0
     IIC_Init_IO                        0      0     10
     IIC_Nack                           2      0     10
       -> Delay_us                      4      0      0
       -> Delay_us                      4      0      0
     IIC_Read_Byte                      0      0     19
       -> Delay_us                      0      0     18
       -> Delay_us                      0      0     18
     IIC_Send_Byte                      0      0     23
       -> Delay_us                      0      0     18
       -> Delay_us                      0      0     18
       -> Delay_us                      0      0     18
     IIC_Start                          2      0     14
       -> Delay_us                      4      0      0
       -> Delay_us                      4      0      0
     IIC_Stop                           2      0     14
       -> Delay_us                      4      0      0
       -> Delay_us                      4      0      0
     IIC_Wait_Ack                       2      0     14
       -> Delay_us                      4      0      0
       -> Delay_us                      4      0      0
       -> IIC_Stop                      4      0      0
     MPU6050_Init                       0      0     10
       -> IIC_Init_IO                   0      0     20
       -> mpu_init                      0      0     20
       -> mpu_set_sensors               0      0     20
       -> mpu_configure_fifo            0      0     20
       -> mpu_set_sample_rate           0      0     20
       -> dmp_load_motion_driver_firmware
                                        0      0     20
       -> inv_orientation_matrix_to_scalar
                                        0      0     20
       -> dmp_set_orientation           0      0     20
       -> dmp_enable_feature            0      0     20
       -> dmp_set_fifo_rate             0      0     20
       -> run_self_test                 0      0     20
       -> mpu_set_dmp_state             0      0     20
     MPU6050_Pose                       4      0     32
       -> dmp_read_fifo                 0      0     64
       -> asin                          0      0     48
       -> atan2                         0      0     56
       -> atan2                         0      0     56
     UartTX_Send_String                 0      0      9
     Usart0_Init                        0      0      0
     delay_ms                           0      0     10
       -> Delay_us                      0      0     20


   Segment part sizes:

     Function/Label                      Bytes
     --------------                      -----
     U0CSR                                  1
     _A_P1                                  1
     U0DBUF                                 1
     U0BAUD                                 1
     U0GCR                                  1
     _A_IRCON2                              1
     PERCFG                                 1
     P0SEL                                  1
     P1DIR                                  1
     P2DIR                                  1
     gyro_orientation                       9
     q0                                     4
     q1                                     4
     q2                                     4
     q3                                     4
     Pitch                                  4
     Roll                                   4
     Yaw                                    4
     sensor_timestamp                       4
     gyro                                   6
     accel                                  6
     sensors                                2
     more                                   1
     quat                                  16
     Delay_us                              25
     delay_ms                              39
     ?Subroutine1                           5
     IIC_Init_IO                            9
     IIC_Start                             24
     ??Subroutine9_0                        7
     ??Subroutine10_0                       7
     IIC_Stop                              27
     ??Subroutine11_0                       8
     IIC_Wait_Ack                          41
     ?Subroutine0                           5
     ?Subroutine7                           2
     IIC_Ack                               13
     IIC_Nack                              13
     IIC_Send_Byte                         47
     ??Subroutine12_0                       5
     IIC_Read_Byte                         39
     ?Subroutine2                           2
     ADXL345_Init                          12
     ADXL345_sleep                         15
     ADXL345_WR_Reg                        21
     ?Subroutine3                           9
     ?Subroutine6                           1
     ??Subroutine13_0                       4
     ?Subroutine8                           5
     ??Subroutine14_0                       7
     ADXL345_RD_Reg                        23
     ?Subroutine4                           9
     Usart0_Init                           23
     UartTX_Send_String                    51
     MPU6050_Init                         122
     MPU6050_Pose                         815
     I2C_Write_Buffer                      95
     ?Subroutine5                           9
     I2C_Read_Buffer                       77
     I2C_Read                              24
     I2C_Write                             31
     ?<Initializer for gyro_orientation>    9
     ?<Initializer for q0>                  4
     ??Delay_us?relay                       6
     ??delay_ms?relay                       6
     ??IIC_Init_IO?relay                    6
     ??IIC_Start?relay                      6
     ??IIC_Stop?relay                       6
     ??IIC_Wait_Ack?relay                   6
     ??IIC_Ack?relay                        6
     ??IIC_Nack?relay                       6
     ??IIC_Send_Byte?relay                  6
     ??IIC_Read_Byte?relay                  6
     ??ADXL345_Init?relay                   6
     ??ADXL345_sleep?relay                  6
     ??ADXL345_WR_Reg?relay                 6
     ??ADXL345_RD_Reg?relay                 6
     ??Usart0_Init?relay                    6
     ??UartTX_Send_String?relay             6
     ??MPU6050_Init?relay                   6
     ??MPU6050_Pose?relay                   6
     ??I2C_Write_Buffer?relay               6
     ??I2C_Read_Buffer?relay                6
     ??I2C_Read?relay                       6
     ??I2C_Write?relay                      6
     ?<Constant "error">                    6
     __Constant_30800000                    4
     __Constant_40000000                    4
     __Constant_c0000000                    4
     __Constant_42653333                    4
     __Constant_3f800000                    4

 
 1 671 bytes in segment BANKED_CODE
   132 bytes in segment BANK_RELAYS
    10 bytes in segment SFR_AN
    13 bytes in segment XDATA_I
    13 bytes in segment XDATA_ID
    26 bytes in segment XDATA_ROM_C
    59 bytes in segment XDATA_Z
 
 1 816 bytes of CODE  memory
     6 bytes of CONST memory (+ 20 bytes shared)
     0 bytes of DATA  memory (+ 10 bytes shared)
    72 bytes of XDATA memory

Errors: none
Warnings: none
