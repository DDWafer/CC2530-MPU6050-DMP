///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        25/Dec/2018  15:25:49 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\Source\ADXL354.c                             /
//    Command line       =  -f F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– /
//                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRoute /
//                          r.cfg (-DCPU32MHZ -DROOT=__near_func              /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f F:\key_pro\AAAAAgraduation_proje /
//                          ct\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wConfig.cfg (-DSECURE=0                   /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\key_pro\AAAAAgraduation /
//                          _project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projec /
//                          ts\zstack\Samples\SampleApp\Source\ADXL354.c -D   /
//                          ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC   /
//                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D          /
//                          STM32F10X_MD -D USE_STDPERIPH_DRIVER -lC          /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\RouterEB-Pro\List\ -lA              /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\RouterEB-Pro\List\ --diag_suppress  /
//                          Pe001,Pa010 -o F:\key_pro\AAAAAgraduation_project /
//                          \Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\    /
//                          -e --debug --core=plain --dptr=16,1               /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã– /
//                          Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2530DB\ -I F:\key_pro\AAAAAgraduation_p /
//                          roject\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ -I  /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I         /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I    /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLU /
//                          DE\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ /
//                          ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HA /
//                          L\TARGET\CC2530EB\ -I F:\key_pro\AAAAAgraduation_ /
//                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\OSAL\MCU\CCSOC\ -I                   /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCL /
//                          UDE\ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµ /
//                          Õ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sampl /
//                          es\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\S /
//                          TACK\AF\ -I F:\key_pro\AAAAAgraduation_project\Ωª /
//                          ª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN /
//                          TS\STACK\NWK\ -I F:\key_pro\AAAAAgraduation_proje /
//                          ct\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\SEC\ -I F:\key_pro\AAAAAgraduation_ /
//                          project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SAPI\ -I                       /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS /
//                          \ -I F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥ /
//                          Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STAC /
//                          K\ZDO\ -I F:\key_pro\AAAAAgraduation_project\Ωªª• /
//                          œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS /
//                          \ZMAC\F8W\ -I F:\key_pro\AAAAAgraduation_project\ /
//                          Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\ZMAC\ -I F:\key_pro\AAAAAgraduation_project\ /
//                          Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\SERVICES\SADDR\ -I                           /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\ /
//                          SDATA\ -I F:\key_pro\AAAAAgraduation_project\Ωªª• /
//                          œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS /
//                          \MAC\INCLUDE\ -I F:\key_pro\AAAAAgraduation_proje /
//                          ct\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\MAC\HIGH_LEVEL\ -I                        /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_L /
//                          EVEL\srf04\ -I F:\key_pro\AAAAAgraduation_project /
//                          \Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I         /
//                          F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\..\..\..\ -Ohz       /
//    List file          =  F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\  /
//                          ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\RouterEB-Pro\List\ADXL354.s51       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ADXL354

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_MUL
        EXTERN ?FLT_SUB
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_TO_FLT
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ADXL345_Init?relay
        FUNCTION ??ADXL345_Init?relay,0203H
        PUBLIC ??ADXL345_RD_Reg?relay
        FUNCTION ??ADXL345_RD_Reg?relay,0203H
        PUBLIC ??ADXL345_WR_Reg?relay
        FUNCTION ??ADXL345_WR_Reg?relay,0203H
        PUBLIC ??ADXL345_sleep?relay
        FUNCTION ??ADXL345_sleep?relay,0203H
        PUBLIC ??Delay_us?relay
        FUNCTION ??Delay_us?relay,0203H
        PUBLIC ??I2C_Read?relay
        FUNCTION ??I2C_Read?relay,0203H
        PUBLIC ??I2C_Read_Buffer?relay
        FUNCTION ??I2C_Read_Buffer?relay,0203H
        PUBLIC ??I2C_Write?relay
        FUNCTION ??I2C_Write?relay,0203H
        PUBLIC ??I2C_Write_Buffer?relay
        FUNCTION ??I2C_Write_Buffer?relay,0203H
        PUBLIC ??IIC_Ack?relay
        FUNCTION ??IIC_Ack?relay,0203H
        PUBLIC ??IIC_Init_IO?relay
        FUNCTION ??IIC_Init_IO?relay,0203H
        PUBLIC ??IIC_Nack?relay
        FUNCTION ??IIC_Nack?relay,0203H
        PUBLIC ??IIC_Read_Byte?relay
        FUNCTION ??IIC_Read_Byte?relay,0203H
        PUBLIC ??IIC_Send_Byte?relay
        FUNCTION ??IIC_Send_Byte?relay,0203H
        PUBLIC ??IIC_Start?relay
        FUNCTION ??IIC_Start?relay,0203H
        PUBLIC ??IIC_Stop?relay
        FUNCTION ??IIC_Stop?relay,0203H
        PUBLIC ??IIC_Wait_Ack?relay
        FUNCTION ??IIC_Wait_Ack?relay,0203H
        PUBLIC ??MPU6050_Init?relay
        FUNCTION ??MPU6050_Init?relay,0203H
        PUBLIC ??MPU6050_Pose?relay
        FUNCTION ??MPU6050_Pose?relay,0203H
        PUBLIC ??UartTX_Send_String?relay
        FUNCTION ??UartTX_Send_String?relay,0203H
        PUBLIC ??Usart0_Init?relay
        FUNCTION ??Usart0_Init?relay,0203H
        PUBLIC ??delay_ms?relay
        FUNCTION ??delay_ms?relay,0203H
        PUBLIC ADXL345_Init
        FUNCTION ADXL345_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ADXL345_RD_Reg
        FUNCTION ADXL345_RD_Reg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ADXL345_WR_Reg
        FUNCTION ADXL345_WR_Reg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ADXL345_sleep
        FUNCTION ADXL345_sleep,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Delay_us
        FUNCTION Delay_us,080203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC I2C_Read
        FUNCTION I2C_Read,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC I2C_Read_Buffer
        FUNCTION I2C_Read_Buffer,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC I2C_Write
        FUNCTION I2C_Write,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC I2C_Write_Buffer
        FUNCTION I2C_Write_Buffer,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC IIC_Ack
        FUNCTION IIC_Ack,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IIC_Init_IO
        FUNCTION IIC_Init_IO,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC IIC_Nack
        FUNCTION IIC_Nack,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IIC_Read_Byte
        FUNCTION IIC_Read_Byte,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC IIC_Send_Byte
        FUNCTION IIC_Send_Byte,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC IIC_Start
        FUNCTION IIC_Start,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IIC_Stop
        FUNCTION IIC_Stop,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IIC_Wait_Ack
        FUNCTION IIC_Wait_Ack,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MPU6050_Init
        FUNCTION MPU6050_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MPU6050_Pose
        FUNCTION MPU6050_Pose,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 4, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P2DIR
        PUBWEAK PERCFG
        PUBLIC Pitch
        PUBLIC Roll
        PUBWEAK U0BAUD
        PUBWEAK U0CSR
        PUBWEAK U0DBUF
        PUBWEAK U0GCR
        PUBLIC UartTX_Send_String
        FUNCTION UartTX_Send_String,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Usart0_Init
        FUNCTION Usart0_Init,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Yaw
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P1
        PUBWEAK __Constant_30800000
        PUBWEAK __Constant_3f800000
        PUBWEAK __Constant_40000000
        PUBWEAK __Constant_42653333
        PUBWEAK __Constant_c0000000
        PUBLIC accel
        PUBLIC delay_ms
        FUNCTION delay_ms,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC gyro
        PUBLIC more
        PUBLIC q0
        PUBLIC q1
        PUBLIC q2
        PUBLIC q3
        PUBLIC quat
        PUBLIC sensor_timestamp
        PUBLIC sensors
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
mpu_init            SYMBOL "mpu_init"
mpu_set_sensors     SYMBOL "mpu_set_sensors"
mpu_configure_fifo  SYMBOL "mpu_configure_fifo"
mpu_set_sample_rate SYMBOL "mpu_set_sample_rate"
dmp_load_motion_driver_firmware SYMBOL "dmp_load_motion_driver_firmware"
inv_orientation_matrix_to_scalar SYMBOL "inv_orientation_matrix_to_scalar"
dmp_set_orientation SYMBOL "dmp_set_orientation"
dmp_enable_feature  SYMBOL "dmp_enable_feature"
dmp_set_fifo_rate   SYMBOL "dmp_set_fifo_rate"
run_self_test       SYMBOL "run_self_test"
mpu_set_dmp_state   SYMBOL "mpu_set_dmp_state"
dmp_read_fifo       SYMBOL "dmp_read_fifo"
asin                SYMBOL "asin"
atan2               SYMBOL "atan2"
printf              SYMBOL "printf"
??asin?relay        SYMBOL "?relay", asin
??atan2?relay       SYMBOL "?relay", atan2
??dmp_enable_feature?relay SYMBOL "?relay", dmp_enable_feature
??dmp_load_motion_driver_firmware?relay SYMBOL "?relay", dmp_load_motion_driver_firmware
??dmp_read_fifo?relay SYMBOL "?relay", dmp_read_fifo
??dmp_set_fifo_rate?relay SYMBOL "?relay", dmp_set_fifo_rate
??dmp_set_orientation?relay SYMBOL "?relay", dmp_set_orientation
??inv_orientation_matrix_to_scalar?relay SYMBOL "?relay", inv_orientation_matrix_to_scalar
??mpu_configure_fifo?relay SYMBOL "?relay", mpu_configure_fifo
??mpu_init?relay    SYMBOL "?relay", mpu_init
??mpu_set_dmp_state?relay SYMBOL "?relay", mpu_set_dmp_state
??mpu_set_sample_rate?relay SYMBOL "?relay", mpu_set_sample_rate
??mpu_set_sensors?relay SYMBOL "?relay", mpu_set_sensors
??printf?relay      SYMBOL "?relay", printf
??run_self_test?relay SYMBOL "?relay", run_self_test
ADXL345_Init        SYMBOL "ADXL345_Init"
??ADXL345_Init?relay SYMBOL "?relay", ADXL345_Init
ADXL345_RD_Reg      SYMBOL "ADXL345_RD_Reg"
??ADXL345_RD_Reg?relay SYMBOL "?relay", ADXL345_RD_Reg
ADXL345_WR_Reg      SYMBOL "ADXL345_WR_Reg"
??ADXL345_WR_Reg?relay SYMBOL "?relay", ADXL345_WR_Reg
ADXL345_sleep       SYMBOL "ADXL345_sleep"
??ADXL345_sleep?relay SYMBOL "?relay", ADXL345_sleep
Delay_us            SYMBOL "Delay_us"
??Delay_us?relay    SYMBOL "?relay", Delay_us
I2C_Read            SYMBOL "I2C_Read"
??I2C_Read?relay    SYMBOL "?relay", I2C_Read
I2C_Read_Buffer     SYMBOL "I2C_Read_Buffer"
??I2C_Read_Buffer?relay SYMBOL "?relay", I2C_Read_Buffer
I2C_Write           SYMBOL "I2C_Write"
??I2C_Write?relay   SYMBOL "?relay", I2C_Write
I2C_Write_Buffer    SYMBOL "I2C_Write_Buffer"
??I2C_Write_Buffer?relay SYMBOL "?relay", I2C_Write_Buffer
IIC_Ack             SYMBOL "IIC_Ack"
??IIC_Ack?relay     SYMBOL "?relay", IIC_Ack
IIC_Init_IO         SYMBOL "IIC_Init_IO"
??IIC_Init_IO?relay SYMBOL "?relay", IIC_Init_IO
IIC_Nack            SYMBOL "IIC_Nack"
??IIC_Nack?relay    SYMBOL "?relay", IIC_Nack
IIC_Read_Byte       SYMBOL "IIC_Read_Byte"
??IIC_Read_Byte?relay SYMBOL "?relay", IIC_Read_Byte
IIC_Send_Byte       SYMBOL "IIC_Send_Byte"
??IIC_Send_Byte?relay SYMBOL "?relay", IIC_Send_Byte
IIC_Start           SYMBOL "IIC_Start"
??IIC_Start?relay   SYMBOL "?relay", IIC_Start
IIC_Stop            SYMBOL "IIC_Stop"
??IIC_Stop?relay    SYMBOL "?relay", IIC_Stop
IIC_Wait_Ack        SYMBOL "IIC_Wait_Ack"
??IIC_Wait_Ack?relay SYMBOL "?relay", IIC_Wait_Ack
MPU6050_Init        SYMBOL "MPU6050_Init"
??MPU6050_Init?relay SYMBOL "?relay", MPU6050_Init
MPU6050_Pose        SYMBOL "MPU6050_Pose"
??MPU6050_Pose?relay SYMBOL "?relay", MPU6050_Pose
UartTX_Send_String  SYMBOL "UartTX_Send_String"
??UartTX_Send_String?relay SYMBOL "?relay", UartTX_Send_String
Usart0_Init         SYMBOL "Usart0_Init"
??Usart0_Init?relay SYMBOL "?relay", Usart0_Init
delay_ms            SYMBOL "delay_ms"
??delay_ms?relay    SYMBOL "?relay", delay_ms

        EXTERN mpu_init
        FUNCTION mpu_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_set_sensors
        FUNCTION mpu_set_sensors,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_configure_fifo
        FUNCTION mpu_configure_fifo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_set_sample_rate
        FUNCTION mpu_set_sample_rate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dmp_load_motion_driver_firmware
        FUNCTION dmp_load_motion_driver_firmware,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN inv_orientation_matrix_to_scalar
        FUNCTION inv_orientation_matrix_to_scalar,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dmp_set_orientation
        FUNCTION dmp_set_orientation,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dmp_enable_feature
        FUNCTION dmp_enable_feature,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dmp_set_fifo_rate
        FUNCTION dmp_set_fifo_rate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN run_self_test
        FUNCTION run_self_test,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_set_dmp_state
        FUNCTION mpu_set_dmp_state,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dmp_read_fifo
        FUNCTION dmp_read_fifo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN asin
        FUNCTION asin,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN atan2
        FUNCTION atan2,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??asin?relay
        FUNCTION ??asin?relay,00H
        EXTERN ??atan2?relay
        FUNCTION ??atan2?relay,00H
        EXTERN ??dmp_enable_feature?relay
        FUNCTION ??dmp_enable_feature?relay,00H
        EXTERN ??dmp_load_motion_driver_firmware?relay
        FUNCTION ??dmp_load_motion_driver_firmware?relay,00H
        EXTERN ??dmp_read_fifo?relay
        FUNCTION ??dmp_read_fifo?relay,00H
        EXTERN ??dmp_set_fifo_rate?relay
        FUNCTION ??dmp_set_fifo_rate?relay,00H
        EXTERN ??dmp_set_orientation?relay
        FUNCTION ??dmp_set_orientation?relay,00H
        EXTERN ??inv_orientation_matrix_to_scalar?relay
        FUNCTION ??inv_orientation_matrix_to_scalar?relay,00H
        EXTERN ??mpu_configure_fifo?relay
        FUNCTION ??mpu_configure_fifo?relay,00H
        EXTERN ??mpu_init?relay
        FUNCTION ??mpu_init?relay,00H
        EXTERN ??mpu_set_dmp_state?relay
        FUNCTION ??mpu_set_dmp_state?relay,00H
        EXTERN ??mpu_set_sample_rate?relay
        FUNCTION ??mpu_set_sample_rate?relay,00H
        EXTERN ??mpu_set_sensors?relay
        FUNCTION ??mpu_set_sensors?relay,00H
        EXTERN ??printf?relay
        FUNCTION ??printf?relay,00H
        EXTERN ??run_self_test?relay
        FUNCTION ??run_self_test?relay,00H

// F:\key_pro\AAAAAgraduation_project\Ωªª•œµÕ≥≥Ã–Ú\ ÷ª∑\ ÷ª∑\÷ª∑¢ÀÕ ˝æ›\Projects\zstack\Samples\SampleApp\Source\ADXL354.c
//    1 #include <ioCC2530.h>

        ASEGN SFR_AN:DATA:NOROOT,086H
// unsigned char volatile __sfr U0CSR
U0CSR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c1H
// unsigned char volatile __sfr U0DBUF
U0DBUF:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c2H
// unsigned char volatile __sfr U0BAUD
U0BAUD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c5H
// unsigned char volatile __sfr U0GCR
U0GCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//    2 #include <delay.h>
//    3 #include <iic.h>
//    4 #include <inv_mpu.h>
//    5 #include <inv_mpu_dmp_motion_driver.h>
//    6 #include <math.h>
//    7 #include <stdio.h>
//    8 /*∫Í≥£¡ø∂®“Â*/
//    9 
//   10 #define uint unsigned int 
//   11 #define uchar unsigned char
//   12 
//   13 #define IIC_SCL P1_4
//   14 #define IIC_SDA P1_3
//   15 #define IIC_INT2 P1_2
//   16 #define IIC_INT1 P1_1
//   17 
//   18 /*∫Í∫Ø ˝∂®“Â*/
//   19 #define SDA_IN()  {P1DIR &= ~(0x01<<3);}  //IIC_SDA≈‰÷√Œ™ ‰»ÎΩ≈ ƒ¨»œ…œ¿≠
//   20 #define SDA_OUT() {P1DIR |= 0x01<<3; }
//   21 #define SCL_OUT() {P1DIR |= 0x01<<4; }
//   22 /*MPU6050≈‰÷√≤Œ ˝*/

        RSEG XDATA_I:XDATA:NOROOT(0)
//   23 static signed char gyro_orientation[9] = {-1, 0, 0,
gyro_orientation:
        DATA8
        DS 9
        REQUIRE `?<Initializer for gyro_orientation>`
        REQUIRE __INIT_XDATA_I
//   24                                            0,-1, 0,
//   25                                            0, 0, 1};

        RSEG XDATA_I:XDATA:NOROOT(0)
//   26 float q0=1.0f,q1=0.0f,q2=0.0f,q3=0.0f;
q0:
        DATA32
        DS 4
        REQUIRE `?<Initializer for q0>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
q1:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
q2:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
q3:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   27 float Pitch,Roll,Yaw;
Pitch:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
Roll:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
Yaw:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   28 unsigned long sensor_timestamp;
sensor_timestamp:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   29 short gyro[3], accel[3], sensors;
gyro:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
accel:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
sensors:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   30 unsigned char more;
more:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   31 long quat[4];
quat:
        DS 16
        REQUIRE __INIT_XDATA_Z
//   32 /*∫Ø ˝…˘√˜*/
//   33 void Delay_us(uint t);
//   34 //void delay_ms(uint t);
//   35 
//   36 /*∫Ø ˝∂®“Â*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   37 void Delay_us(uint t)   //—” ± t us
Delay_us:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Delay_us
        CODE
//   38 {
        ; Saved register size: 0
        ; Auto size: 0
//   39   uint i = 0;
//   40   for(i=0;i<t;i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??Delay_us_0
//   41   {
//   42       asm("NOP");
??Delay_us_1:
        NOP
//   43   }
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??Delay_us_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??Delay_us_1
//   44 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   45 void delay_ms(uint t)  // —” ± t ms
delay_ms:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function delay_ms
        CODE
//   46 {
        FUNCALL delay_ms, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   47   uint i = 0;
//   48   for(i=0; i<t ; i++)
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??delay_ms_0
//   49     Delay_us(1000);
??delay_ms_1:
        ; Setup parameters for call to function Delay_us
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??Delay_us?relay
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??delay_ms_0:
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 0
        MOV     A,R7
        SUBB    A,?V0 + 1
        JC      ??delay_ms_1
        CFI EndBlock cfiBlock1
//   50 }
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//   51 
//   52 //IIC–≠“È≈‰÷√
//   53 //≥ı ºªØIIC

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   54 void IIC_Init_IO(void)
IIC_Init_IO:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function IIC_Init_IO
        CODE
//   55 {
        ; Saved register size: 0
        ; Auto size: 0
//   56   SCL_OUT();
        ORL     0xfe,#0x10
//   57   SDA_OUT();
        ORL     0xfe,#0x8
//   58 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
        REQUIRE P1DIR
//   59 
//   60 //IICø™ º–≈∫≈

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   61 void IIC_Start(void)
IIC_Start:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function IIC_Start
        CODE
//   62 {
        FUNCALL IIC_Start, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Start, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   63   SDA_OUT();
        ORL     0xfe,#0x8
//   64   IIC_SDA = 1;
        SETB    0x90.3
//   65   IIC_SCL = 1;
        SETB    0x90.4
//   66   Delay_us(4);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
//   67   IIC_SDA = 0;
        CLR     0x90.3
//   68   Delay_us(4);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x4
        SJMP    ??Subroutine9_0
        CFI EndBlock cfiBlock4
        REQUIRE P1DIR
        REQUIRE _A_P1
//   69   IIC_SCL = 0;
//   70 }
//   71 //IICÕ£÷π–≈∫≈

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   72 void IIC_Stop(void)
IIC_Stop:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function IIC_Stop
        CODE
//   73 {
        FUNCALL IIC_Stop, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Stop, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   74   SDA_OUT();
        ORL     0xfe,#0x8
//   75   IIC_SCL = 0;
        CLR     0x90.4
//   76   IIC_SDA = 0;
        CLR     0x90.3
//   77   Delay_us(4);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x4
        LCALL   ??Subroutine11_0 & 0xFFFF
//   78   IIC_SCL = 1;
//   79   IIC_SDA = 1;
??CrossCallReturnLabel_9:
        SETB    0x90.3
//   80   Delay_us(4);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
//   81 }
        SJMP    ??Subroutine10_0
        CFI EndBlock cfiBlock5
        REQUIRE P1DIR
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function Delay_us
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x2
        CFI EndBlock cfiBlock6
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
        CLR     0x90.4
        CFI EndBlock cfiBlock7
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine10_0:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond10) CFA_SP SP+-5
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     R2,#0x2
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond15) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond15) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond15) CFA_SP SP+-5
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond16) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond16) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond16) CFA_SP SP+-5
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond17) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond17) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond17) CFA_SP SP+-5
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
        SETB    0x90.4
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20
//   82 //IIC µ»¥˝”¶¥–≈∫≈
//   83 // ∑µªÿ÷µ £∫ 1£∫”¶¥ ß∞‹  0£∫ ”¶¥≥…π¶

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   84 uchar IIC_Wait_Ack(void )
IIC_Wait_Ack:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function IIC_Wait_Ack
        CODE
//   85 {
        FUNCALL IIC_Wait_Ack, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Wait_Ack, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Wait_Ack, IIC_Stop
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   86   uint ErrTime = 0;
//   87   SDA_IN();
        ANL     0xfe,#0xf7
//   88   Delay_us(1);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x1
        LCALL   ??Subroutine11_0 & 0xFFFF
//   89   IIC_SCL=1;Delay_us(1);
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
        MOV     A,#-0x5
//   90   while(IIC_SDA)
??IIC_Wait_Ack_0:
        MOV     C,0x90.3
        JNC     ??IIC_Wait_Ack_1
//   91   {
//   92     ErrTime++;
//   93     if(ErrTime > 250)
        DEC     A
        JNZ     ??IIC_Wait_Ack_0
//   94     {
//   95       IIC_Stop();
        ; Setup parameters for call to function IIC_Stop
        LCALL   ??IIC_Stop?relay
//   96       return 1;
        MOV     R1,#0x1
        SJMP    ??IIC_Wait_Ack_2
//   97     }
//   98   }
//   99   IIC_SCL = 0;
??IIC_Wait_Ack_1:
        CLR     0x90.4
//  100   return 0;
        MOV     R1,#0x0
??IIC_Wait_Ack_2:
        SJMP    ??Subroutine10_0
        CFI EndBlock cfiBlock21
        REQUIRE P1DIR
        REQUIRE _A_P1
//  101 }
//  102 //IIC≤˙…˙ACK”¶¥

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  103 void IIC_Ack(void)
IIC_Ack:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function IIC_Ack
        CODE
//  104 {
        FUNCALL IIC_Ack, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Ack, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  105   IIC_SCL = 0;
        CLR     0x90.4
//  106   SDA_OUT();
        ORL     0xfe,#0x8
//  107   IIC_SDA = 0;
        CLR     0x90.3
//  108   Delay_us(2);
        ; Setup parameters for call to function Delay_us
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock22
        REQUIRE _A_P1
        REQUIRE P1DIR
//  109   IIC_SCL = 1;
//  110   Delay_us(2);
//  111   IIC_SCL = 0;
//  112 }
//  113 //IIC ≤ª≤˙…˙Ack ”¶¥

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  114 void IIC_Nack(void)
IIC_Nack:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function IIC_Nack
        CODE
//  115 {
        FUNCALL IIC_Nack, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Nack, Delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  116   IIC_SCL = 0;
        CLR     0x90.4
//  117   SDA_OUT();
        ORL     0xfe,#0x8
//  118   IIC_SDA = 1;
        SETB    0x90.3
//  119   Delay_us(2);
        ; Setup parameters for call to function Delay_us
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock23
        REQUIRE _A_P1
        REQUIRE P1DIR
//  120   IIC_SCL = 1;
//  121   Delay_us(2);
//  122   IIC_SCL = 0;
//  123 }
//  124 //IIC ∑¢ÀÕ“ª∏ˆ◊÷Ω⁄  txd

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  125 void IIC_Send_Byte(uchar txd)
IIC_Send_Byte:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function IIC_Send_Byte
        CODE
//  126 {
        FUNCALL IIC_Send_Byte, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Send_Byte, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Send_Byte, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  127   uchar t;
//  128   SDA_OUT();
        ORL     0xfe,#0x8
//  129   IIC_SCL = 0;  //¿≠µÕ ±÷”–≈∫≈£¨ø™ º ˝æ›¥´ ‰
        CLR     0x90.4
//  130   for(t=0;t<8;t++)
        MOV     R6,#0x8
//  131   {
//  132     IIC_SDA = (txd & 0x80)>>7;
??IIC_Send_Byte_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        MOV     0x90.3,C
//  133     txd <<= 1;
        CLR     C
        RLC     A
        MOV     R7,A
//  134     Delay_us(2);
        ; Setup parameters for call to function Delay_us
        LCALL   ?Subroutine7 & 0xFFFF
//  135     IIC_SCL = 1;
//  136     Delay_us(2);
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
//  137     IIC_SCL = 0;
        CLR     0x90.4
//  138     Delay_us(2);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
//  139   }
        DEC     R6
        MOV     A,R6
        JNZ     ??IIC_Send_Byte_0
//  140 }
        SJMP    ??Subroutine12_0
        CFI EndBlock cfiBlock24
        REQUIRE P1DIR
        REQUIRE _A_P1
//  141 //IIC ∂¡»°“ª∏ˆ◊÷Ω⁄ 
//  142 // ≤Œ ˝ ack: 1:∑¢ÀÕAck  0: ∑¢ÀÕNack

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  143 uchar IIC_Read_Byte(void)
IIC_Read_Byte:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function IIC_Read_Byte
        CODE
//  144 {
        FUNCALL IIC_Read_Byte, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Read_Byte, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  145   uchar i=0, receive=0;
        MOV     R6,#0x0
//  146   SDA_IN();
        ANL     0xfe,#0xf7
//  147   for(i=0;i<8;i++)
        MOV     R7,#0x8
//  148   {
//  149     IIC_SCL = 0;
??IIC_Read_Byte_0:
        CLR     0x90.4
//  150     Delay_us(2);
        ; Setup parameters for call to function Delay_us
        LCALL   ?Subroutine7 & 0xFFFF
//  151     IIC_SCL = 1;
//  152     receive <<= 1;
??CrossCallReturnLabel_8:
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R6,A
//  153     if(IIC_SDA)
        MOV     C,0x90.3
        JNC     ??IIC_Read_Byte_1
//  154       receive++;
        INC     R6
//  155     Delay_us(1);
??IIC_Read_Byte_1:
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
//  156   }
        DEC     R7
        MOV     A,R7
        JNZ     ??IIC_Read_Byte_0
//  157 //  if(!ack)
//  158 //    IIC_Nack();
//  159 //  else
//  160 //    IIC_Ack();
//  161   return receive;
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock25
        REQUIRE P1DIR
        REQUIRE _A_P1
//  162 }
//  163 //ADXL345º”ÀŸ∂»¥´∏–∆˜ ≈‰÷√”Î π”√
//  164 #define ADXL_WRITE 0xD0
//  165 #define ADXL_READ  0xD1
//  166 //œÚADXL345 Ãÿ∂®ºƒ¥Ê∆˜÷––¥»Î ÷µ
//  167 //addr: ºƒ¥Ê∆˜µÿ÷∑   val:–¥»Îµƒ÷µ
//  168 // ADXL345≥ı ºªØ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  169 uchar ADXL345_Init(void)
ADXL345_Init:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function ADXL345_Init
        CODE
//  170 {
        FUNCALL ADXL345_Init, IIC_Init_IO
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  171   IIC_Init_IO();
        ; Setup parameters for call to function IIC_Init_IO
        LCALL   ??IIC_Init_IO?relay
//  172   return 0;
        MOV     R1,#0x0
        LJMP    ??Subroutine10_0 & 0xFFFF
        CFI EndBlock cfiBlock26
//  173 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  174 uchar ADXL345_sleep(void)//¿≠µÕ ‰≥ˆµÁ—π
ADXL345_sleep:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function ADXL345_sleep
        CODE
//  175 {
        ; Saved register size: 0
        ; Auto size: 0
//  176   P1DIR |= (0x03)<<3;
        ORL     0xfe,#0x18
//  177   P1_4=0;
        CLR     0x90.4
//  178   P1_3=0;
        CLR     0x90.3
//  179   P1DIR &= (~0x03)<<1; // p1_6 P1_7 output
        ANL     0xfe,#0xf8
//  180   return 0;
        MOV     R1,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock27
        REQUIRE P1DIR
        REQUIRE _A_P1
//  181 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  182 void ADXL345_WR_Reg(uchar addr, uchar val)
ADXL345_WR_Reg:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function ADXL345_WR_Reg
        CODE
//  183 {
        FUNCALL ADXL345_WR_Reg, IIC_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_WR_Reg, IIC_Send_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_WR_Reg, IIC_Wait_Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_WR_Reg, IIC_Send_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_WR_Reg, IIC_Wait_Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_WR_Reg, IIC_Send_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_WR_Reg, IIC_Wait_Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_WR_Reg, IIC_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  184   IIC_Start();
        ; Setup parameters for call to function IIC_Start
        LCALL   ?Subroutine3 & 0xFFFF
//  185   IIC_Send_Byte(ADXL_WRITE);
//  186   IIC_Wait_Ack();
//  187   IIC_Send_Byte(addr);
//  188   IIC_Wait_Ack();
//  189   IIC_Send_Byte(val);
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function IIC_Send_Byte
        MOV     A,R6
        LCALL   ?Subroutine6 & 0xFFFF
//  190   IIC_Wait_Ack();
//  191   IIC_Stop();
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function IIC_Stop
        LCALL   ??IIC_Stop?relay
//  192 }
        SJMP    ??Subroutine12_0
        CFI EndBlock cfiBlock28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,R6
        MOV     R1,A
        CFI EndBlock cfiBlock29
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock30
//  193 //∂¡»°ADXL345÷∏∂®ºƒ¥Ê∆˜÷µ
//  194 //addr: ƒø±Íºƒ¥Ê∆˜µÿ÷∑
//  195 //∑µªÿ÷µ£∫  ƒø±Íºƒ¥Ê∆˜÷µ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  196 uchar ADXL345_RD_Reg(uchar addr)
ADXL345_RD_Reg:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function ADXL345_RD_Reg
        CODE
//  197 {
        FUNCALL ADXL345_RD_Reg, IIC_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_RD_Reg, IIC_Send_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_RD_Reg, IIC_Wait_Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_RD_Reg, IIC_Send_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_RD_Reg, IIC_Wait_Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_RD_Reg, IIC_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_RD_Reg, IIC_Send_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_RD_Reg, IIC_Wait_Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_RD_Reg, IIC_Read_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADXL345_RD_Reg, IIC_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  198   uchar temp=0;
//  199   IIC_Start();
        ; Setup parameters for call to function IIC_Start
        LCALL   ?Subroutine3 & 0xFFFF
//  200   IIC_Send_Byte(ADXL_WRITE);
//  201   IIC_Wait_Ack();
//  202   IIC_Send_Byte(addr);
//  203   IIC_Wait_Ack();
//  204   IIC_Start();  // ÷ÿ–¬∆Ù∂Ø
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function IIC_Start
        LCALL   ?Subroutine4 & 0xFFFF
//  205   IIC_Send_Byte(ADXL_READ);
//  206   IIC_Wait_Ack();
//  207   temp = IIC_Read_Byte();  // 0±Ì æ∑¢ÀÕNack  ∂¡»°“ª∏ˆ◊÷Ω⁄ £¨≤ª‘ŸºÃ–¯∂¡»°
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function IIC_Read_Byte
        LCALL   ??IIC_Read_Byte?relay
        MOV     A,R1
        MOV     R6,A
//  208   IIC_Stop();
        ; Setup parameters for call to function IIC_Stop
        LCALL   ??IIC_Stop?relay
//  209   return temp;
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock31
//  210 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        ; Setup parameters for call to function IIC_Send_Byte
        ; Setup parameters for call to function IIC_Send_Byte
        MOV     A,R7
        MOV     R1,A
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_17:
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34
//  211 // USART0 ¥Æø⁄0≈‰÷√

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  212 void Usart0_Init(void)
Usart0_Init:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function Usart0_Init
        CODE
//  213 {
        ; Saved register size: 0
        ; Auto size: 0
//  214   PERCFG = 0x00;  //  π”√±∏”√Œª÷√1
        MOV     0xf1,#0x0
//  215   P0SEL = 0x0c;  // P0_2 P0_3 Œ™Õ‚…Ëπ¶ƒ‹
        MOV     0xf3,#0xc
//  216   P2DIR &= ~0XC0;
        ANL     0xff,#0x3f
//  217   U0CSR |= 0x80;
        ORL     0x86,#0x80
//  218   U0GCR |= 8; 
        ORL     0xc5,#0x8
//  219   U0BAUD |= 59;
        ORL     0xc2,#0x3b
//  220   UTX0IF = 0; //UART0 TX ÷–∂œ±Í÷æ≥ı º÷√Œª
        CLR     0xe8.1
//  221 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock35
        REQUIRE PERCFG
        REQUIRE P0SEL
        REQUIRE P2DIR
        REQUIRE U0CSR
        REQUIRE U0GCR
        REQUIRE U0BAUD
        REQUIRE _A_IRCON2
//  222 // USART0∑¢ÀÕ “ª∏ˆ◊÷∑˚¥Æ ˝æ›

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  223 void UartTX_Send_String(uchar *Data,int len)
UartTX_Send_String:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function UartTX_Send_String
        CODE
//  224 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  225   int j;
//  226   for(j=0;j<len;j++)
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??UartTX_Send_String_0
//  227   {
//  228     U0DBUF = *Data++;
??UartTX_Send_String_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     0xc1,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  229     while(UTX0IF == 0);
??UartTX_Send_String_2:
        MOV     C,0xe8.1
        JNC     ??UartTX_Send_String_2
//  230     UTX0IF = 0;
        CLR     0xe8.1
//  231   }
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??UartTX_Send_String_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R4
        MOV     A,R1
        SUBB    A,R5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??UartTX_Send_String_1
//  232 }
        SJMP    ??Subroutine12_0
        CFI EndBlock cfiBlock36
        REQUIRE U0DBUF
        REQUIRE _A_IRCON2
//  233 //void main(void)
//  234 //{
//  235 //  uchar temp[10] = {0x21,0};
//  236 //  /*œµÕ≥ ±÷”—°‘Ò 32MHz  ƒ¨»œ «16MHz*/
//  237 //  CLKCONCMD = 0;
//  238 //  //while (CLKCONSTA != 0);// wait until stable
//  239 //  
//  240 //  /* IOø⁄≈‰÷√ */
//  241 //  /* Õ‚…Ë≥ı ºªØ */
//  242 //  
//  243 //  Usart0_Init();
//  244 //  ADXL345_Init();
//  245 //void ADXL345_read(void){
//  246 //  unsigned char temp[10] = {0x21,0};
//  247 //  temp[0] = ADXL345_RD_Reg(0x00);
//  248 //  //UartTX_Send_String(temp , 2);
//  249 //  delay_ms(1000);
//  250 //  ADXL345_WR_Reg(0x1e, 0x45);
//  251 //  temp[0] = ADXL345_RD_Reg(0x1e);
//  252 //  //UartTX_Send_String(temp , 2);
//  253 //  delay_ms(1000);
//  254 //  ADXL345_WR_Reg(0x1f, 0x1f);
//  255 //  temp[0] = ADXL345_RD_Reg(0x1f);
//  256 //  //UartTX_Send_String(temp , 2);
//  257 //  delay_ms(1000);
//  258 //  ADXL345_WR_Reg(0x20, 0x20);
//  259 //  temp[0] = ADXL345_RD_Reg(0x20);
//  260 //  //UartTX_Send_String(temp , 2);
//  261 //  delay_ms(1000);
//  262 //}
//  263 //}
//  264 extern int mpu_init(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  265 void MPU6050_Init(void)
MPU6050_Init:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI Function MPU6050_Init
        CODE
//  266 {
        FUNCALL MPU6050_Init, IIC_Init_IO
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Init, mpu_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Init, mpu_set_sensors
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Init, mpu_configure_fifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Init, mpu_set_sample_rate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Init, dmp_load_motion_driver_firmware
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Init, inv_orientation_matrix_to_scalar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Init, dmp_set_orientation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Init, dmp_enable_feature
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Init, dmp_set_fifo_rate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Init, run_self_test
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Init, mpu_set_dmp_state
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  267 	int result=0;
//  268 	IIC_Init_IO();
        ; Setup parameters for call to function IIC_Init_IO
        LCALL   ??IIC_Init_IO?relay
//  269 	result=mpu_init();
//  270 	//printf("%u\n",result);
//  271 	if(!result)
        ; Setup parameters for call to function mpu_init
        LCALL   ??mpu_init?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??MPU6050_Init_0
//  272 	{	 		 
//  273 		if(!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))		//mpu_set_sensor
        ; Setup parameters for call to function mpu_set_sensors
        MOV     R1,#0x78
        LCALL   ??mpu_set_sensors?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??MPU6050_Init_1
//  274 		if(!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))	//mpu_configure_fifo
        ; Setup parameters for call to function mpu_configure_fifo
        MOV     R1,#0x78
        LCALL   ??mpu_configure_fifo?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??MPU6050_Init_1
//  275 		if(!mpu_set_sample_rate(DEFAULT_MPU_HZ))	   	  		//mpu_set_sample_rate
        ; Setup parameters for call to function mpu_set_sample_rate
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??mpu_set_sample_rate?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??MPU6050_Init_1
//  276 		if(!dmp_load_motion_driver_firmware())   	  			//dmp_load_motion_driver_firmvare
        ; Setup parameters for call to function dmp_load_motion_driver_firmware
        LCALL   ??dmp_load_motion_driver_firmware?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??MPU6050_Init_1
//  277 		if(!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation))) 	  //dmp_set_orientation
        ; Setup parameters for call to function dmp_set_orientation
        ; Setup parameters for call to function inv_orientation_matrix_to_scalar
        MOV     R2,#gyro_orientation & 0xff
        MOV     R3,#(gyro_orientation >> 8) & 0xff
        LCALL   ??inv_orientation_matrix_to_scalar?relay
        LCALL   ??dmp_set_orientation?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??MPU6050_Init_1
//  278 		if(!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
//  279 		    DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
//  280 		    DMP_FEATURE_GYRO_CAL))		   	 					 //dmp_enable_feature
        ; Setup parameters for call to function dmp_enable_feature
        MOV     R2,#0x73
        MOV     R3,#0x1
        LCALL   ??dmp_enable_feature?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??MPU6050_Init_1
//  281 		if(!dmp_set_fifo_rate(DEFAULT_MPU_HZ))   	 			 //dmp_set_fifo_rate
        ; Setup parameters for call to function dmp_set_fifo_rate
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??dmp_set_fifo_rate?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??MPU6050_Init_1
//  282 		run_self_test();		//??
        ; Setup parameters for call to function run_self_test
        LCALL   ??run_self_test?relay
//  283 		if(!mpu_set_dmp_state(1));
??MPU6050_Init_1:
        ; Setup parameters for call to function mpu_set_dmp_state
        MOV     R1,#0x1
        LCALL   ??mpu_set_dmp_state?relay
//  284 	}
//  285 }
??MPU6050_Init_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock37
//  286 #define q30  1073741824.0f
//  287 extern short gyro[3], accel[3];

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  288 void MPU6050_Pose(void)
MPU6050_Pose:
        CFI Block cfiBlock38 Using cfiCommon0
        CFI Function MPU6050_Pose
        CODE
//  289 {
        FUNCALL MPU6050_Pose, dmp_read_fifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Pose, asin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Pose, atan2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Pose, atan2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
//  290 	dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more);	 
        ; Setup parameters for call to function dmp_read_fifo
        MOV     ?V0 + 0,#more & 0xff
        MOV     ?V0 + 1,#(more >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#sensors & 0xff
        MOV     ?V0 + 1,#(sensors >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,#sensor_timestamp & 0xff
        MOV     ?V0 + 1,#(sensor_timestamp >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 0,#quat & 0xff
        MOV     ?V0 + 1,#(quat >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#accel & 0xff
        MOV     R5,#(accel >> 8) & 0xff
        MOV     R2,#gyro & 0xff
        MOV     R3,#(gyro >> 8) & 0xff
        LCALL   ??dmp_read_fifo?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
//  291 	if(sensors & INV_WXYZ_QUAT )
        MOV     DPTR,#sensors + 1
        MOVX    A,@DPTR
        ANL     A,#0x1
        JNZ     $+5
        LJMP    ??MPU6050_Pose_0 & 0xFFFF
//  292 	{
//  293 		q0 = quat[0] / q30;	
        MOV     DPTR,#quat
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_30800000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#q0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  294 		q1 = quat[1] / q30;
        MOV     DPTR,#quat + 4
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_30800000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#q1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  295 		q2 = quat[2] / q30;
        MOV     DPTR,#quat + 8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_30800000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#q2
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  296 		q3 = quat[3] / q30;
        MOV     DPTR,#quat + 12
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_30800000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#q3
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  297 
//  298 		Pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
        MOV     DPTR,#q0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_40000000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     DPTR,#q1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_c0000000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        ; Setup parameters for call to function asin
        MOV     ?V0 + 0,?V0 + 12
        MOV     ?V0 + 1,?V0 + 13
        MOV     ?V0 + 2,?V0 + 14
        MOV     ?V0 + 3,?V0 + 15
        MOV     DPTR,#q3
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        PUSH    ?V0 + 0
        CFI CFA_SP SP+-1
        PUSH    ?V0 + 1
        CFI CFA_SP SP+-2
        PUSH    ?V0 + 2
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 3
        CFI CFA_SP SP+-4
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     DPTR,#q2
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        POP     ?V0 + 11
        CFI CFA_SP SP+-3
        POP     ?V0 + 10
        CFI CFA_SP SP+-2
        POP     ?V0 + 9
        CFI CFA_SP SP+-1
        POP     ?V0 + 8
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_ADD
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        LCALL   ??asin?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#__Constant_42653333
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     DPTR,#Pitch
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  299 		Roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
        MOV     DPTR,#q2
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_40000000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        ; Setup parameters for call to function atan2
        MOV     DPTR,#q1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        PUSH    ?V0 + 12
        CFI CFA_SP SP+-1
        PUSH    ?V0 + 13
        CFI CFA_SP SP+-2
        PUSH    ?V0 + 14
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 15
        CFI CFA_SP SP+-4
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
        MOV     ?V0 + 2,?V0 + 10
        MOV     ?V0 + 3,?V0 + 11
        MOV     DPTR,#q2
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_MUL
        POP     ?V0 + 15
        CFI CFA_SP SP+-3
        POP     ?V0 + 14
        CFI CFA_SP SP+-2
        POP     ?V0 + 13
        CFI CFA_SP SP+-1
        POP     ?V0 + 12
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_SUB
        MOV     DPTR,#__Constant_3f800000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_ADD
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     DPTR,#q3
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     DPTR,#q1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        LCALL   ??atan2?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#__Constant_42653333
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#Roll
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  300 		Yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
        ; Setup parameters for call to function atan2
        MOV     DPTR,#q0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#q0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#q1
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#q1
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
        MOV     DPTR,#q2
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#q2
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_SUB
        MOV     DPTR,#q3
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#q3
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     DPTR,#q1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#q2
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#q0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#q3
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
        MOV     DPTR,#__Constant_40000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   ??atan2?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#__Constant_42653333
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#Yaw
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  301 	}
//  302 }
??MPU6050_Pose_0:
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock38
//  303 
//  304 //∂‘Ω”DMPø‚
//  305 typedef unsigned char u8;

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  306 u8 I2C_Write_Buffer(u8 addr, u8 reg, u8 len, u8 * data)
I2C_Write_Buffer:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function I2C_Write_Buffer
        CODE
//  307 {
        FUNCALL I2C_Write_Buffer, IIC_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write_Buffer, IIC_Send_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write_Buffer, IIC_Wait_Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write_Buffer, IIC_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write_Buffer, IIC_Send_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write_Buffer, IIC_Wait_Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write_Buffer, IIC_Send_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write_Buffer, IIC_Wait_Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write_Buffer, IIC_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        LCALL   ?Subroutine5 & 0xFFFF
//  308     int i;
//  309     IIC_Start();
//  310     //I2C_Send_Byte(addr << 1 | 0);//
//  311 		IIC_Send_Byte(0XD0);
//  312     if (IIC_Wait_Ack()) 
??CrossCallReturnLabel_4:
        JZ      ??I2C_Write_Buffer_0
//  313 	{
//  314         IIC_Stop();
??I2C_Write_Buffer_1:
        ; Setup parameters for call to function IIC_Stop
        LCALL   ??IIC_Stop?relay
//  315         return 0;
        MOV     R1,#0x0
        SJMP    ??I2C_Write_Buffer_2
//  316     }
//  317     IIC_Send_Byte(reg);
??I2C_Write_Buffer_0:
        ; Setup parameters for call to function IIC_Send_Byte
        MOV     R1,?V0 + 4
        LCALL   ??Subroutine13_0 & 0xFFFF
//  318     IIC_Wait_Ack();
//  319     for (i = 0; i < len; i++) 
??CrossCallReturnLabel_13:
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        SJMP    ??I2C_Write_Buffer_3
//  320 	{
//  321         IIC_Send_Byte(*data);
??I2C_Write_Buffer_4:
        ; Setup parameters for call to function IIC_Send_Byte
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        LCALL   ?Subroutine6 & 0xFFFF
//  322         if (IIC_Wait_Ack()) 
??CrossCallReturnLabel_12:
        MOV     A,R1
        JNZ     ??I2C_Write_Buffer_1
//  323 		{
//  324             IIC_Stop();
//  325             return 0;   //?®¢®®?®∫°Ï°„®π
//  326         }
//  327 		data++;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  328     }
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??I2C_Write_Buffer_3:
        MOV     ?V0 + 2,?V0 + 5
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,?V0 + 2
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??I2C_Write_Buffer_4
//  329     IIC_Stop();
        ; Setup parameters for call to function IIC_Stop
        LCALL   ??IIC_Stop?relay
//  330     return 1;
        MOV     R1,#0x1
??I2C_Write_Buffer_2:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock39
//  331 }
//  332 
//  333 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  334 u8 I2C_Read_Buffer(u8 addr, u8 reg, u8 len, u8* buf)
I2C_Read_Buffer:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function I2C_Read_Buffer
        CODE
//  335 {
        FUNCALL I2C_Read_Buffer, IIC_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read_Buffer, IIC_Send_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read_Buffer, IIC_Wait_Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read_Buffer, IIC_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read_Buffer, IIC_Send_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read_Buffer, IIC_Wait_Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read_Buffer, IIC_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read_Buffer, IIC_Send_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read_Buffer, IIC_Wait_Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read_Buffer, IIC_Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read_Buffer, IIC_Read_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read_Buffer, IIC_Nack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read_Buffer, IIC_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        LCALL   ?Subroutine5 & 0xFFFF
//  336     IIC_Start();
//  337     //I2C_Send_Byte(addr << 1 | 0);
//  338 		IIC_Send_Byte(0Xd0);
//  339     if (IIC_Wait_Ack())
??CrossCallReturnLabel_5:
        JZ      ??I2C_Read_Buffer_0
//  340 	{
//  341         IIC_Stop();
        ; Setup parameters for call to function IIC_Stop
        LCALL   ??IIC_Stop?relay
//  342         return 0;
        MOV     R1,#0x0
        SJMP    ??I2C_Read_Buffer_1
//  343     }
//  344     IIC_Send_Byte(reg);
??I2C_Read_Buffer_0:
        ; Setup parameters for call to function IIC_Send_Byte
        MOV     R1,?V0 + 0
        LCALL   ??Subroutine13_0 & 0xFFFF
//  345     IIC_Wait_Ack();
//  346 
//  347     IIC_Start();
??CrossCallReturnLabel_14:
        ; Setup parameters for call to function IIC_Start
        LCALL   ?Subroutine4 & 0xFFFF
//  348     //I2C_Send_Byte(addr << 1 | 1);
//  349 		IIC_Send_Byte(0XD1);
//  350     IIC_Wait_Ack();
??CrossCallReturnLabel_3:
        SJMP    ??I2C_Read_Buffer_2
//  351     while (len)
//  352 	{
//  353         *buf = IIC_Read_Byte();
//  354         if (len == 1)
//  355             IIC_Nack();
//  356         else
//  357             IIC_Ack();
??I2C_Read_Buffer_3:
        ; Setup parameters for call to function IIC_Ack
        LCALL   ??IIC_Ack?relay
//  358         buf++;
??I2C_Read_Buffer_4:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  359         len--;
        DEC     ?V0 + 1
??I2C_Read_Buffer_2:
        MOV     A,?V0 + 1
        JZ      ??I2C_Read_Buffer_5
        ; Setup parameters for call to function IIC_Read_Byte
        LCALL   ??IIC_Read_Byte?relay
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     A,#0x1
        XRL     A,?V0 + 1
        JNZ     ??I2C_Read_Buffer_3
        ; Setup parameters for call to function IIC_Nack
        LCALL   ??IIC_Nack?relay
        SJMP    ??I2C_Read_Buffer_4
//  360     }
//  361     IIC_Stop();
??I2C_Read_Buffer_5:
        ; Setup parameters for call to function IIC_Stop
        LCALL   ??IIC_Stop?relay
//  362     return 1;
        MOV     R1,#0x1
??I2C_Read_Buffer_1:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock40
//  363 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOV     R1,A
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_18:
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond49 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function IIC_Start
        ; Setup parameters for call to function IIC_Start
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     A,R1
        RET
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        LCALL   ??IIC_Start?relay
        ; Setup parameters for call to function IIC_Send_Byte
        ; Setup parameters for call to function IIC_Send_Byte
        MOV     R1,#-0x2f
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_19:
        RET
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_1
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_4
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_5
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        LCALL   ??IIC_Start?relay
        ; Setup parameters for call to function IIC_Send_Byte
        ; Setup parameters for call to function IIC_Send_Byte
        ; Setup parameters for call to function IIC_Send_Byte
        ; Setup parameters for call to function IIC_Send_Byte
        MOV     R1,#-0x30
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_1
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_11
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_12
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_13
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_14
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_2
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_3
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_0
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_1
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_4
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_5
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        LCALL   ??IIC_Send_Byte?relay
        ; Setup parameters for call to function IIC_Wait_Ack
        ; Setup parameters for call to function IIC_Wait_Ack
        ; Setup parameters for call to function IIC_Wait_Ack
        ; Setup parameters for call to function IIC_Wait_Ack
        ; Setup parameters for call to function IIC_Wait_Ack
        ; Setup parameters for call to function IIC_Wait_Ack
        ; Setup parameters for call to function IIC_Wait_Ack
        ; Setup parameters for call to function IIC_Wait_Ack
        ; Setup parameters for call to function IIC_Wait_Ack
        ; Setup parameters for call to function IIC_Wait_Ack
        ; Setup parameters for call to function IIC_Wait_Ack
        ; Setup parameters for call to function IIC_Wait_Ack
        LCALL   ??IIC_Wait_Ack?relay
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72
//  364 
//  365 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  366 int I2C_Read(u8 addr, u8 reg, u8 len, u8 *buf)
I2C_Read:
        CFI Block cfiBlock73 Using cfiCommon0
        CFI Function I2C_Read
        CODE
//  367 {
        FUNCALL I2C_Read, I2C_Read_Buffer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  368 	if(I2C_Read_Buffer(addr,reg,len,buf))
        ; Setup parameters for call to function I2C_Read_Buffer
        LCALL   ??I2C_Read_Buffer?relay
        MOV     A,R1
        JZ      ??I2C_Read_0
//  369 		return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??I2C_Read_1
//  370 	else
//  371 		return -1;
??I2C_Read_0:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
??I2C_Read_1:
        LJMP    ??Subroutine12_0 & 0xFFFF
        CFI EndBlock cfiBlock73
//  372 }
//  373 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  374 int I2C_Write(u8 addr, u8 reg, u8 len, u8* data)
I2C_Write:
        CFI Block cfiBlock74 Using cfiCommon0
        CFI Function I2C_Write
        CODE
//  375 {
        FUNCALL I2C_Write, I2C_Write_Buffer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  376  //       u8 *buf=NULL;
//  377  //       u8 i=0;
//  378 //        for(i=0;i<len;i++)
//  379 //            printf("%d",data[i]);
//  380 	if(I2C_Write_Buffer(addr,reg,len,data))
        ; Setup parameters for call to function I2C_Write_Buffer
        LCALL   ??I2C_Write_Buffer?relay
        MOV     A,R1
        JZ      ??I2C_Write_0
//  381         {
//  382 //          printf("%d",reg);
//  383 //          printf("**\n");
//  384 //          for(i=0;i<len;i++)
//  385 //            printf("%02X",data[i]);
//  386 //          printf("\n");
//  387 //          I2C_Read_Buffer(addr,reg,len,buf);
//  388 //          for(i=0;i<len;i++)
//  389 //            printf("%02X",buf[i]);
//  390 //          printf("\n");
//  391 		return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??I2C_Write_1
//  392         }
//  393 	else
//  394         {
//  395           printf("error");
??I2C_Write_0:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "error">` & 0xff
        MOV     R3,#(`?<Constant "error">` >> 8) & 0xff
        LCALL   ??printf?relay
//  396 		return -1;
        MOV     R2,#-0x1
        MOV     R3,#-0x1
//  397         }
??I2C_Write_1:
        LJMP    ??Subroutine12_0 & 0xFFFF
        CFI EndBlock cfiBlock74
//  398 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for gyro_orientation>`:
        DATA8
        DB -1
        DB 0
        DB 0
        DB 0
        DB -1
        DB 0
        DB 0
        DB 0
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for q0>`:
        DATA32
        DD 3F800000H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delay_ms?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delay_ms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_Init_IO?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_Init_IO

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_Start?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_Start

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_Stop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_Stop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_Wait_Ack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_Wait_Ack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_Ack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_Ack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_Nack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_Nack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_Send_Byte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_Send_Byte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_Read_Byte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_Read_Byte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADXL345_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ADXL345_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADXL345_sleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ADXL345_sleep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADXL345_WR_Reg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ADXL345_WR_Reg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADXL345_RD_Reg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ADXL345_RD_Reg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Usart0_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Usart0_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??UartTX_Send_String?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    UartTX_Send_String

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MPU6050_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MPU6050_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MPU6050_Pose?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MPU6050_Pose

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_Write_Buffer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_Write_Buffer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_Read_Buffer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_Read_Buffer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_Read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_Read

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_Write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_Write

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "error">`:
        DB "error"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_30800000:
        DD 30800000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40000000:
        DD 40000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_c0000000:
        DD 0C0000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42653333:
        DD 42653333H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3f800000:
        DD 3F800000H

        END
//  399 
//  400 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// 1 671 bytes in segment BANKED_CODE
//   132 bytes in segment BANK_RELAYS
//    10 bytes in segment SFR_AN
//    13 bytes in segment XDATA_I
//    13 bytes in segment XDATA_ID
//    26 bytes in segment XDATA_ROM_C
//    59 bytes in segment XDATA_Z
// 
// 1 816 bytes of CODE  memory
//     6 bytes of CONST memory (+ 20 bytes shared)
//     0 bytes of DATA  memory (+ 10 bytes shared)
//    72 bytes of XDATA memory
//
//Errors: none
//Warnings: none
