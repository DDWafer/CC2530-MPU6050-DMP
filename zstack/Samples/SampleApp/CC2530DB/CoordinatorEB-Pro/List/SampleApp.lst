###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         23/Oct/2017  18:37:05 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\Source\SampleApp.c  #
#    Command line       =  -f G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣ #
#                          п▒Н║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ          #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\T #
#                          ools\CC2530DB\f8wConfig.cfg (-DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\Source\SampleApp.c  #
#                          -D ZIGBEEPRO -D ZTOOL_P1 -D xMT_TASK -D            #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          LCD_SUPPORTED=DEBUG -lC G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГ #
#                          хэкэLED\20171023ОнХ»╣п▒Н║з│Ш¤о╬тиооМопИ┤┤Циб\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\CoordinatorEB-Pro\List\ -lA          #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB-Pro\List\ --diag_suppress Pe001,Pa010 -o       #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB-Pro\Obj\ -e --debug --core=plain --dptr=16,1   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣ #
#                          п▒Н║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\ -I     #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ #
#                           -I G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ» #
#                          ╣п▒Н║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\ZMAIN\TI2530DB\ -I G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэ #
#                          кэLED\20171023ОнХ»╣п▒Н║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack- #
#                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I       #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\INCLUDE\ -I                    #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I            #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\OSAL\MCU\CCSOC\ -I                 #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\OSAL\INCLUDE\ -I                   #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\AF\ -I                       #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\NWK\ -I                      #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\SEC\ -I                      #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\SAPI\ -I                     #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\SYS\ -I                      #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\ZDO\ -I                      #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\ZMAC\F8W\ -I                       #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\ZMAC\ -I                           #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\SERVICES\SADDR\ -I                 #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\SERVICES\SDATA\ -I                 #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\INCLUDE\ -I                    #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\HIGH_LEVEL\ -I                 #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I            #
#                          G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\   #
#                          -Ohz --require_prototypes                          #
#    List file          =  G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB-Pro\List\SampleApp.lst                         #
#    Object file        =  G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н #
#                          ║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB-Pro\Obj\SampleApp.r51                          #
#                                                                             #
#                                                                             #
###############################################################################

G:\4.Ож▓ЦОж═Э-ХЯоНХ╦┐поклГхэкэLED\20171023ОнХ»╣п▒Н║з│Ш¤о╬тиооМопИ┤┤Циб\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ЊAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_sleep.h"
     73          #include "hal_led.h"
     74          #include "hal_key.h"
     75          
     76          /*********************************************************************
     77           * MACROS
     78           */
     79          
     80          /*********************************************************************
     81           * CONSTANTS
     82           */
     83          
     84          /*********************************************************************
     85           * TYPEDEFS
     86           */
     87          #define Sensor P0_0
     88          
     89          /*********************************************************************
     90           * GLOBAL VARIABLES
     91           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     92          uint8 test=21;
   \                     test:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for test>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          uint8 count_open=0;
   \                     count_open:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          uint8 count_close=0;
   \                     count_close:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          uint8 LedState = 0;
   \                     LedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     96          extern uint8 timesleep_count;
     97          extern uint8 LedState;
     98          extern uint8 open_flag;  //┐ф╗Щл┼║┼ 
     99          extern uint8 close_flag;  //╣п╗Щл┼║┼
    100          extern uint8 timesleep;   //Хе╩▒лП├▀ 
    101          extern uint8 untimesleep;//╬ялПо╣лП├▀
    102          extern uint8 timesleep_test;
    103          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    104          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    105          {
    106            SAMPLEAPP_PERIODIC_CLUSTERID,
    107            SAMPLEAPP_FLASH_CLUSTERID
    108          };
    109          

   \                                 In  segment XDATA_ROM_C, align 1
    110          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    111          {
    112            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    113            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    114            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    115            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    116            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    117            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    118            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    119            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    120            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    121          };
    122          
    123          // This is the Endpoint/Interface description.  It is defined here, but
    124          // filled-in in SampleApp_Init().  Another way to go would be to fill
    125          // in the structure here and make it a "const" (in code space).  The
    126          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    128          
    129          /*********************************************************************
    130           * EXTERNAL VARIABLES
    131           */
    132          
    133          /*********************************************************************
    134           * EXTERNAL FUNCTIONS
    135           */
    136          
    137          /*********************************************************************
    138           * LOCAL VARIABLES
    139           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          uint8 send_flag=0;//М├М┌ОнХ»иб╦═╣п▒Нл┼║┼║зх─ЛМ╩▒
   \                     send_flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142                                    // This variable will be received when
    143                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    152          
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    156          
    157          /*********************************************************************
    158           * LOCAL FUNCTIONS
    159           */
    160          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    161          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    162          void SampleApp_SendPeriodicMessage( void );
    163          void SampleApp_SendFlashMessage( uint16 flashTime );
    164          
    165          /*********************************************************************
    166           * NETWORK LAYER CALLBACKS
    167           */
    168          
    169          /*********************************************************************
    170           * PUBLIC FUNCTIONS
    171           */
    172          
    173          /*********************************************************************
    174           * @fn      SampleApp_Init
    175           *
    176           * @brief   Initialization function for the Generic App Task.
    177           *          This is called during initialization and should contain
    178           *          any application specific initialization (ie. hardware
    179           *          initialization/setup, table initialization, power up
    180           *          notificaiton ... ).
    181           *
    182           * @param   task_id - the ID assigned by OSAL.  This ID should be
    183           *                    used to send messages and set timers.
    184           *
    185           * @return  none
    186           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    187          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    188          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    189            SampleApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    190            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    191            SampleApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    192          
    193            // Device hardware initialization can be added here or in main() (Zmain.c).
    194            // If the hardware is application specific - add it here.
    195            // If the hardware is other parts of the device add it in main().
    196          
    197           #if defined ( BUILD_ALL_DEVICES )
    198            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    199            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    200            // together - if they are - we will start up a coordinator. Otherwise,
    201            // the device will start as a router.
    202            if ( readCoordinatorJumper() )
    203              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    204            else
    205              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    206          #endif // BUILD_ALL_DEVICES
    207          
    208          #if defined ( HOLD_AUTO_START )
    209            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    210            //  from starting the device and wait for the application to
    211            //  start the device.
    212            ZDOInitDevice(0);
    213          #endif
    214          
    215            // Setup for the periodic message's destination address
    216            // Broadcast to everyone
    217            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000015   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000018   740F         MOV     A,#0xf
   \   00001A   F0           MOVX    @DPTR,A
    218            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00001B   A3           INC     DPTR
   \   00001C   7414         MOV     A,#0x14
   \   00001E   F0           MOVX    @DPTR,A
    219            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00001F   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000022   74FF         MOV     A,#-0x1
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   F0           MOVX    @DPTR,A
    220          
    221            // Setup for the flash command's destination address - Group 1
    222            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000027   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00002A   7401         MOV     A,#0x1
   \   00002C   F0           MOVX    @DPTR,A
    223            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002D   A3           INC     DPTR
   \   00002E   7414         MOV     A,#0x14
   \   000030   F0           MOVX    @DPTR,A
    224            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP; //Ож║┼1
   \   000031   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000034   7401         MOV     A,#0x1
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    225            //SampleApp_Flash_DstAddr.addr.shortAddr = 0x0002;                //Ож║┼2
    226            
    227            // Fill out the endpoint description.
    228            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003A   90....       MOV     DPTR,#SampleApp_epDesc
   \   00003D   7414         MOV     A,#0x14
   \   00003F   F0           MOVX    @DPTR,A
    229            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000040   A3           INC     DPTR
   \   000041   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000047   F0           MOVX    @DPTR,A
    230            SampleApp_epDesc.simpleDesc
    231                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000048   A3           INC     DPTR
   \   000049   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00004F   F0           MOVX    @DPTR,A
    232            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000050   A3           INC     DPTR
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    233          
    234            // Register the endpoint description with the AF
    235            afRegister( &SampleApp_epDesc );
   \   000053                ; Setup parameters for call to function afRegister
   \   000053   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000055   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000057   12....       LCALL   ??afRegister?relay
    236          
    237            // Register for all key events - This app will handle all key events
    238            RegisterForKeys( SampleApp_TaskID );
   \   00005A                ; Setup parameters for call to function RegisterForKeys
   \   00005A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   12....       LCALL   ??RegisterForKeys?relay
    239          
    240            // By default, all devices start out in Group 1
    241            SampleApp_Group.ID = 0x0001;
   \   000062   90....       MOV     DPTR,#SampleApp_Group
   \   000065   7401         MOV     A,#0x1
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
    242            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00006E   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000071   F5..         MOV     ?V0 + 2,A
   \   000073   78..         MOV     R0,#?V0 + 0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000078   7C07         MOV     R4,#0x7
   \   00007A   7D00         MOV     R5,#0x0
   \   00007C   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00007E   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000080   12....       LCALL   ??osal_memcpy?relay
   \   000083   7403         MOV     A,#0x3
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
    243            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000088                ; Setup parameters for call to function aps_AddGroup
   \   000088   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   00008A   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   00008C   7914         MOV     R1,#0x14
   \   00008E   12....       LCALL   ??aps_AddGroup?relay
    244          
    245          #if defined ( LCD_SUPPORTED )
    246            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   000091                ; Setup parameters for call to function HalLcdWriteString
   \   000091   7901         MOV     R1,#0x1
   \   000093   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   000095   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   000097   12....       LCALL   ??HalLcdWriteString?relay
    247          #endif
    248          }
   \   00009A   7F03         MOV     R7,#0x3
   \   00009C   02....       LJMP    ?BANKED_LEAVE_XDATA
    249          
    250          /*********************************************************************
    251           * @fn      SampleApp_ProcessEvent
    252           *
    253           * @brief   Generic Application Task event processor.  This function
    254           *          is called to process all events for the task.  Events
    255           *          include timers, messages and any other user defined events.
    256           *
    257           * @param   task_id  - The OSAL assigned task ID.
    258           * @param   events - events to process.  This is a bit map and can
    259           *                   contain more than one event.
    260           *
    261           * @return  none
    262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    263          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    264          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    265            afIncomingMSGPacket_t *MSGpkt;
    266            (void)task_id;  // Intentionally unreferenced parameter
    267          
    268            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6079         JZ      ??SampleApp_ProcessEvent_0
    269            {
    270              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   802B         SJMP    ??SampleApp_ProcessEvent_1
    271              while ( MSGpkt )
    272              {
    273                switch ( MSGpkt->hdr.event )
    274                {
    275                  // Received when a key is pressed
    276                  case KEY_CHANGE:
    277                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    278                    break;
    279          
    280                  // Received when a messages is received (OTA) for this endpoint
    281                  case AF_INCOMING_MSG_CMD:
    282                    SampleApp_MessageMSGCB( MSGpkt );
    283                    break;
    284          
    285                  // Received whenever the device changes state in the network
    286                  case ZDO_STATE_CHANGE:
    287                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    288                    if ( (SampleApp_NwkState == DEV_ZB_COORD) ||
    289                           (SampleApp_NwkState == DEV_ROUTER)
    290                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6409         XRL     A,#0x9
   \   000017   600A         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6407         XRL     A,#0x7
   \   00001C   6005         JZ      ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6406         XRL     A,#0x6
   \   000021   7010         JNZ     ??SampleApp_ProcessEvent_4
    291                    {
    292                      // Start sending the periodic message in a regular interval.
    293                      osal_start_timerEx( SampleApp_TaskID,
    294                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    295                                       SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000023                ; Setup parameters for call to function osal_start_timerEx
   \   000023   7CE8         MOV     R4,#-0x18
   \   000025   7D03         MOV     R5,#0x3
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   ??osal_start_timerEx?relay
    296                    }
    297                    else
    298                    {
    299                      // Device is no longer in the network
    300                    }
    301                    break;
    302          
    303                  default:
    304                    break;
    305                }
    306          
    307                // Release the memory
    308                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000033                ; Setup parameters for call to function osal_msg_deallocate
   \   000033   AA..         MOV     R2,?V0 + 0
   \   000035   AB..         MOV     R3,?V0 + 1
   \   000037   12....       LCALL   ??osal_msg_deallocate?relay
    309          
    310                // Next - if one is available
    311                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003A                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   ??osal_msg_receive?relay
   \   000042   8A..         MOV     ?V0 + 0,R2
   \   000044   8B..         MOV     ?V0 + 1,R3
   \   000046   E5..         MOV     A,?V0 + 0
   \   000048   45..         ORL     A,?V0 + 1
   \   00004A   6032         JZ      ??SampleApp_ProcessEvent_5
   \   00004C   85..82       MOV     DPL,?V0 + 0
   \   00004F   85..83       MOV     DPH,?V0 + 1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   24E6         ADD     A,#-0x1a
   \   000055   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000057   245A         ADD     A,#0x5a
   \   000059   6006         JZ      ??SampleApp_ProcessEvent_7
   \   00005B   24EF         ADD     A,#-0x11
   \   00005D   60B0         JZ      ??SampleApp_ProcessEvent_2
   \   00005F   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000061                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FA           MOV     R2,A
   \   000066   85..82       MOV     DPL,?V0 + 0
   \   000069   85..83       MOV     DPH,?V0 + 1
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000073   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000075                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000075   AA..         MOV     R2,?V0 + 0
   \   000077   AB..         MOV     R3,?V0 + 1
   \   000079   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00007C   80B5         SJMP    ??SampleApp_ProcessEvent_4
    312              }
    313          
    314              // return unprocessed events
    315              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   000083   FB           MOV     R3,A
   \   000084   802A         SJMP    ??SampleApp_ProcessEvent_9
    316            }
    317          
    318            // Send a message out - This event is generated by a timer
    319            //  (setup in SampleApp_Init()).
    320            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000086   EE           MOV     A,R6
   \   000087   A2E0         MOV     C,0xE0 /* A   */.0
   \   000089   5021         JNC     ??SampleApp_ProcessEvent_10
    321            {
    322              // Send the periodic message
    323              SampleApp_SendPeriodicMessage();
   \   00008B                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00008B   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    324          
    325              // Setup to send message again in normal period (+ a little jitter)
    326              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    327                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00008E                ; Setup parameters for call to function osal_rand
   \   00008E   12....       LCALL   ??osal_rand?relay
   \   000091                ; Setup parameters for call to function osal_start_timerEx
   \   000091   EA           MOV     A,R2
   \   000092   24E8         ADD     A,#-0x18
   \   000094   FC           MOV     R4,A
   \   000095   E4           CLR     A
   \   000096   3403         ADDC    A,#0x3
   \   000098   FD           MOV     R5,A
   \   000099   7A01         MOV     R2,#0x1
   \   00009B   7B00         MOV     R3,#0x0
   \   00009D   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   12....       LCALL   ??osal_start_timerEx?relay
    328          
    329              // return unprocessed events
    330              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A5   EE           MOV     A,R6
   \   0000A6   6401         XRL     A,#0x1
   \   0000A8   FA           MOV     R2,A
   \   0000A9   EF           MOV     A,R7
   \   0000AA   80D7         SJMP    ??SampleApp_ProcessEvent_8
    331            }
    332          
    333            // Discard unknown events
    334            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000AC   7A00         MOV     R2,#0x0
   \   0000AE   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000B0   7F04         MOV     R7,#0x4
   \   0000B2   02....       LJMP    ?BANKED_LEAVE_XDATA
    335          }
    336          
    337          /*********************************************************************
    338           * Event Generation Functions
    339           */
    340          /*********************************************************************
    341           * @fn      SampleApp_HandleKeys
    342           *
    343           * @brief   Handles all key events for this device.
    344           *
    345           * @param   shift - true if in shift/alt.
    346           * @param   keys - bit field for key events. Valid entries:
    347           *                 HAL_KEY_SW_2
    348           *                 HAL_KEY_SW_1
    349           *
    350           * @return  none
    351           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    352          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    353          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    354            (void)shift;  // Intentionally unreferenced parameter
    355            
    356            if ( keys & HAL_KEY_SW_6 )
    357            {
    358              #if defined(ZDO_COORDINATOR)      //лГхэкэо╗йМ╩Н╩§ЙП
    359              
    360              #else                             //┬иМ╔кэ║═оНХ╦▓┼иб╦═╩§ЙП
    361                SampleApp_SendFlashMessage(0);  //мнОж▓Ций╩йиб╩§ЙП
    362              #endif
    363            }
    364          
    365            if ( keys & HAL_KEY_SW_1 )
   \   000006   A2E0         MOV     C,0xE0 /* A   */.0
   \   000008   5024         JNC     ??SampleApp_HandleKeys_0
    366            {
    367              /* The Flashr Command is sent to Group 1.
    368               * This key toggles this device in and out of group 1.
    369               * If this device doesn't belong to group 1, this application
    370               * will not receive the Flash command sent to group 1.
    371               */
    372              aps_Group_t *grp;
    373              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    374              if ( grp )
   \   00000A                ; Setup parameters for call to function aps_FindGroup
   \   00000A   7A01         MOV     R2,#0x1
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   7914         MOV     R1,#0x14
   \   000010   12....       LCALL   ??aps_FindGroup?relay
   \   000013   8B..         MOV     ?V0 + 1,R3
   \   000015   EA           MOV     A,R2
   \   000016   45..         ORL     A,?V0 + 1
   \   000018   600B         JZ      ??SampleApp_HandleKeys_1
    375              {
    376                // Remove from the group
    377                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   00001A                ; Setup parameters for call to function aps_RemoveGroup
   \   00001A   7A01         MOV     R2,#0x1
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   7914         MOV     R1,#0x14
   \   000020   12....       LCALL   ??aps_RemoveGroup?relay
   \   000023   8009         SJMP    ??SampleApp_HandleKeys_0
    378              }
    379              else
    380              {
    381                // Add to the flash group
    382                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_1:
   \   000025                ; Setup parameters for call to function aps_AddGroup
   \   000025   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000027   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000029   7914         MOV     R1,#0x14
   \   00002B   12....       LCALL   ??aps_AddGroup?relay
    383              }
    384            }
    385          }
   \                     ??SampleApp_HandleKeys_0:
   \   00002E                REQUIRE ?Subroutine0
   \   00002E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    386          
    387          /*********************************************************************
    388           * LOCAL FUNCTIONS
    389           */
    390          
    391          /*********************************************************************
    392           * @fn      SampleApp_MessageMSGCB
    393           *
    394           * @brief   Data message processor callback.  This function processes
    395           *          any incoming data - probably from other devices.  So, based
    396           *          on cluster ID, perform the intended action.
    397           *
    398           * @param   none
    399           *
    400           * @return  none
    401           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    402          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    403          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    404            uint8 data;
    405          
    406            switch ( pkt->clusterId )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000013   7020         JNZ     ??SampleApp_MessageMSGCB_1
    407            {    
    408              case SAMPLEAPP_PERIODIC_CLUSTERID:
    409                  break;
    410          
    411              case SAMPLEAPP_FLASH_CLUSTERID:
    412                  data = (uint8)pkt->cmd.Data[0];
    413                  if(data == 0) 
   \   000015   EA           MOV     A,R2
   \   000016   2421         ADD     A,#0x21
   \   000018   F582         MOV     DPL,A
   \   00001A   EB           MOV     A,R3
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F583         MOV     DPH,A
   \   000025   8882         MOV     DPL,R0
   \   000027   E0           MOVX    A,@DPTR
   \   000028   7004         JNZ     ??SampleApp_MessageMSGCB_2
    414                  HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF);  
   \   00002A                ; Setup parameters for call to function HalLedSet
   \   00002A   7A00         MOV     R2,#0x0
   \   00002C   8002         SJMP    ??SampleApp_MessageMSGCB_3
    415                  else
    416                  HalLedSet(HAL_LED_2, HAL_LED_MODE_ON); 
   \                     ??SampleApp_MessageMSGCB_2:
   \   00002E                ; Setup parameters for call to function HalLedSet
   \   00002E   7A01         MOV     R2,#0x1
   \                     ??SampleApp_MessageMSGCB_3:
   \   000030   7902         MOV     R1,#0x2
   \   000032   12....       LCALL   ??HalLedSet?relay
    417                  break;
    418            }
    419          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000035   D083         POP     DPH
   \   000037   D082         POP     DPL
   \   000039   02....       LJMP    ?BRET
    420          
    421          /*********************************************************************
    422           * @fn      SampleApp_SendPeriodicMessage
    423           *
    424           * @brief   Send the periodic message.
    425           *
    426           * @param   none
    427           *
    428           * @return  none
    429           */
    430          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    432          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    433          
    434           ////////////////////////////////// 
    435              test=21; 
   \   000005   90....       MOV     DPTR,#test
   \   000008   7415         MOV     A,#0x15
   \   00000A   F0           MOVX    @DPTR,A
    436             
    437            if((count_open<1 && open_flag==1)||(count_close<1 && close_flag==1))
   \   00000B   90....       MOV     DPTR,#count_open
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   7008         JNZ     ??SampleApp_SendPeriodicMessage_0
   \   000011   90....       MOV     DPTR,#open_flag
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6401         XRL     A,#0x1
   \   000017   6014         JZ      ??SampleApp_SendPeriodicMessage_1
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   000019   90....       MOV     DPTR,#count_close
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6003         JZ      $+5
   \   00001F   02....       LJMP    ??SampleApp_SendPeriodicMessage_2 & 0xFFFF
   \   000022   90....       MOV     DPTR,#close_flag
   \   000025   E0           MOVX    A,@DPTR
   \   000026   6401         XRL     A,#0x1
   \   000028   6003         JZ      $+5
   \   00002A   02....       LJMP    ??SampleApp_SendPeriodicMessage_2 & 0xFFFF
    438            {
    439              if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    440                                   SAMPLEAPP_PERIODIC_CLUSTERID,
    441                                   0,
    442                                   &test,
    443                                   &SampleApp_TransID,
    444                                   AF_DISCV_ROUTE,
    445                                   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   00002D                ; Setup parameters for call to function AF_DataRequest
   \   00002D   75..1E       MOV     ?V0 + 0,#0x1e
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000038   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75....       MOV     ?V0 + 0,#test & 0xff
   \   000043   75....       MOV     ?V0 + 1,#(test >> 8) & 0xff
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   E4           CLR     A
   \   00004C   F5..         MOV     ?V0 + 0,A
   \   00004E   F5..         MOV     ?V0 + 1,A
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   75..01       MOV     ?V0 + 0,#0x1
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   7920         MOV     R1,#0x20
   \   00005F   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000061   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000063   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000065   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000067   12....       LCALL   ??AF_DataRequest?relay
   \   00006A   7409         MOV     A,#0x9
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006F   E9           MOV     A,R1
   \   000070   7057         JNZ     ??SampleApp_SendPeriodicMessage_3
    446              {
    447                //иб╦═│╔╣д
    448                //LED1=!LED1;   //│╔╣диб╦═м╗ИШ╩§ЙП LEDdхкО┤╠гКл╗╗м╗┤╬
    449               if(open_flag==1)
   \   000072   90....       MOV     DPTR,#open_flag
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6401         XRL     A,#0x1
   \   000078   7007         JNZ     ??SampleApp_SendPeriodicMessage_4
    450                 test=21;
   \   00007A   90....       MOV     DPTR,#test
   \   00007D   7415         MOV     A,#0x15
   \   00007F   800D         SJMP    ??SampleApp_SendPeriodicMessage_5
    451               else if(close_flag==1)
   \                     ??SampleApp_SendPeriodicMessage_4:
   \   000081   90....       MOV     DPTR,#close_flag
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6401         XRL     A,#0x1
   \   000087   7006         JNZ     ??SampleApp_SendPeriodicMessage_6
    452                 test=20; 
   \   000089   90....       MOV     DPTR,#test
   \   00008C   7414         MOV     A,#0x14
   \                     ??SampleApp_SendPeriodicMessage_5:
   \   00008E   F0           MOVX    @DPTR,A
    453               
    454               LED1=~LED1;
   \                     ??SampleApp_SendPeriodicMessage_6:
   \   00008F   D2F0         SETB    B.0
   \   000091   A290         MOV     C,0x90.0
   \   000093   30F001       JNB     B.0,??SampleApp_SendPeriodicMessage_7
   \   000096   B3           CPL     C
   \                     ??SampleApp_SendPeriodicMessage_7:
   \   000097   12....       LCALL   ?Subroutine1 & 0xFFFF
    455               MicroWait (50000);
    456               MicroWait (50000);
    457               LED1=~LED1;
   \                     ??CrossCallReturnLabel_0:
   \   00009A   30F001       JNB     B.0,??SampleApp_SendPeriodicMessage_8
   \   00009D   B3           CPL     C
   \                     ??SampleApp_SendPeriodicMessage_8:
   \   00009E   12....       LCALL   ?Subroutine1 & 0xFFFF
    458               MicroWait (50000);
    459               MicroWait (50000);
    460               LED1=~LED1;
   \                     ??CrossCallReturnLabel_1:
   \   0000A1   30F001       JNB     B.0,??SampleApp_SendPeriodicMessage_9
   \   0000A4   B3           CPL     C
   \                     ??SampleApp_SendPeriodicMessage_9:
   \   0000A5   12....       LCALL   ?Subroutine1 & 0xFFFF
    461               MicroWait (50000);
    462               MicroWait (50000);
    463               LED1=~LED1;
   \                     ??CrossCallReturnLabel_2:
   \   0000A8   30F001       JNB     B.0,??SampleApp_SendPeriodicMessage_10
   \   0000AB   B3           CPL     C
   \                     ??SampleApp_SendPeriodicMessage_10:
   \   0000AC   9290         MOV     0x90.0,C
    464               MicroWait (50000);
   \   0000AE                ; Setup parameters for call to function Onboard_wait
   \   0000AE   12....       LCALL   ?Subroutine2 & 0xFFFF
    465               MicroWait (50000);
    466                   
    467               if(test==21)
   \                     ??CrossCallReturnLabel_3:
   \   0000B1   90....       MOV     DPTR,#test
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   6415         XRL     A,#0x15
   \   0000B7   7005         JNZ     ??SampleApp_SendPeriodicMessage_11
    468                {
    469                  count_open++;
   \   0000B9   90....       MOV     DPTR,#count_open
   \   0000BC   8008         SJMP    ??SampleApp_SendPeriodicMessage_12
    470                }
    471                  if(test==20)
   \                     ??SampleApp_SendPeriodicMessage_11:
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   6414         XRL     A,#0x14
   \   0000C1   7006         JNZ     ??SampleApp_SendPeriodicMessage_3
    472                    count_close++;
   \   0000C3   90....       MOV     DPTR,#count_close
   \                     ??SampleApp_SendPeriodicMessage_12:
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   04           INC     A
   \   0000C8   F0           MOVX    @DPTR,A
    473                
    474              }
    475              else
    476              {
    477                // Error occurred in request to send.
    478              }
    479              
    480            
    481              if(count_close >= 1)
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   0000C9   90....       MOV     DPTR,#count_close
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   7003         JNZ     $+5
   \   0000CF   02....       LJMP    ??SampleApp_SendPeriodicMessage_13 & 0xFFFF
    482              {
    483                // иб╦══Ж6ИШ╣п▒Нл┼║┼║з close_flag▒╗Кт│§ йЭ╚в╬яо╣ЙАлП├▀
    484              close_flag=0;
   \   0000D2   90....       MOV     DPTR,#close_flag
   \   0000D5   E4           CLR     A
   \   0000D6   F0           MOVX    @DPTR,A
    485              open_flag=0;
   \   0000D7   90....       MOV     DPTR,#open_flag
   \   0000DA   F0           MOVX    @DPTR,A
    486              
    487              timesleep=0;
   \   0000DB   90....       MOV     DPTR,#timesleep
   \   0000DE   F0           MOVX    @DPTR,A
    488              untimesleep=1;
   \   0000DF   90....       MOV     DPTR,#untimesleep
   \   0000E2   04           INC     A
   \   0000E3   F0           MOVX    @DPTR,A
    489              LED_Flick();
   \   0000E4                ; Setup parameters for call to function LED_Flick
   \   0000E4   12....       LCALL   ??LED_Flick?relay
    490              count_close=0;
   \   0000E7   90....       MOV     DPTR,#count_close
   \   0000EA   E4           CLR     A
   \   0000EB   F0           MOVX    @DPTR,A
    491              count_open=0; 
   \   0000EC   90....       MOV     DPTR,#count_open
   \   0000EF   F0           MOVX    @DPTR,A
    492              LED1=0;
   \   0000F0   C290         CLR     0x90.0
    493              
    494              P0INP = 0X00; //╔Уо├P0┐┌╩С╚в
   \   0000F2   758F00       MOV     0x8f,#0x0
    495              
    496              SysPowerMode(3);
   \   0000F5                ; Setup parameters for call to function SysPowerMode
   \   0000F5   7903         MOV     R1,#0x3
   \   0000F7   12....       LCALL   ??SysPowerMode?relay
   \   0000FA   807F         SJMP    ??SampleApp_SendPeriodicMessage_13
    497              
    498              }
    499            }
    500            
    501            else if(count_open >= 1)
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   0000FC   90....       MOV     DPTR,#count_open
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   6079         JZ      ??SampleApp_SendPeriodicMessage_13
    502            {
    503              
    504              open_flag=0;  //иб╦══Ж6ИШopen╩§ЙПо«║зБгopen_flag▒ЖоЙ╬╗Кт┴с йЭ╚влП├▀
   \   000102   90....       MOV     DPTR,#open_flag
   \   000105   E4           CLR     A
   \   000106   F0           MOVX    @DPTR,A
    505              close_flag=0;
   \   000107   90....       MOV     DPTR,#close_flag
   \   00010A   F0           MOVX    @DPTR,A
    506              
    507              timesleep=1;
   \   00010B   90....       MOV     DPTR,#timesleep
   \   00010E   04           INC     A
   \   00010F   F0           MOVX    @DPTR,A
    508              untimesleep=0;
   \   000110   90....       MOV     DPTR,#untimesleep
   \   000113   E4           CLR     A
   \   000114   F0           MOVX    @DPTR,A
    509              LED_Flick();
   \   000115                ; Setup parameters for call to function LED_Flick
   \   000115   12....       LCALL   ??LED_Flick?relay
    510              count_open=0;
   \   000118   90....       MOV     DPTR,#count_open
   \   00011B   E4           CLR     A
   \   00011C   F0           MOVX    @DPTR,A
    511              count_close=0;
   \   00011D   90....       MOV     DPTR,#count_close
   \   000120   F0           MOVX    @DPTR,A
    512              timesleep_count=0;
   \   000121   90....       MOV     DPTR,#timesleep_count
   \   000124   F0           MOVX    @DPTR,A
    513              //╩§ЙПиб╦══Жо«║зйЭлли┼хуБги┼хуйр╩Э║зн┘йЭ╚вХе╩▒╦»├▀
    514              MicroWait (50000);
   \   000125                ; Setup parameters for call to function Onboard_wait
   \   000125   7A50         MOV     R2,#0x50
   \   000127   7BC3         MOV     R3,#-0x3d
   \   000129   12....       LCALL   ??Onboard_wait?relay
    515              MicroWait (50000);
   \   00012C                ; Setup parameters for call to function Onboard_wait
   \   00012C   800A         SJMP    ??SampleApp_SendPeriodicMessage_14
    516              MicroWait (50000);//ЛМ╩▒150ms
    517              while(1)
    518              {
    519                if(Sensor==0)
    520                {
    521                  LED1=0;
    522                  break;
    523                }
    524                else
    525                  LED1=~LED1;
   \                     ??SampleApp_SendPeriodicMessage_15:
   \   00012E   D2F0         SETB    B.0
   \   000130   A290         MOV     C,0x90.0
   \   000132   30F001       JNB     B.0,??SampleApp_SendPeriodicMessage_16
   \   000135   B3           CPL     C
   \                     ??SampleApp_SendPeriodicMessage_16:
   \   000136   9290         MOV     0x90.0,C
    526                MicroWait (50000);
   \   000138                ; Setup parameters for call to function Onboard_wait
   \                     ??SampleApp_SendPeriodicMessage_14:
   \   000138   12....       LCALL   ?Subroutine2 & 0xFFFF
    527                MicroWait (50000);
   \                     ??CrossCallReturnLabel_4:
   \   00013B   A280         MOV     C,0x80.0
   \   00013D   40EF         JC      ??SampleApp_SendPeriodicMessage_15
   \   00013F   C290         CLR     0x90.0
    528              }
    529              while(1)
    530              {
    531                Set_ST_Period(1); //30s╦»├▀Хе╩▒кэ  И├Хе╩▒║»╩§ОЬХЯ╔Уо├60s  ═е╣§╝к╩§╗ых├1лА╩▒
   \                     ??SampleApp_SendPeriodicMessage_17:
   \   000141                ; Setup parameters for call to function Set_ST_Period
   \   000141   7A01         MOV     R2,#0x1
   \   000143   7B00         MOV     R3,#0x0
   \   000145   12....       LCALL   ??Set_ST_Period?relay
    532                SysPowerMode(3);
   \   000148                ; Setup parameters for call to function SysPowerMode
   \   000148   7903         MOV     R1,#0x3
   \   00014A   12....       LCALL   ??SysPowerMode?relay
    533            //   timesleep_count++;
    534                if(timesleep_count>=120)
   \   00014D   90....       MOV     DPTR,#timesleep_count
   \   000150   E0           MOVX    A,@DPTR
   \   000151   C3           CLR     C
   \   000152   9478         SUBB    A,#0x78
   \   000154   40EB         JC      ??SampleApp_SendPeriodicMessage_17
    535                {
    536                 //и└о╣╗йлЛ╩▒Мл┤зху┴э н┌╗йлЛ║зP0,0┼Со├╬фИ▀ОУ╠г иб╦═йр╩Э║з┼Со├╬ф╩С╚в¤┬└Г
    537                  P0INP = 0X00; //╔Уо├P0┐┌╚§╠г
   \   000156   758F00       MOV     0x8f,#0x0
    538               //  P2INP |= 0X20; //ЛАны¤┬└Г                 // ╔¤└Г║─хуБ┐Б┐Б┐Б┐Б┐ 
    539              /////////////////////////////////////////////
    540                  timesleep_count=0;      
   \   000159   E4           CLR     A
   \   00015A   F0           MOVX    @DPTR,A
    541                  count_close=0;
   \   00015B   90....       MOV     DPTR,#count_close
   \   00015E   F0           MOVX    @DPTR,A
    542                  count_open=0;
   \   00015F   90....       MOV     DPTR,#count_open
   \   000162   F0           MOVX    @DPTR,A
    543                  
    544                  close_flag=1; 
   \   000163   90....       MOV     DPTR,#close_flag
   \   000166   04           INC     A
   \   000167   F0           MOVX    @DPTR,A
    545                  open_flag=0; 
   \   000168   90....       MOV     DPTR,#open_flag
   \   00016B   E4           CLR     A
   \   00016C   F0           MOVX    @DPTR,A
    546                  SysPowerMode(4);     
   \   00016D                ; Setup parameters for call to function SysPowerMode
   \   00016D   7904         MOV     R1,#0x4
   \   00016F   12....       LCALL   ??SysPowerMode?relay
    547                  timesleep=0;
   \   000172   90....       MOV     DPTR,#timesleep
   \   000175   E4           CLR     A
   \   000176   F0           MOVX    @DPTR,A
    548                  untimesleep=0;
   \   000177   90....       MOV     DPTR,#untimesleep
   \   00017A   F0           MOVX    @DPTR,A
    549                  break;
    550                }
    551              }
    552              
    553              
    554            }
    555          
    556          }
   \                     ??SampleApp_SendPeriodicMessage_13:
   \   00017B   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00017E                REQUIRE _A_P1
   \   00017E                REQUIRE P0INP
   \   00017E                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7A50         MOV     R2,#0x50
   \   000002   7BC3         MOV     R3,#-0x3d
   \   000004   12....       LCALL   ??Onboard_wait?relay
   \   000007                ; Setup parameters for call to function Onboard_wait
   \   000007                ; Setup parameters for call to function Onboard_wait
   \   000007                ; Setup parameters for call to function Onboard_wait
   \   000007                ; Setup parameters for call to function Onboard_wait
   \   000007                ; Setup parameters for call to function Onboard_wait
   \   000007   7A50         MOV     R2,#0x50
   \   000009   7BC3         MOV     R3,#-0x3d
   \   00000B   12....       LCALL   ??Onboard_wait?relay
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   9290         MOV     0x90.0,C
   \   000002                ; Setup parameters for call to function Onboard_wait
   \   000002                ; Setup parameters for call to function Onboard_wait
   \   000002                ; Setup parameters for call to function Onboard_wait
   \   000002   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000005   D2F0         SETB    B.0
   \   000007   A290         MOV     C,0x90.0
   \   000009   22           RET
    557          
    558          /*********************************************************************
    559           * @fn      SampleApp_SendFlashMessage
    560           *
    561           * @brief   Send the flash message to group 1.
    562           *
    563           * @param   flashTime - in milliseconds
    564           *
    565           * @return  none
    566           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    567          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    568          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    569            LedState = ~LedState;
   \   000005   90....       MOV     DPTR,#LedState
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F4           CPL     A
   \   00000A   F0           MOVX    @DPTR,A
    570            
    571            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    572                                 SAMPLEAPP_FLASH_CLUSTERID,
    573                                 1,
    574                                 &LedState,
    575                                 &SampleApp_TransID,
    576                                 AF_DISCV_ROUTE,
    577                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00000B                ; Setup parameters for call to function AF_DataRequest
   \   00000B   75..1E       MOV     ?V0 + 0,#0x1e
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000013   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000016   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75....       MOV     ?V0 + 0,#LedState & 0xff
   \   000021   75....       MOV     ?V0 + 1,#(LedState >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   75..01       MOV     ?V0 + 0,#0x1
   \   00002C   75..00       MOV     ?V0 + 1,#0x0
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   75..02       MOV     ?V0 + 0,#0x2
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7920         MOV     R1,#0x20
   \   00003E   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000040   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000042   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000044   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000046   12....       LCALL   ??AF_DataRequest?relay
   \   000049   7409         MOV     A,#0x9
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004E   E9           MOV     A,R1
   \   00004F   7011         JNZ     ??SampleApp_SendFlashMessage_0
    578            {
    579              if(LedState == 0)
   \   000051   90....       MOV     DPTR,#LedState
   \   000054   E0           MOVX    A,@DPTR
   \   000055   7004         JNZ     ??SampleApp_SendFlashMessage_1
    580                HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);  
   \   000057                ; Setup parameters for call to function HalLedSet
   \   000057   7A01         MOV     R2,#0x1
   \   000059   8002         SJMP    ??SampleApp_SendFlashMessage_2
    581              else
    582                HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF); 
   \                     ??SampleApp_SendFlashMessage_1:
   \   00005B                ; Setup parameters for call to function HalLedSet
   \   00005B   7A00         MOV     R2,#0x0
   \                     ??SampleApp_SendFlashMessage_2:
   \   00005D   7901         MOV     R1,#0x1
   \   00005F   12....       LCALL   ??HalLedSet?relay
    583            }
    584            else
    585            {
    586              // Error occurred in request to send.
    587            }
    588          }
   \                     ??SampleApp_SendFlashMessage_0:
   \   000062   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for test>`:
   \   000000   15           DB 21

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    
    589          
    590          /*********************************************************************
    591          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             2      0     12
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         0      0     19
       -> AF_DataRequest                0      0     38
       -> HalLedSet                     0      0     20
       -> HalLedSet                     0      0     20
     SampleApp_SendPeriodicMessage      0      0     31
       -> AF_DataRequest                0      0     38
       -> Onboard_wait                  0      0     20
       -> Onboard_wait                  0      0     20
       -> Onboard_wait                  0      0     20
       -> Onboard_wait                  0      0     20
       -> Onboard_wait                  0      0     20
       -> Onboard_wait                  0      0     20
       -> Onboard_wait                  0      0     20
       -> Onboard_wait                  0      0     20
       -> LED_Flick                     0      0     20
       -> SysPowerMode                  0      0     20
       -> LED_Flick                     0      0     20
       -> Onboard_wait                  0      0     20
       -> Onboard_wait                  0      0     20
       -> Onboard_wait                  0      0     20
       -> Onboard_wait                  0      0     20
       -> Onboard_wait                  0      0     20
       -> Set_ST_Period                 0      0     20
       -> SysPowerMode                  0      0     20
       -> SysPowerMode                  0      0     20


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     P0INP                                    1
     _A_P1                                    1
     test                                     1
     count_open                               1
     count_close                              1
     LedState                                 1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     send_flag                                1
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         159
     SampleApp_ProcessEvent                 181
     SampleApp_HandleKeys                    46
     ?Subroutine0                             5
     SampleApp_MessageMSGCB                  60
     SampleApp_SendPeriodicMessage          382
     ?Subroutine2                             4
     ?Subroutine3                            15
     ?Subroutine1                            10
     SampleApp_SendFlashMessage             101
     ?<Initializer for test>                  1
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10

 
 963 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
  34 bytes in segment XDATA_ROM_C
  57 bytes in segment XDATA_Z
 
 1 000 bytes of CODE  memory
    34 bytes of CONST memory
     0 bytes of DATA  memory (+ 3 bytes shared)
    58 bytes of XDATA memory

Errors: none
Warnings: none
